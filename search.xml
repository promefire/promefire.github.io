<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo部署到服务器</title>
      <link href="//post/hexo_transfer_aliyun.html"/>
      <url>//post/hexo_transfer_aliyun.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​偶然发现租的阿里云服务器还可以低价续费一年，既然这样，还是把hexo博客迁移到服务器上吧。几年前迁移到服务器一次，当时是本机直接推送Github Page与服务器。但现在我用的是Github Action ，推送到Github Page无需在本机进行编译，如果用原来的方法推送服务器还得多一步本机编译过程。于是想能不能服务器监听Github仓库更新来自动部署hexo，整起！</p><h2 id="服务器端"><a class="markdownIt-Anchor" href="#服务器端"></a> 服务器端</h2><p>前置工作：1、git环境 2、Nginx</p><p>新建目录<code>/www/hexo/public</code> ,将github仓库中的<strong>main</strong>分支pull到该目录</p><blockquote><p>后面宝塔建站不能放在其他敏感目录…</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkdir &#x2F;www&#x2F;hexomkdir publiccd publicgit initgit remote add origin https:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;xxx.github.io.gitgit pull origin main</code></pre><p>安装<code>github-webhook-handler</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd &#x2F;www&#x2F;hexonpm install github-webhook-handler</code></pre><h3 id="创建hook"><a class="markdownIt-Anchor" href="#创建hook"></a> 创建hook</h3><p>创建一个hook，作用是监听 <code>GitHub Webhook </code> 事件并在收到 push 事件时执行一个 Shell 脚本进行部署</p><h4 id="监听脚本"><a class="markdownIt-Anchor" href="#监听脚本"></a> 监听脚本</h4><p>新建<code>webhook.js</code>文件，如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">var http &#x3D; require(&#39;http&#39;)var createHandler &#x3D; require(&#39;github-webhook-handler&#39;)var handler &#x3D; createHandler(&#123; path: &#39;&#x2F;&#39;, secret: &#39;yoursecret&#39; &#125;)function run_cmd(cmd, args, callback) &#123;  var spawn &#x3D; require(&#39;child_process&#39;).spawn;  var child &#x3D; spawn(cmd, args);  var resp &#x3D; &quot;&quot;;  child.stdout.on(&#39;data&#39;, function(buffer) &#123; resp +&#x3D; buffer.toString(); &#125;);  child.stdout.on(&#39;end&#39;, function() &#123; callback (resp) &#125;);&#125;http.createServer(function (req, res) &#123;  handler(req, res, function (err) &#123;    res.statusCode &#x3D; 404    res.end(&#39;no such location&#39;)  &#125;)&#125;).listen(7777)handler.on(&#39;error&#39;, function (err) &#123;  console.error(&#39;Error:&#39;, err.message)&#125;)handler.on(&#39;push&#39;, function (event) &#123;  console.log(&#39;Received a push event for %s to %s&#39;,    event.payload.repository.name,    event.payload.ref);    run_cmd(&#39;sh&#39;, [&#39;.&#x2F;deploy.sh&#39;,event.payload.repository.name], function(text)&#123; console.log(text) &#125;);&#125;)</code></pre><ul><li><code>var handler = createHandler(&#123; path: '/', secret: 'yoursecret' &#125;)</code> 中screct自己设置，后面在Github配置webhook会用到</li><li>listen(7777)   监听端口要在安全组中打开</li></ul><h4 id="执行脚本"><a class="markdownIt-Anchor" href="#执行脚本"></a> 执行脚本</h4><p>新建脚本文件<code>deploy.sh</code> ,运行是执行pull操作，拉取main分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#!&#x2F;bin&#x2F;bashWEB_PATH&#x3D;&#39;&#x2F;www&#x2F;hexo&#x2F;public&#39;echo &quot;Start deployment&quot;cd $WEB_PATHecho &quot;pulling source code...&quot;git reset --hard origin&#x2F;maingit clean -fgit pullgit checkout mainecho &quot;Finished.&quot;</code></pre><ul><li>要注意分支是<code>master</code>还是<code>main</code></li></ul><h4 id="后台运行"><a class="markdownIt-Anchor" href="#后台运行"></a> 后台运行</h4><p>使用<code>nohup</code>命令后台执行<code>webhook.js</code>,输出日志到当前目录下<code>deploy.log</code></p><blockquote><p><strong>nohup</strong> 英文全称 no hang up（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nohup node deploy.js &gt; deploy.log &amp;</code></pre><h3 id="web显示"><a class="markdownIt-Anchor" href="#web显示"></a> Web显示</h3><p>使用宝塔添加站点，网站根目录为<code>/www/hexo/public</code>,与上面保持一致，没有域名使用<code>IP:port</code></p><img src="https://img.promefire.top/blog-img/20240417-222381e5aecc3b06365c99d2fe89641a.png" alt="image-20240417165820866" style="zoom:50%;"><h2 id="github配置webhook"><a class="markdownIt-Anchor" href="#github配置webhook"></a> Github配置webhook</h2><p>​在仓库<code>xxx.github.io</code> ----&gt;setting------&gt;Webhooks-----&gt;Add webhook</p><img src="https://img.promefire.top/blog-img/20240417-b9d11ae064dfed4cb4f154f6e8c966cf.png" alt="image-20240417170516949" style="zoom:50%;"><ul><li>Url 填<code>http://域名：监听端口</code> 或<code>http://IP:监听端口</code></li><li>第二行选Json</li><li>Secret在<code>webhook</code> 设置</li></ul><h2 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h2><p>​配置结束后，本机Git三件套推送至hexo_source(源码仓库)，Github Action编译更新静态文件仓库<code>xxxx.github.io</code>，静态文件仓库更新后使用webhook 配合nodejs自动进行服务器端页面更新。</p><p>Github Action：</p><img src="https://img.promefire.top/blog-img/20240417-8b72a72c467e2acfed2087e24360f966.png" alt="image-20240417172520348" style="zoom:50%;"><p>Webhook执行结果</p><img src="https://img.promefire.top/blog-img/20240417-7c15ac7fbf06efb6936a45fd3e7f17ba.png" alt="image-20240417170723431" style="zoom:50%;"><p>服务器端日志</p><img src="https://img.promefire.top/blog-img/20240417-463ef7007f2de935326283ddaaa8eaf7.png" alt="image-20240417172622858" style="zoom:50%;"><p>参考：</p><p><a href="https://blog.mutoe.com/2017/deploy-hexo-website-to-self-server">https://blog.mutoe.com/2017/deploy-hexo-website-to-self-server</a></p><p><a href="https://www.jianshu.com/p/e4cacd775e5b">https://www.jianshu.com/p/e4cacd775e5b</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给博客提提速！</title>
      <link href="//post/BlogSpeedUp.html"/>
      <url>//post/BlogSpeedUp.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>​部署在Github 的博客墙内访问很糟糕，博客提速刻不容缓！</p><h2 id="使用cloudflare加速github-pages"><a class="markdownIt-Anchor" href="#使用cloudflare加速github-pages"></a> 使用cloudflare加速Github pages</h2><h3 id="设置域名解析"><a class="markdownIt-Anchor" href="#设置域名解析"></a> 设置域名解析</h3><p>首先要有一个域名，添加解析记录 ,记录类型选择<code>CNAME</code> ,记录值写<code>username.github.io</code> ,如图</p><p><img src="https://img.promefire.top/blog-img/20240115-f9f3f702a64c4980d943f5d8f13b7f17.png" alt="image-20240109191314520"></p><h3 id="设置github-page"><a class="markdownIt-Anchor" href="#设置github-page"></a> 设置Github Page</h3><p>Github Page 提供了<code>Custom domain</code> 服务，</p><p>在<code>username.github.io</code> 仓库下 <code>setting</code> -&gt;  <code>Pages</code> -&gt;<code>Custom domain</code>  填入域名<code>blog.promefire.top</code> 。保存后会在根目录生成<code>CNAME</code> 文件，里面保存域名配置信息</p><p><img src="https://img.promefire.top/blog-img/20240110-1aa5949d2b207f4e00efe905bb1789ee.png" alt></p><h2 id="使用-clouddlare-cdn"><a class="markdownIt-Anchor" href="#使用-clouddlare-cdn"></a> 使用 Clouddlare CDN</h2><p>1、点击<a href="https://dash.cloudflare.com/sign-up">这里</a>注册，选择免费套餐</p><p>2、添加站点</p><p>这要要填二级域名，不是前加<code>blog</code> 的子域名</p><p><img src="https://img.promefire.top/blog-img/20240115-2f50787d20441ebb0c8059fa1952492e.png" alt="image-20240109193609504"></p><p>3、提交之后会自动扫描域名的解析,</p><p>4、在域名注册机构（我的是阿里云）处添加DNS解析</p><p><img src="https://img.promefire.top/blog-img/20240116-5d6393328a89c2ab8f95bc961af73ac0.png" alt="image-20240109194118591"></p><p>在域名控制台选择 DNS修改—&gt;修改DNS服务器，将上图<strong>已分配的Cloudflare名称服务器</strong> 的两行输入。需要等待一段时间才会更改</p><p><img src="https://img.promefire.top/blog-img/20240116-a1205f96b6a8fe94e81b9fd833be45a1.png" alt="image-20240109194308296"></p><p>浏览器输入<code>chrome://net-internals/?#dns</code> 清空DNS缓存，再次访问<code>blog.promefire.top</code> 。F12查看<code>Sever</code> 是 <code>cloudflare</code> 了</p><p><img src="https://img.promefire.top/blog-img/20240115-d36689dff2d5c7bb12df2440ef494507.png" alt="image-20240109195046681"></p><h3 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h3><div class="admonition note"><p class="admonition-title">什么是CDN？</p><p>CDN（Content Delivery Network, 内容分发网络）是为加快网络访问速度而建立在现有网络之上的分布式网络，它依靠部署在全球各地边缘节点的服务器群，通过负载均衡，内容发布，内容管理和内容存储的功能，由CDN服务器集群分担源站点服务器集群的压力，使用户可以就近获取已缓存的访问资源，避免网络拥堵，加快访问速度。与此同时，CDN是基于DNS解析进行管理的，其利用DNS技术和HTTPS协议确保了传输内容的安全性，保障用户的访问内容的安全性。</p></div><p>​CDN的基本原理是依靠部署在各个区域大量缓存服务器的响应。当用户访问网站时，不需要访问站点的DNS服务器，而是利用全局负载技术将用户的请求直接指向最近的缓存服务器上，且保证服务器是正常工作的，访问的路径和内容是传输安全的，由此缓存服务器直接响应客户的请求。访问缓存服务器可以尽可能地避免网络拥堵状况，使传输的内容更加迅速和稳定。</p><p>​</p><h3 id="问题1-重定向次数太多无法访问"><a class="markdownIt-Anchor" href="#问题1-重定向次数太多无法访问"></a> 问题1、重定向次数太多无法访问</h3><p>解决：将Cloudflare中的<strong>SSL/TLS加密模式</strong>  修改为<strong>完全(严格)</strong></p><p>原因：当网站开启了 CloudFlare 服务，用户访问我们的网站时，其实访问的离用户比较近的 Cloudflare 服务器，Cloudflare 再代理用户请求我们的源服务器，以达到加速和保护源服务器的目的。Cloudflare 代理用户请求我们源服务器获取网页资源的过程叫回源。</p><p>Cloudflare 造成循环重定向的错误就出在了回源的过程中，造成这种错误的原因就是 http 和 https 之间的重定向。</p><h3 id="问题2-部署一次后custom-domain-失效"><a class="markdownIt-Anchor" href="#问题2-部署一次后custom-domain-失效"></a> 问题2、部署一次后<code>custom domain</code> 失效</h3><p>在<code>source</code> 目录下新建文件<code>CNAME</code> ，写入解析的域名<code>blog.promfire.top</code></p><h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考：</h3><p>网站性能分析工具：<a href="https://pagespeed.web.dev/">PageSpeed Insights</a></p><p><a href="https://monkeywie.cn/2020/08/20/fast-github-page-with-cloudflare/">fast-github-page-with-cloudflare</a></p><p><a href="https://sumygg.com/2023/11/13/use-cloudflare-speed-up-github-pages/index.html">use-cloudflare-speed-up-github-pages</a></p><p><a href="https://www.cloudflare.com/zh-cn/learning/cdn/cdn-benefits/">CDN的好处</a></p><h2 id="使用cloudflare-r2做博客图床"><a class="markdownIt-Anchor" href="#使用cloudflare-r2做博客图床"></a> 使用cloudflare R2做博客图床</h2><p>之前地Github 图床因为墙内访问不友好，弃之。</p><p>为什么选择R2图床? <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">免费！且墙内可访问</span></span></p><p>跟着<a href="https://blog.huacai.one/post/3">参考教程</a> 走没什么问题。</p><h2 id="图片懒加载"><a class="markdownIt-Anchor" href="#图片懒加载"></a> 图片懒加载</h2><p>butterfly自带图片懒加载 。 比<code>hexo-lazy-image</code> 好用多了  😭  感谢 <a href="https://blog.gz-metal-cell.top/">Metal-Cell</a></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Lazyload (圖片懶加載)# https:&#x2F;&#x2F;github.com&#x2F;verlok&#x2F;vanilla-lazyloadlazyload:  enable: true  field: site # site&#x2F;post  placeholder:  blur: false  #使用模糊效果作为占位符</code></pre><h2 id="图片压缩"><a class="markdownIt-Anchor" href="#图片压缩"></a> 图片压缩</h2><p>调整分辨率并转格式</p><ul><li>将图像调整为原图的70%，直到图像分辨率小于 <code>1280 × 1280</code>。</li><li>使用<code>webp</code>格式保存图像</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding: utf-8 -import cv2from PIL import Imageimport sysimport osimport numpy as npdef GetArgs():    args &#x3D; sys.argv    if(len(args) &gt; 1):        arg1 &#x3D; args[1]  # 文件加路径    return arg1.replace(&#39;\\&#39;,&#39;\\\\&#39;)def list_files_in_folder(folder_path):    # 获取文件夹中的所有文件和子文件夹    files_and_folders &#x3D; os.listdir(folder_path)    # 遍历文件和子文件夹    for item in files_and_folders:        # 获取完整路径        img_path &#x3D; os.path.join(folder_path, item)        CompressImg(img_path, img_path, 70)    print(f&quot;Image resized and saved&quot;)def CompressImg(inImg, outImg, scale_percent):    min_width &#x3D; 1280    min_height &#x3D; 1280    # img &#x3D; cv2.imread(inImg)    img &#x3D; cv2.imdecode(np.fromfile(inImg,dtype&#x3D;np.uint8),-1)    if img is None:        print(f&quot;无法读取图像: &#123;inImg&#125;&quot;)        return    # 检查图像大小是否为空    if img.size &#x3D;&#x3D; 0:        print(f&quot;图像大小为空: &#123;inImg&#125;&quot;)        return    # 等比例缩小图像直到图像宽&#x2F;高小于设定的值    while img.shape[1] &gt; min_width and img.shape[0] &gt; min_height:        # 计算调整后的大小 等比例缩小        new_width &#x3D; int(img.shape[1] * scale_percent &#x2F; 100)        new_height &#x3D; int(img.shape[0] * scale_percent &#x2F; 100)        # 调整图像大小        resized_img &#x3D; cv2.resize(img, (new_width, new_height))        pil_img &#x3D; Image.fromarray(cv2.cvtColor(resized_img, cv2.COLOR_BGR2RGB))        pil_img.save(outImg, &#39;webp&#39;)        print(outImg)        img &#x3D; resized_imgif __name__ &#x3D;&#x3D; &quot;__main__&quot;:    dir_path &#x3D; GetArgs()    print(&quot;dir_path &#x3D; &quot; + str(dir_path))    list_files_in_folder(dir_path)</code></pre><ul><li>终端运行<code> python CompressImg.py xxx</code> ,<code>xxx</code>为文件夹路径，用<code>“\\”</code>隔开</li><li>最后格式还是jpg是因为中途失误使用<code>  pil_img.save(outImg, 'webp')</code>  转换为<code>webp</code>格式但后缀没改，发现好像没什么影响，图片还是压缩了,就不改了</li><li><code>cv2.imread</code> 无法读取中文路径问题：将<code> img = cv2.imread(inImg)</code> 修改为<code>img = cv2.imdecode(np.fromfile(inImg,dtype=np.uint8),-1)</code></li></ul><p>效果很显著！</p><blockquote><p>在线<a href="https://www.adobe.com/cn/express/feature/video/convert/video-to-gif">视频转Gif</a></p></blockquote><p><img src="https://img.promefire.top/blog-img/20240116-39b24fa18e875075e70a01120dd915ec.gif" alt="compressImg"></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> cloudflare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker相关</title>
      <link href="//post/Docker.html"/>
      <url>//post/Docker.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img.promefire.top/blog-img/20240116-b4bbb869224799d59326ffa6f48b3949.png" alt="img"></p><h2 id="centos下安装"><a class="markdownIt-Anchor" href="#centos下安装"></a> CentOS下安装</h2><p>1、下载docker-ce的yum源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</code></pre><p>2、安装Docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo yum -y install docker-ce</code></pre><p>3、检查是否安装成功</p><pre class="line-numbers language-none"><code class="language-none">sudo docker -v</code></pre><p><img src="https://img.promefire.top/blog-img/20240116-262d8f65031ff1f77a30c1d11147f7ed.png" alt="image-20240105185232095"></p><hr><p>4、启动Docker服务，并设置开机自启</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo systemctl start dockersudo systemctl enable docker</code></pre><p>5、检查是否启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo systemctl status docker</code></pre><p><img src="https://img.promefire.top/blog-img/20240116-5d742c3d284c9587400c349badca43f8.png" alt="image-20240105185408621"></p><h2 id="docker是什么"><a class="markdownIt-Anchor" href="#docker是什么"></a> Docker是什么</h2><blockquote><p><strong>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口</strong></p><p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p></blockquote><p>简而言之就是 代码 + 环境 。可以方便地运行、迁移。</p><h2 id="image文件"><a class="markdownIt-Anchor" href="#image文件"></a> image文件</h2><p>**Docker 把应用程序及其依赖，打包在 image 文件里面。**只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p><h2 id="容器文件"><a class="markdownIt-Anchor" href="#容器文件"></a> 容器文件</h2><p>**image 文件生成的容器实例，本身也是一个文件，称为容器文件。**也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。</p><h2 id="实例"><a class="markdownIt-Anchor" href="#实例"></a> 实例</h2><p>从<a href="https://hub.docker.com/u/library">镜像仓库</a>拉取镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker image pull library&#x2F;hello-world</code></pre><p><code>docker image pull</code>是抓取 image 文件的命令。<code>library/hello-world</code>是 image 文件在仓库里面的位置，其中<code>library</code>是 image 文件所在的组，<code>hello-world</code>是 image 文件的名字。</p><p>查看image文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker image ls</code></pre><p>运行image文件</p><pre class="line-numbers language-none"><code class="language-none">docker container run hello-world</code></pre><p><code>docker container run</code>命令会从 image 文件，生成一个正在运行的容器实例。</p><p>注意，<code>docker container run</code>命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的<code>docker image pull</code>命令并不是必需的步骤。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考：</h2><p><a href="https://ruanyifeng.com/blog/2018/02/docker-tutorial.html">Docker 入门教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium多线程简单应用</title>
      <link href="//post/selenium%E5%88%B7%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE%E9%87%8F.html"/>
      <url>//post/selenium%E5%88%B7%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE%E9%87%8F.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>​<a href="https://gz-metal-cell.github.io/">关哥</a>博客新增了浏览量，个位数的浏览量怎么配得上关哥身份，给Metal-Cell刷点浏览量。</p><h2 id="初始代码"><a class="markdownIt-Anchor" href="#初始代码"></a> 初始代码</h2><p>发现只要刷新就会计入访问量，所以只需调用<code>selenium</code> 刷新网页的功能就行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from selenium import webdriverimport threading#浏览器请求头headers &#x3D; &#123;    &quot;Cookie&quot; : &quot;XXXXXX&quot;,    &quot;user-agent&quot;: &quot;xxxxx&quot;    &#125;# 浏览器相关设置chrome_path &#x3D; r&#39;path\to\chromedriver.exe&#39;chrome_options &#x3D; webdriver.ChromeOptions()#忽略ssl验证chrome_options.add_argument(&#39;--ignore-certificate-errors&#39;)# 无窗口运行# chrome_options.add_argument(&quot;--headless&quot;)driver &#x3D; webdriver.Chrome(executable_path&#x3D;chrome_path, options&#x3D;chrome_options)# 博客链接url &#x3D; &quot;xxxxxx&quot;driver.get(url)#刷新网页driver.refresh()</code></pre><h3 id="设置代理"><a class="markdownIt-Anchor" href="#设置代理"></a> 设置代理</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 创建 webdriver 并设置代理IPproxy &#x3D; &#39;127.0.0.1:10808&#39;chrome_options.add_argument(&#39;--proxy-server&#x3D;http:&#x2F;&#x2F;&#39; + proxy)driver &#x3D; webdriver.Chrome(executable_path&#x3D;chrome_path, options&#x3D;chrome_options)</code></pre><h3 id="加入多线程"><a class="markdownIt-Anchor" href="#加入多线程"></a> 加入多线程</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">import threadingdef start_brower():    headers &#x3D; &#123;        &quot;Cookie&quot; : &quot;xxx&quot;,        &quot;user-agent&quot; : &quot;xxx&quot;    &#125;    chrome_path &#x3D; r&#39;path\to\chromedriver.exe&#39;    chrome_options &#x3D; webdriver.ChromeOptions()    chrome_options.add_argument(&#39;--ignore-certificate-errors&#39;)    driver &#x3D; webdriver.Chrome(executable_path&#x3D;chrome_path, options&#x3D;chrome_options)    return driverdef brower_thread(driver: webdriver.Chrome, idx: int:):    url_list &#x3D; [&#39;https:&#x2F;&#x2F;www.baidu.com&#39;,&#39;https:&#x2F;&#x2F;music.163.com&#x2F;&#39;, &#39;https:&#x2F;&#x2F;y.qq.com&#x2F;&#39;]    try:        #lock.acquire()                #driver.execute_script(f&quot;window.open(&#39;&#123;url_list[idx]&#125;&#39;)&quot;) # 打开浏览器标签页        driver.get(url_list[idx])        return True    except Exception:        return False    #finally:    #   lock.release()    def main():     # 多线程与多浏览器    #driver &#x3D; start_browser()    for idx in range(5):        driver &#x3D; start_browser()        threading.Thread(target&#x3D;browser_thread, args&#x3D;(driver, idx)).start()    # 等待所有线程执行完毕    for thread in threading.enumerate():        if thread is not threading.current_thread():            thread.join()    </code></pre><ul><li><p>如果是 <strong>多线程</strong> 和 <strong>多浏览器</strong> ,则不需要线程锁，每一个线程都有一个webdriver</p></li><li><p>如果是 <strong>多线程</strong> 和 <strong>多标签页</strong> ，共用一个浏览器，会出现资源争夺的情况，需要在线程的首位加上<code>lock.acquire()</code> 和 <code>lock.release()</code>  ，确保线程安全</p></li></ul><h3 id="线程池"><a class="markdownIt-Anchor" href="#线程池"></a> 线程池</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">from concurrent.futures import ThreadPoolExecutor, as_completedmax_workers&#x3D;MAX_WORKERS &#x3D; 5def main():    #创建线程池    executor &#x3D; ThreadPoolExecutor(max_workers&#x3D;MAX_WORKERS)    ths &#x3D; list()    driver &#x3D; start_browser()    for idx in range(5):        # driver &#x3D; start_browser()        #启动        th &#x3D; executor.submit(browser_thread, driver, idx&#x3D;idx)        ths.append(th)    # 获取线程执行结果    for future in as_completed(ths):        print(future.result())</code></pre><h3 id="区别"><a class="markdownIt-Anchor" href="#区别"></a> 区别</h3><ol><li><strong>创建和维护线程的方式</strong>:<ul><li><strong>多线程</strong>：在需要并发执行任务时，直接创建并启动多个线程。你手动管理线程的创建、启动、终止和资源释放。</li><li><strong>线程池</strong>：创建一个线程池，它会在程序启动时预先创建一组线程，并在需要时重用这些线程。线程池负责管理线程的生命周期，包括创建、启动、终止和回收。</li></ul></li><li><strong>资源管理</strong>:<ul><li><strong>多线程</strong>：需要手动管理线程的数量和资源，可能会导致系统资源的浪费或线程过多的问题。</li><li><strong>线程池</strong>：通过线程池管理，可以更有效地控制线程的数量，避免资源过度占用。</li></ul></li><li><strong>任务调度</strong>:<ul><li><strong>多线程</strong>：需要手动分配任务给不同的线程，可能需要考虑同步和互斥机制来避免竞争条件。</li><li><strong>线程池</strong>：线程池会自动分配任务给可用线程，并处理任务队列，简化了任务调度的工作。</li></ul></li><li><strong>性能和效率</strong>:<ul><li><strong>多线程</strong>：如果线程的创建和销毁频繁，可能会导致性能开销增加。</li><li><strong>线程池</strong>：通过线程的重用，可以减少线程的创建和销毁开销，提高性能和效率。</li></ul></li></ol><h2 id="更新"><a class="markdownIt-Anchor" href="#更新"></a> 更新：</h2><p>在4.10.0的<code>selenium</code> 中，设置浏览器需要这样<a href="https://stackoverflow.com/questions/76550506/typeerror-webdriver-init-got-an-unexpected-keyword-argument-executable-p">写</a>:</p><p>删除了<code>exectable_path</code> 改用<code>service</code> 传参</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from selenium import webdriverfrom selenium.webdriver.chrome.service import Serviceservice &#x3D; Service(executable_path&#x3D;&#39;.&#x2F;chromedriver.exe&#39;)options &#x3D; webdriver.ChromeOptions()driver &#x3D; webdriver.Chrome(service&#x3D;service, options&#x3D;options)# ...driver.quit()</code></pre><p>参考：<a href="https://blog.suysker.xyz/archives/365">设置ip池</a></p><p>​<a href="https://juejin.cn/post/7122095457752481828">selenium操纵浏览器</a></p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年度总结</title>
      <link href="//post/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93.html"/>
      <url>//post/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="54d24ebd7770f85b38c866a40abfcadc25f2f5a26dc88fb13ec997aa679224f4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 年度总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高效添加导航站点</title>
      <link href="//post/%E9%AB%98%E6%95%88%E6%B7%BB%E5%8A%A0%E5%AF%BC%E8%88%AA%E7%AB%99%E7%82%B9.html"/>
      <url>//post/%E9%AB%98%E6%95%88%E6%B7%BB%E5%8A%A0%E5%AF%BC%E8%88%AA%E7%AB%99%E7%82%B9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​hexo + buttterfly中自带一个友联页，我用它来记录一些神奇的小网站。因为是静态的，无后台，想要添加一个网址链接，就要在<code>links.yml</code>文件中修改如下四项。先复制粘贴前面的格式，然后获取网址图标保存在<code>source/img</code>文件夹下，再写入该文件中。添加友联一次性并不会添加太多。而导航链接长久不更新积攒了好多，一个一个写太麻烦了。于是写一个程序，输入网址链接与对该网站的简介，自动在博客目录下生成添加后的<code>link.yml</code>文件，覆盖原先的</p><p><img src="https://img.promefire.top/blog-img/20240110-9beb179660298374bce8b5e1a86eb779.png" alt></p><h2 id="读取txt"><a class="markdownIt-Anchor" href="#读取txt"></a> 读取TXT</h2><p>将要添加的站点信息写入txt文件，每一行分别为网址链接，简介， 要加入的分组，用空格隔开。例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">http:&#x2F;&#x2F;www.baidu.com 百度一下，你就知道 友情链接http:&#x2F;&#x2F;www.google.com 谷歌啥都能搜 神秘学</code></pre><p>读入信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list_website &#x3D; []list_descri &#x3D; []list_class &#x3D; [] #放在那个分组下def getTxT(txt_path):  with open(txt_path, &quot;rb&quot;) as w:    lines &#x3D; w.readlines()  for line in lines:    # parts &#x3D; line.strip().split(&#39; &#39;)    line_str &#x3D; line.decode(&#39;utf-8&#39;).strip()    parts &#x3D; line_str.split(&#39; &#39;)    list_website.append(parts[0])    list_descri.append(parts[1])    list_class.append(parts[2])</code></pre><h2 id="获取网址信息"><a class="markdownIt-Anchor" href="#获取网址信息"></a> 获取网址信息</h2><h3 id="获取网站图标"><a class="markdownIt-Anchor" href="#获取网站图标"></a> 获取网站图标</h3><p>使用的是现成的api，在后面加上网址即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">https:&#x2F;&#x2F;api.xinac.net&#x2F;icon&#x2F;?url&#x3D;https:&#x2F;&#x2F;api.qqsuu.cn&#x2F;api&#x2F;get?url&#x3D;https:&#x2F;&#x2F;f.ydr.me&#x2F;https:&#x2F;&#x2F;api.byi.pw&#x2F;favicon&#x2F;?url&#x3D;https:&#x2F;&#x2F;favicon.link&#x2F;https:&#x2F;&#x2F;favicon.yandex.net&#x2F;favicon&#x2F;http:&#x2F;&#x2F;favicon.cccyun.cc&#x2F;https:&#x2F;&#x2F;statics.dnspod.cn&#x2F;proxy_favicon&#x2F;_&#x2F;favicon?domain&#x3D;</code></pre><p>将获取到的网站图标保存到<code>source/img</code>文件夹下，用来给<code>links.yml</code>调用。保存图片函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">urllib.request.urlretrieve(getImg,localfileName)</code></pre><p>getImg: 图标链接</p><p>localfileName:保存到本地的链接名称</p><h3 id="获取网站标题"><a class="markdownIt-Anchor" href="#获取网站标题"></a> 获取网站标题</h3><p>使用requests与BeautifulSoup</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">res &#x3D; requests.get(url)res.enconding &#x3D; &#39;utf-8&#39;soup &#x3D; BeautifulSoup(res.text,&#39;lxml&#39;)title &#x3D; soup.title.text</code></pre><p>完整代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add_new_link &#x3D; &quot;&quot;&quot;      name: &#123;name&#125;      link: &#123;link&#125;      avatar: &#123;avatar&#125;      descr: &#123;descr&#125;&quot;&quot;&quot;def getUrlMessange(link, descr, saveSource):  # 返回yaml格式的新增站点  function &#x3D; &quot;https:&#x2F;&#x2F;api.xinac.net&#x2F;icon&#x2F;?url&#x3D;&quot;  getImg &#x3D; function + link  res &#x3D; requests.get(link)  res.enconding &#x3D; &#39;utf-8&#39;  soup &#x3D; BeautifulSoup(res.text,&#39;lxml&#39;)  title &#x3D; soup.title.text  urllib.request.urlretrieve(getImg, saveSource + title + &#39;.png&#39;)  avatar &#x3D; &#39;&#x2F;img&#x2F;&#39; + title + &#39;.png&#39;  lianjie &#x3D; add_new_link.format(name &#x3D; title,link &#x3D; link,avatar &#x3D; avatar, descr &#x3D; descr)  lianjie &#x3D; yaml.safe_load(lianjie)  return lianjie</code></pre><blockquote><p>yaml.safe_load（）将字符串转换为yaml格式字典</p></blockquote><h2 id="写入yaml文件"><a class="markdownIt-Anchor" href="#写入yaml文件"></a> 写入Yaml文件</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">def writeYaml(lianjie_yaml, add_class_name, ayml):  # yaml格式的新增站点， 放入组的名称， 要写入的文件  for n in range(len(ayml)):      class_name &#x3D; ayml[n][&#39;class_name&#39;]      if(class_name &#x3D;&#x3D; add_class_name):         ayml[n][&quot;link_list&quot;].append(lianjie_yaml)</code></pre><p>这个地方要注意写入信息的有重复的话，会自动生成键<code>&amp;-id001</code>，要注意去重，去重代码。加一个判断是否已经存在：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def is_link_exits(link, ayml):  for entry in ayml:        for link_list in entry.get(&#39;link_list&#39;, []):            if link_list.get(&#39;link&#39;) &#x3D;&#x3D; link:                return True  return False</code></pre><h2 id="主函数"><a class="markdownIt-Anchor" href="#主函数"></a> 主函数：</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">def main():  getTxT(website)    # r+表示读写  with open(targetFile, &#39;r+&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:      ayml &#x3D; yaml.load(f, Loader&#x3D;yaml.Loader)      for k in range(len(list_website)):          link &#x3D; list_website[k]          descr &#x3D; list_descri[k]          class_name &#x3D; list_class[k]          if is_link_exits(link, ayml):            print(link + &quot;已存在&quot;)            continue          lianjie &#x3D; getUrlMessange(link, descr, saveSource)          writeYaml(lianjie, class_name, ayml)      # 文件清空，将光表移动至开始      f.seek(0)      f.truncate()      yaml.dump(ayml, f, allow_unicode&#x3D;True, sort_keys&#x3D;False)</code></pre><h2 id="规范文件名"><a class="markdownIt-Anchor" href="#规范文件名"></a> 规范文件名</h2><p>由于图片是按照网站title命名的，难免会出现不符合文件名规范的标题，需要处理</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def normalize_filename(filename):    # 去除非法字符    filename &#x3D; re.sub(r&#39;[\\&#x2F;*?:&quot;&lt;&gt;|]&#39;, &#39;&#39;, filename)    # 将空格替换为下划线    filename &#x3D; re.sub(r&#39;\s+&#39;, &#39;_&#39;, filename)    # 将所有字母转换为小写    filename &#x3D; filename.lower()    return filename</code></pre><h2 id="附"><a class="markdownIt-Anchor" href="#附"></a> 附：</h2><p>1、写入yaml文件是，键值对默认是按照’键’ 的首字母顺序排序，使用<code> yaml.dump(ayml, f, sort_keys=False</code>按原先顺序写入</p><p>2、编码问题,都加上准没错</p><ul><li><code># coding:utf-8</code></li><li>getTXT()中<code>line_str = line.decode('utf-8').strip()</code></li><li>写入yaml时 <code>yaml.dump(ayml, f, allow_unicode=True, sort_keys=False)</code></li><li>request解析网页 <code> res.encoding = &quot;utf-8&quot;</code></li></ul><hr><h2 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h2><ul><li>使用时将py文件和存放信息的<code>website.txt</code>文件放在博客根目录下，运行即可。图标文件保存在<code>\source\img</code>下</li><li>写入分组目前只能加入已有分组，创建新的分组（TODO）</li><li>每个网站图标的爬取方式不一定一样，用别人的API更保险</li></ul><p><img src="https://img.promefire.top/blog-img/20240110-b2fccccb0c7a3e960257fd014dc966de.png" alt="img"></p><p>成功截图</p><p><img src="https://img.promefire.top/blog-img/20240110-0b75ec6b8a47b95e1527d59b93f81a7c.png" alt></p><p>全部代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#!&#x2F;usr&#x2F;bin&#x2F;python# coding:utf-8import requestsimport urllibfrom bs4 import BeautifulSoup import yamlimport oscreate_new_class &#x3D;  &quot;&quot;&quot;- class_name: &#123;class_name&#125;  class_desc:   link_list:      name: &#123;name&#125;      link: &#123;link&#125;      avatar: &#123;avatar&#125;      descr: &#123;descr&#125;&quot;&quot;&quot;add_new_link &#x3D; &quot;&quot;&quot;      name: &#123;name&#125;      link: &#123;link&#125;      avatar: &#123;avatar&#125;      descr: &#123;descr&#125;&quot;&quot;&quot;current_directory &#x3D; os.path.dirname(os.path.abspath(__file__))website &#x3D; current_directory + &#39;\website.txt&#39;targetFile &#x3D;current_directory +&#39;\source\_data\link.yml&#39;saveSource &#x3D; current_directory +  &#39;\source\img\\&#39;list_website &#x3D; []list_descri &#x3D; []list_class &#x3D; [] #放在那个分组下import redef normalize_filename(filename):    # 去除非法字符    filename &#x3D; re.sub(r&#39;[\\&#x2F;*?:&quot;&lt;&gt;|]&#39;, &#39;&#39;, filename)    # 将空格替换为下划线    filename &#x3D; re.sub(r&#39;\s+&#39;, &#39;_&#39;, filename)    # 将所有字母转换为小写    filename &#x3D; filename.lower()    return filenamedef getUrl(url, descr, saveSource):  function &#x3D; &quot;https:&#x2F;&#x2F;api.xinac.net&#x2F;icon&#x2F;?url&#x3D;&quot;  getImg &#x3D; function + url  headers &#x3D; &#123;      &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;120.0.0.0 Safari&#x2F;537.36&#39;  &#125;  res &#x3D; requests.get(url, headers&#x3D;headers, verify&#x3D;False)  res.encoding &#x3D; &quot;utf-8&quot;  # res.enconding &#x3D; res.apparent_encoding  # print(res.text)  soup &#x3D; BeautifulSoup(res.text,&#39;lxml&#39;)  title &#x3D; soup.title.text.replace(&quot; &quot;,&quot;&quot;)  title &#x3D; normalize_filename(title)  # print(title)  urllib.request.urlretrieve(getImg, saveSource + title + &#39;.png&#39;)  avatar &#x3D; &#39;&#x2F;img&#x2F;&#39; + title + &#39;.png&#39;  lianjie &#x3D; add_new_link.format(name &#x3D; title,link &#x3D; url,avatar &#x3D; avatar, descr &#x3D; descr)  lianjie &#x3D; yaml.safe_load(lianjie)  return lianjiedef getTxT(txt_path):  with open(txt_path, &quot;rb&quot;) as w:    lines &#x3D; w.readlines()  for line in lines:    # parts &#x3D; line.strip().split(&#39; &#39;)    line_str &#x3D; line.decode(&#39;utf-8&#39;).strip()    parts &#x3D; line_str.split(&#39; &#39;)    print(parts)    if len(parts) &gt;&#x3D; 3:      list_website.append(parts[0])      list_descri.append(parts[1])      list_class.append(parts[2])def is_link_exits(link, ayml):  for entry in ayml:        for link_list in entry.get(&#39;link_list&#39;, []):            if link_list.get(&#39;link&#39;) &#x3D;&#x3D; link:                return True  return Falsedef writeYaml(lianjie_yaml, add_class_name, ayml):  # yaml格式的新增站点， 放入组的名称， 要写入的文件  for n in range(len(ayml)):      class_name &#x3D; ayml[n][&#39;class_name&#39;]      if(class_name &#x3D;&#x3D; add_class_name):         ayml[n][&quot;link_list&quot;].append(lianjie_yaml)# def getClassNames():#   class_names &#x3D; []#   with open(targetFile, &#39;r+&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:#       ayml &#x3D; yaml.load(f, Loader&#x3D;yaml.Loader)#       for n in range(len(ayml)):#         class_name &#x3D; ayml[n][&#39;class_name&#39;]#         class_names.append(class_name)#   return class_namesdef main():  getTxT(website)  if not os.path.exists(saveSource):    os.makedirs(saveSource)  # classNames &#x3D; getClassNames()  with open(targetFile, &#39;r+&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:      ayml &#x3D; yaml.load(f, Loader&#x3D;yaml.Loader)      print(ayml)      for k in range(len(list_website)):          link &#x3D; list_website[k]          descr &#x3D; list_descri[k]          class_name &#x3D; list_class[k]          if is_link_exits(link, ayml):            print(link + &quot;已存在&quot;)            continue          # lianjie &#x3D; getUrlMessange(link, descr, saveSource)          lianjie &#x3D; getUrl(link, descr, saveSource)          writeYaml(lianjie, class_name, ayml)          print(link + &quot;添加成功&quot;)      f.seek(0)      f.truncate()      yaml.dump(ayml, f, allow_unicode&#x3D;True, sort_keys&#x3D;False,  default_style&#x3D;&#39;&#39;)main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo + Github Action自动部署</title>
      <link href="//post/Hexo%20+%20Github%20Action%20auto%20deploy.html"/>
      <url>//post/Hexo%20+%20Github%20Action%20auto%20deploy.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>​为什么要用github action实现全自动部署呢，每次<code>hexo d</code>在本机编译太麻烦了。而使用Github Action，我们只需要完成博客得遍写和修改后，将改动推送到远程仓库，之后得工作交给CI完成即可。</p><blockquote><p>Github Action是一种CI\CD服务</p><p>CI\CD 其实说的是三件事情：「持续集成（Continuous Integration）」、「持续交付（Continuous Delivery）」、「持续部署（Continuous Deployment）」。</p><p>因为「持续交付」和「持续部署」的英文缩写是一样的，所以这三件事情缩写成了 CI\CD 。</p></blockquote><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><p>参考教程：<a href="https://akilar.top/posts/f752c86d/">使用Github Action实现全自动部署</a> 已经很详细了，跟着操作就能成功。有两点需要注意</p><ul><li>2020年10月后github新建仓库默认分支改为main。在<code>autodeploy.yml</code> 最后一行要写成master:main表示从本地的master分支推送到远程的main</li></ul><ul><li>主题 themes/butterfly 文件夹下有<code>.git</code> 文件夹存在，推送至github会识别成子文件夹，导致生成静态文件时缺少主题文件，博客白屏。先将<code>.git</code> 文件删除后再上传</li></ul><h3 id="查看部署情况"><a class="markdownIt-Anchor" href="#查看部署情况"></a> 查看部署情况</h3><p>1、打开GIthub存放源码的私有仓库，找到action。</p><p>2、根据刚刚的Commit记录找到相应的任务</p><p>3、点击Deploy查看部署情况</p><p><img src="https://raw.githubusercontent.com/promefire/Myblog/main/image-20231224123219614.png" alt="Action"></p><p>在博客根目录下添加一个<code>back.sh</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git add .git commit -m &quot;$1&quot; git push origin master</code></pre><p>写完博客后运行<code>sh back.sh xxxx</code> 交给Github Action部署。“xxxx” 记录一下commit内容,方便出问题回滚代码版本</p><p>参考：<a href="https://akilar.top/posts/f752c86d/">使用Github Action实现全自动部署</a></p><p>​<a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule">Github Action 文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客全局黑白特效</title>
      <link href="//post/%E5%8D%9A%E5%AE%A2%E5%85%A8%E5%B1%80%E9%BB%91%E7%99%BD%E7%89%B9%E6%95%88.html"/>
      <url>//post/%E5%8D%9A%E5%AE%A2%E5%85%A8%E5%B1%80%E9%BB%91%E7%99%BD%E7%89%B9%E6%95%88.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>没错！我又在实验室摸鱼了，无心科研，想来想去干点什么好呢？突然想到早上吃饭时候凡哥和我说今天是国家公祭日，想着给博客整个黑白特效，整起！</p><h2 id="全局黑白效果"><a class="markdownIt-Anchor" href="#全局黑白效果"></a> 全局黑白效果</h2><h3 id="hexo-butterfly-全局黑白代码"><a class="markdownIt-Anchor" href="#hexo-butterfly-全局黑白代码"></a> hexo + butterfly 全局黑白代码</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">html  body    &#x2F;&#x2F; 黑白色    style.      html&#123;      filter: grayscale( 100%);      -webkit-filter: grayscale( 100%);      -moz-filter: grayscale( 100%);      -ms-filter: grayscale( 100%);      -o-filter: grayscale( 100%);      filter: url( &quot;data:image&#x2F;svg+xml;utf8,&lt;svg xmlns&#x3D;\&#39;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg\&#39;&gt;&lt;filter id&#x3D;\&#39;grayscale\&#39;&gt;&lt;feColorMatrix type&#x3D;\&#39;matrix\&#39; values&#x3D;\&#39;0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\&#39;&#x2F;&gt;&lt;&#x2F;filter&gt;&lt;&#x2F;svg&gt;#grayscale&quot;);      filter:progid:DXImageTransform.Microsoft.BasicImage(grayscale&#x3D;1);      -webkit-filter: grayscale( 1);      &#125;</code></pre><p>然后把这一串代码存到一个名为<code>blackandwhite.pug</code>的文件，将它放在主题目录下的<code>layout/includes/addons</code>里面，然后就要在<code>layout.pug</code> 里面引入文件。在原文件的<code>include ./head.pug</code>下面加入一行来引入我们的文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">if theme.blackandwhite  include .&#x2F;addons&#x2F;blackandwhite.pug</code></pre><p>在主题配置文件中加一行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">blackandwhite: true</code></pre><p>效果图：</p><p><img src="https://img.promefire.top/blog-img/20240110-71598728eff277b5a5967772d8ac6534.png" alt></p><p>实现了这一步后可以手动开关全局黑白特效，但能不能在清明和国家公祭日自动开启全局黑呢？理论上是可行的，在主题配置文件中设置日期，在上面<code>if theme.blackandwhite</code>加入读取当前日期与设定日期判断的逻辑，就可以实现特定日期自动全局黑白。理论可行，实践开始！</p><p>对于前端来说，可谓是一窍不通，第一步得知道<code>layout.pug</code>代码是什么语言/(ㄒoㄒ)/~~,直接问ChatGPT。</p><p><img src="https://img.promefire.top/blog-img/20240110-29001b6512f0657b6cbf081d2d3b24cd.png" alt></p><p>先用js实现一下日期判等</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">var d &#x3D; new Date()var current &#x3D; d.toLocaleDateString()var date1 &#x3D; &quot;12-13&quot;var date2 &#x3D; &quot;04-04&quot;var currentDate &#x3D; current.slice(5)var result &#x3D; date1.replace(&#x2F;\-&#x2F;g,&#39;&#x2F;&#39;) &#x3D;&#x3D;&#x3D;currentDate;console.log(currentDate);console.log(date1.replace(&#x2F;\-&#x2F;g,&#39;&#x2F;&#39;));console.log(result);</code></pre><p><img src="https://img.promefire.top/blog-img/20240110-f4470ae6a8f3aac0b6d4492863235209.png" alt></p><h3 id="pug文件中加入js"><a class="markdownIt-Anchor" href="#pug文件中加入js"></a> pug文件中加入JS</h3><p>在pug文件中，js代码前面要加一个 “ - ”</p><p><img src="https://img.promefire.top/blog-img/20240110-312ff1c3003d4533c6f707b0c346d85a.png" alt></p><ul><li>踩了一个小坑</li></ul><p>hexo的pug文件里日期的输出是反过来的，所以上面截取后5个字符串的代码输出为“/2023”报错,改成截取字符串前五个</p><p>在<code>layout.pug</code>文件中<code>include ./head.pug</code>后加入一下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">- var currentDate &#x3D; new Date().toLocaleDateString().slice(0,5)- var date1 &#x3D; &quot;12&#x2F;13&quot; &#x3D;&#x3D;&#x3D; currentDate- var date2 &#x3D; &quot;04&#x2F;04&quot; &#x3D;&#x3D;&#x3D; currentDate   if theme.blackandwhite  if date1 || date2    include .&#x2F;addons&#x2F;blackandwhite.pug</code></pre><p>会自动判断当前日期是否为“12/13”、“04/04”，自动开启全局黑白特效。</p><h2 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h2><ul><li><p>本来打算日期是写在主题配置文件里的，但是传参时候出了问题，干脆直接把日期写在代码里了。有空再解决这个问题</p></li><li><p>日期判等的时候有个疑问，hexo是静态的，是否能知道当前日期是几号。最后发现是想多了，因为博客就有一个“最后更新日期”，能获得当前日期时间</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo恢复及使用hexon实现在线编辑同步</title>
      <link href="//post/hexo%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%90%8C%E6%AD%A5.html"/>
      <url>//post/hexo%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%90%8C%E6%AD%A5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>hexo是一个轻量级的博客主题框架，挂载GitHub上不用太操心，但是有一点不方便的是hexo没有后台，每次发博都要本地写好然后hexo三件套，最近发现了一个<a href="https://github.com/gethexon/hexon">hexon</a>的GUI，可以实现hexo的在线编辑部署。ps-需要一台服务器</p><h2 id="博客恢复"><a class="markdownIt-Anchor" href="#博客恢复"></a> 博客恢复</h2><h3 id="安装npm-hexo-pnpm-git"><a class="markdownIt-Anchor" href="#安装npm-hexo-pnpm-git"></a> 安装npm、hexo、pnpm、git</h3><ul><li>npm</li></ul><p>在<a href="https://registry.npmmirror.com/binary.html?path=node/latest-v10.x/">这里</a> 下载npm，可以离线下载，也可以使用wget下载<br>解压<code>tar -zxvf node-v10.24.1-linux-x64.tar.gz</code><br>将npm写入环境变量文件<br>①<code>vi /etc/profile</code><br>②在末尾添加 <code>export PATH=&quot;/root/node-v17.3.0-linux-x64/bin&quot;</code><br>③<code>source /etc/profile</code> 激活</p><ul><li>hexo</li></ul><p>使用npm安装<code>npm install -g hexo-cli</code></p><ul><li>pnpm</li></ul><p><code>npm install pnpm -g</code> 注意要加-g表示全局</p><ul><li>git</li></ul><p>centos 下<code>yum install git  </code></p><h3 id="github添加密钥"><a class="markdownIt-Anchor" href="#github添加密钥"></a> github添加密钥</h3><pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;xxxxxxx&quot;git config --global user.email &quot;xxxxxx@qq.com&quot;ssh-keygen -t rsa -C &quot;xxxxxxx@qq.com&quot;</code></pre><p>完成后会在提示的路径下生成两个文件<code>id_rsa</code>和<code>id_rsa.pub</code>前者是私钥，后者公钥，<br>查看公钥内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cat &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub</code></pre><p>复制内容，在github中点击右上角头像，依次打开&quot;Setting&quot;–“SSH and GPG keys”–“New SSH Key” 粘贴</p><h3 id="拷贝源码"><a class="markdownIt-Anchor" href="#拷贝源码"></a> 拷贝源码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git clone https:&#x2F;&#x2F;github.com&#x2F;XXXXX&#x2F;hexo_source.gitnpm install #还原项目依赖</code></pre><h3 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h3><p>确保基本的操作可以成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo generatehexo deploy</code></pre><h2 id="部署hexon"><a class="markdownIt-Anchor" href="#部署hexon"></a> 部署hexon</h2><h3 id="拉取hexon项目并还原依赖-初始化博客配置"><a class="markdownIt-Anchor" href="#拉取hexon项目并还原依赖-初始化博客配置"></a> 拉取hexon项目并还原依赖, 初始化博客配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git clone https:&#x2F;&#x2F;github.com&#x2F;gethexon&#x2F;hexon pnpm install pnpm run setup</code></pre><h3 id="启动hexon"><a class="markdownIt-Anchor" href="#启动hexon"></a> 启动hexon</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pnpm start</code></pre><p><strong>注意</strong>：第一次启动时需要指定启动端口，这里需要注意事先在阿里云安全组/腾讯云防火墙打开端口</p><h3 id="本地访问云服务器上打开的-localhost4000"><a class="markdownIt-Anchor" href="#本地访问云服务器上打开的-localhost4000"></a> 本地访问云服务器上打开的  <code>localhost:4000</code></h3><p>众所周知，除非用的云服务器是带界面的，否则ctrl + 点击 打开的是本地的4000端口。这里我们用用本地电脑连接上服务器，从而把本地的localhost作为服务器的localhost来使用<br>，在本地输入命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh -L 4000:127.0.0.1:4000 username@xx.xx.xx.xx</code></pre><p>其中4000是hexon端口，username指登录云服务器用户名，xx.xx.xx.xx指公网ip<br>完成后，即可在本地浏览器输入<code>localhost:4000</code>访问服务器的4000端口，如图所示：<br><img src="https://img.promefire.top/blog-img/20240110-2e990d6e7860c95f607084cd84862c82.png" alt><br>ps:使用相对路径的图片在这里打不开，不过也没有关系，先用github图床，有空用服务器作图床，github做备份</p><h2 id="systemd守护进程"><a class="markdownIt-Anchor" href="#systemd守护进程"></a> Systemd守护进程</h2><blockquote><p>上面完成后服务器端的hexon服务需要手动启动，且shell断开后结束，使用systemd加入守护进程</p></blockquote><h3 id="新增服务"><a class="markdownIt-Anchor" href="#新增服务"></a> 新增服务</h3><p>在<code>/etc/systemd/system/</code>下创建一个文件命名为<code>hexon.service</code>表示新增一个名为hexon的进程<br><code>hexon.service</code>内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[Unit]Description&#x3D;Hexon ServiceAfter&#x3D;network.target[Service]Environment&#x3D;PATH&#x3D;&#x2F;root&#x2F;node-v17.3.0-linux-x64&#x2F;bin&#x2F;pnpm:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;binWorkingDirectory&#x3D;&#x2F;root&#x2F;hexon-master&#x2F;serverType&#x3D;simpleUser&#x3D;rootGroup&#x3D;rootRestart&#x3D;on-failureRestartSec&#x3D;5sExecStart&#x3D;&#x2F;root&#x2F;node-v17.3.0-linux-x64&#x2F;bin&#x2F;pnpm cross-env NODE_ENV&#x3D;production node &#x2F;root&#x2F;hexon-master&#x2F;server&#x2F;dist&#x2F;index.jsLimitNOFILE&#x3D;1048576[Install]WantedBy&#x3D;multi-user.target</code></pre><ul><li><code>Environment=PATH=</code>代表环境变量</li><li><code>WorkingDirectory</code>代表工作目录</li><li><code>ExecStart=</code>指定服务启动时执行的命令</li></ul><p>我们可以找一下上面使用<code>pnpm start</code>启动hexon的入口文件写在这里。查看<code>package.json</code>文件中<code>start</code>一行，如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;  &quot;private&quot;: true,  &quot;scripts&quot;: &#123;    &quot;setup&quot;: &quot;node .&#x2F;bin&#x2F;index.js install&quot;,    &quot;resetpwd&quot;: &quot;node .&#x2F;bin&#x2F;index.js resetpwd&quot;,    &quot;script&quot;: &quot;node .&#x2F;bin&#x2F;index.js script&quot;,    &quot;start&quot;: &quot;cross-env DEBUG&#x3D;null NODE_ENV&#x3D;production &amp;&amp; node dist&#x2F;index.js&quot;,    &quot;prd&quot;: &quot;pm2 start dist&#x2F;index.js --name hexon -o log&#x2F;pm2-log.log -e log&#x2F;pm2-err.log&quot;,    &quot;dev&quot;: &quot;pnpm run build &amp;&amp; nodemon .&#x2F;dist&#x2F;index.js&quot;,    &quot;build&quot;: &quot;rimraf dist &amp;&amp; node .&#x2F;scripts&#x2F;build.mjs&quot;,    &quot;test&quot;: &quot;jest&quot;  &#125;,  .......</code></pre><h3 id="启动服务"><a class="markdownIt-Anchor" href="#启动服务"></a> 启动服务</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json">systemctl enable hexon     # 添加自启systemctl start hexon      # 启动服务</code></pre><p>如果修改配置文件重新启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reloadsystemctl restart hexon</code></pre><p>查看服务状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status hexon</code></pre><p>查看服务日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo journalctl -u hexon -f</code></pre><hr><p>原本想着每次都要输入端口用户名ip太麻烦了，想改成直接公网ip访问，监听代码如下，但没有成功，再一想，也确实不能把这个相当于管理后台的界面暴露在公网，要ip访问也得是<strong>内网</strong>ip访问，有空再说。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">server.on(&quot;listening&quot;, () &#x3D;&gt; &#123;  const addr &#x3D; server.address();  &#x2F;&#x2F;const bind &#x3D; typeof addr &#x3D;&#x3D;&#x3D; &quot;string&quot; ? &quot;pipe &quot; + addr : &quot;http:&#x2F;&#x2F;localhost:&quot; + addr.port;  const bind &#x3D; typeof addr &#x3D;&#x3D;&#x3D; &quot;string&quot; ? &quot;pipe &quot; + addr : &quot;http:&#x2F;&#x2F;124.221.201.197:&quot; + addr.port;  console.log(&quot;Server running on &quot; + bind);  const his &#x3D; import_tsyringe19.container.resolve(HexoInstanceService);  his.init().catch(console.error);&#125;);</code></pre><hr><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>​hexon只是提供了一个界面，这就是为什么要先确保博客部署流程正确，作为一个伪后台，还是有些不足：</p><p>1、在博客的编辑页面是纯纯源代码格式，需要加一个可选择的markdown分屏预览效果<br>2、<sub>缺少博客备份的选项，毕竟服务器只租一年，还是github备份不易丢失。</sub>这个人家已经实现了，即“同步到git”选项，在服务器上测试好git push成功就能用了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂记</title>
      <link href="//post/%E6%9D%82%E8%AE%B0.html"/>
      <url>//post/%E6%9D%82%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="375ef417e57183e86a64c3a2a53d15a8b534c4646296e4a807b4857c3cfc9f98">a12d143d61e43de5669527613d318b6f6ef44fc50a9be6b56ea42c6d6c46c476d9977c513b871c3c5c59ef13ba077cd8052f36fbe9ca51bf63af0bcb9d4633a177d444897ac85ee7f8a139777b697a5ce6410589bad075133e923501d95938f03034e55a522e88845fef1a99f61341f2d36eb90fae1f7899fcae738a37e4d35e71d6bc5d97998aef56d6a3d9307b08f8820735e8c7588a37fe04b39eb63af2d68948ac08007adfda77139fb79f1ceb30c6f028e29bc542aaddb113ecd6e5be5b07f5ce1f4e80014e4814a2d2f3ab428a3722ca13085c1b5fe0f8fc35855c54ef3a56d98e25d0d170d6c8bf8d20e19892637627c03acc7763a4eee7adc86749b8123c2501a620f9cb8849b96f7c9e4fff4ffa7209702839193802ca68001f112d266622f60a17b3e80f42ea9d0ef957df70dcd9fff887c2507778354443cc3ad16509558846fbde2cf4d25b04da7e88a85f318b5b7f273c39a5dd48a71cb751e8ee6719f89b5258bf801bfe14db70bba196a271477cedc1295dee6341f71bc6eed7eeb9cd79b8d7649dcf4993dd27c9e10ead85e4da183492f235159620354fba48f19a400327cfa6d224c6eaeb4319cdf2bf1fcea3eac962879f8eaf23ef900e56c11f77f48c7ce3d4031e108edd994fe028ff56b7fc90a8971e7b31799d17b889225adc37b6afa24df6acf2544fdd8f75e32ea219be51e84ba5b098a2fda33a0f4440784278d6cdfc5f9cfcb18722471a825fadf725f17309a289b222492a0684d97e86341f2615c752e591af4acff5538cef9813aaac03a5a8f72dfb8481aee689ac6c6938d0a5cf599a787638703f63cd440a4aeedb408b2161db47735cf2abe5afa85d560148ef6eeb75383319be86c75300cc613821d671406b78bdfbfb4d02693f467b0c5d532c90230b9e60deb0fd6ba90f96cb51251843dcc3969a6043fddee718775af1c63a59fa6846b598fdf6c5b73aba29765e2ec1cbd8bc393d0d59d2f8d8b1848a67dcc6c8052a3c38b5e8044f2028882abe009b17e6c9e530ae08295fc751130ec486abe2cbd677cdf97478c2b06de0c4e5af6c4aeb939f9309bd6b10601953a48baedfce8d4e045370b99f4cf7ddd9c6b070395ed496bfef37b86960f2e1e94591aacfcc28408b0de0b8f734c7887bee0aff649854c96bd6a207d20e26e401061a8389fc90018a984b2f58876e0988fc534b526d992e0c55369bd938bfbad377217145b0d92f09f2acc31e936a3723b3269219f02550c372f3a886683596d76820e6544233ddd9ff1806d2f70693ed57f4f51ac1d188298a0f29e04fcfc38fd03270b68e573eb4df4885a5bd1b7f73e791fdcabd5c30db3dd57d988185503a8083a71d2d2487b301b6f67945b6b23d68d51f97375a0997fddad67cc7f39b9709af3b3a3a149adc626be9e1fe6437123a5d2c95927acd197877019e671d5ef97e85044a4228d3d00dea258361ac5aacaac600b6080761ddb3d08c93622e45b369e24bbd8c9021eed82b8509a6abb67b00f0bc51e9b82a71aea63fe3d47fb5c9c55e67f20ab9e8e4b1657f18538c12d1f95363a3feb3a1bb0404055878f3ff7a76d263d7ed14ee8250a80ef8e866478abe698948b60d3215fcb3b952176f1b05521ccb166bbedffb31849dd15dde38388d649bfdbb7cec0b16c8c8836ff7cbfd47f5b4f54105dc109d9000dbc74a3ddf322de3dc4accfcdf548602b71a43b8f7c469f761e68fa6d648b47e2fa54d4624f9dfd32e9ad321a77576382069eb6dfd7ad2724e2609740dcb6f91fba26cc5b757b7b383ab0530812a4fdf034b6d18b4a264182fb627d0be349f4ea2159fb16370efa7005acc50af7b293a0c3bc3f32e03e6a563306bd51c1229d929fb0fb70866624f01af9a49c2dbdb67551fdd7c292300abcaf233dd161c2dd91a27fa38df5391ed7dea814f13e32feead6f96b5cb200981e78c61c625374a5ac00903d6e0fefe99fdeb2c7a3e33153aade60a26beb5f05a9506723e1ab49b778c08399cdc37b1d7d367abd34b194a7cc3f0e04db012be361025a3e41e4e51878acc208ebc85e190dcd652b625ca02eb63ef72aa975464ffa91034d938845b228bd91efc0597f145e4f098985cf6760914adf61fd8c4d0e22a92e95d4739104c5a628145af3ddbf904d7c9236ed7d5ad35e4684a3e92d8c301c1ec8b30fa7f6eb8645eadd0a03f1b994da55734d4b4f77415f994a8aafda0d125547b7e1af841d99452bb7e3e40cc0cf289f7e0cb04ae6920d5e63d31410ab81e32463c71e466572d5b46a1ca9bb492d7df5c5c8a1f3feca50d7f3dc534d0e2a540d532790057d460df77fd1cb03f08003519fdcf98cf27a2b1e78849f32e998fb9fa1e48e48e33ac91190aab8785b1f47c30e460453f8ce1234e91cee1989218e7fba673f9846b5c61b43416b6fc846384317578743f8b2f2e833fa77265522478df58cd77913b6f05f10e83b6c7d1835d739481f731ac360c8c613abe96287d67ce15300e9ece5856d299f2db2b3076d5e83b26ced106932a244699de505ab6b72d3d711159b0f2e1da2c24d17240565dd338225425813f0edd5ee5e26c5536afbde6d7be8665aff5670106b24baad93668cda03ae84898815432272300c84aca2b28d6008bdd0fe5e60b95fc5a114293d55de32ae13ca0814c528e80be27acfe749065d312c4fdf6ee758d7ce2d11702401d001eab3175c79701cab7448a24d4e8f11349cb8845d5be81d735a99f6ab2c466ffde14375c8ec2b5629f6afc9901ee3a4eec8b80ac8ba593c8e14c80449fe700592b263c794d31a2bc05ad5180e8cf4817000786f905dd8971850ea867ca17285a3769ba2ee5619eb03b11079c413431bf6873bd6e7362f62bb8cfc76ab7c1a9b88a483f76e144b0c7ea807a2ebda58026fcd49ab6ee81d10e8848ed52a0b8732dcd9abad3078f0e7779aa143bcbfb3844aef0bd3eddd277961ff19d6be0da0bcbf19bb6e59db40f8ca0602eda640d2bbf6a850c28e7f5ed1db2c5940946550a1d51faca03e12f438006833a3fb661a22b824da76b7e52f58dc84fca5618cf396bbc298e6f6f0a97d9607e4873dc2d5fd75f9755743ef02896da2b2a19d2fb6ed6124800681fa8e2807fdfc500edbda8e8bb154b8830d46626c521d6644fef29ebad07a1a32ba2b630d5ff90ae5de3c8deca043a9944a7c50f9766c325da285d98f76c1415bccd9e5a21a28fdb9918ac2623c3f0b20caf2d6ab40a6feff38e2f561f13ce7b3e1b2f1084693a8b197e6e615ad1951046572c67b7c05082e78df2489bd1324e6fecf6b6950d5dc6c6e77e831bd96d9508fd6efa4e4b5dfbb22392e81a5394eeb00a8e0012db8d5c6cddf15b3e585b907740ff36acc059edaa9aa91272e5121cc9128235a821223e2e7509eaccc3975b4bb145a606d8b8a2a55b8c4e98f68897ea1f0ef02b9ede0096193aa0312a8aa19476ae83e5fa0ce9ef6f976ac3a89cfae588f6033fff3b2779cefbac45c4cf5dc198eeff31553df3542710c8b7808a8f783c1d4497d02e602c579f7ceedadd7bb79355de351361bcc2c1e67b0b3c1aa2efa0b2c7c86ae7089608ecb56c838f0a4a55cd8b166802caf921c186d5ed056357524886c34e25df3ea5e2ab9176d94f215e460b3c83e0ef33fe34a0734017550c099cf1585d58b7c754661f97686e2d72a44f802fea9776140114acc1e903d08b32d109ee9f5a3992b2dd57bdb2bd2b908c021ebb53047630750408d8f40e98675d4b0dea813fd9cb9d111ac1c7966f5f205c4f628c8d4dcef6ed5b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 生活小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记暴雨天</title>
      <link href="//post/%E8%AE%B0%E6%9A%B4%E9%9B%A8%E5%A4%A9.html"/>
      <url>//post/%E8%AE%B0%E6%9A%B4%E9%9B%A8%E5%A4%A9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 今日8月2号，因为台风暴雨天+懒，理所当然的躺了好几天。早上去了趟实验室，门没开，因为之前每次去实验室门已经开了，没有带钥匙的习惯，所以还是回宿舍了，打开电脑，趁这个空闲记录一下。<html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 上一次台风过境是在21年的暑假，那年考研留校正好遇到狂风暴雨，可惜的是当时和老王和祥仔苟在宿舍打王者了，没有出门感受一下，深感遗憾，直到几天以后出门只看到地下车库灌了满满当当的水。<html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 上周日，也就是7月31号，正是七月最后一天，终于在台风杜佳芮过境的最后一天，出了趟门，和凡哥解哥跋山涉水去吃了顿火锅，值得一提的是，我的伞在一周前去建行存钱，放在哈罗车篮子里不见了，大抵是从车篮子里掉路上了或是被人顺走了，先去菜鸟取了伞还有一盒鱼饵。说到鱼饵，宿舍里有解哥买的钓鱼竿，这次下大雨鱼上岸全被人们提桶捞走了，么得钓了/(ㄒoㄒ)/~~<html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 外面路上的积水有的地方到半个小腿，路上有车驶过溅起两边水幕还是蛮帅的。万达门口的低洼地聚了差不多小腿深的水，夹带着淤泥，妥妥的“黄”河。到了万达内部，空调还开着冷风，浑身上下都湿透了，再吹点冷风，这要是回去不洗个热水澡，真的要感冒。跋山涉水就为了这一顿火锅！！<p><img src="https://img.promefire.top/blog-img/20240110-3838dafbda207db008a2e2ddcca76358.png" alt></p><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 吃完火锅，已经是六点多了，天色渐暗、日星隐曜、浊浪排空。踩在水里凉得慌，更加一点狂风，打伞根本护不了一点点，装小蛋糕的纸袋子都被浸透泡烂了。路上突闻噩耗，宿舍楼内洗浴暂停一天，淋了一路雨、淌了一路水，热水澡必不能少，遂决定去对面的卓正泡澡，奢侈一把！！之前闻老大还推荐来着，择日不如撞日。回宿舍路过图书馆前，池塘里的水已经溢出来，漫过了外面的一个低平台，池中锦鲤也顺着游上来了，有好几个正徒手捉鱼，试着抓了一下没抓到，鱼游太快了。<p><img src="https://img.promefire.top/blog-img/20240110-d452d5e7caabb7a4931c018534838a8e.png" alt></p><p><img src="https://img.promefire.top/blog-img/20240110-5fdb3c9c0ec7f87f95a2e66f1842354c.png" alt></p><p><img src="https://img.promefire.top/blog-img/20240110-6087893669d5b1f944f35fe6aa5e5112.png" alt></p><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 宿舍先行泡了脚，暖和一下先，收拾了一身干净衣服，背了健身包出发，着不知道的人还以为我和凡哥冒雨去健身，笑死。凡哥惊讶我这个北方人竟然是第一次泡澡，泡澡的地竟然不让穿鞋，都是光脚走来走去，咯得我脚疼。泡澡确实舒坦，就是有点小贵，泡一次96。不过环境还是不错的。该说不说这大雨天，前来避难的人是真不少，都没个睡的地方，租了一盘棋，和凡哥对弈到一半，丫的停电了，大暴雨冲倒设施停电可以理解，但是没有一点预案也太不讲究了吧，发电机呢？最后打着手电下完了这一局，惨败，呜呜呜。右下角那一块黑棋没有注意到只有一个眼，第二个是个假眼，血亏十几目，当然加上也赢不了，以后下可得仔细点。<p><img src="https://img.promefire.top/blog-img/20240110-8636f4d923f5aed679afea6610ed6f4a.png" alt></p><p><img src="https://img.promefire.top/blog-img/20240110-0e4c98f1a29ac6d3d9f8eec913a72e13.png" alt></p><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 最后在大厅里找了个抱枕躺了，停电没空调是真tmd热，凡哥说我们本是来奢侈一把来享福的。晚上十点多的时候有服务员来叫让下去吃饭，没电饭做不出来，应该是中午剩下的，一块排骨、一块寿司、一块蛋挞。睡觉时候大概十二点过到一点间，隔壁有一家三口大半夜不睡觉在那聊天，聊什么“南韩北韩”、什么”徒增笑耳“云云，烦的一批，我大概两点多时候水的，凌晨4：50时候来电了，明晃晃的大灯就那么突然亮了，直接晃醒，心累啊，7点过下去吃早饭，炒饭、包子、油条、黑米粥 。吃完以后人走了不少，找了一张床直接睡了一上午，舒坦啊。<p><img src="https://img.promefire.top/blog-img/20240110-0eb09becc811ede94d80cbea116e897d.png" alt></p><p><img src="https://img.promefire.top/blog-img/20240110-aef28122acef7eccd6539774360cb86e.png" alt></p><p>出来已经不下雨了，地上积水三三两两，比之昨日，少了许多，路上车来车往，回！</p><p><img src="https://img.promefire.top/blog-img/20240110-3b447bff32483bd2506c90f3a66ed785.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 生活小记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号推送天气预报</title>
      <link href="//post/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%8E%A8%E9%80%81%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5.html"/>
      <url>//post/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%8E%A8%E9%80%81%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="天气api"><a class="markdownIt-Anchor" href="#天气api"></a> 天气API</h2><p>使用<a href="https://dashboard.juhe.cn/home">聚合网</a>的天气API，每天免费50次</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">接口地址： http:&#x2F;&#x2F;apis.juhe.cn&#x2F;simpleWeather&#x2F;query请求方式： GET请求参数； city拼接方式： http:&#x2F;&#x2F;apis.juhe.cn&#x2F;simpleWeather&#x2F;query?city&#x3D;&#123;city&#125;&amp;key&#x3D;&#123;key&#125;请求Key: 实名认证后会有</code></pre><p><img src="https://img.promefire.top/blog-img/20240110-7e685edb3d067addac2f592c1e1d8a82.png" alt="img"></p><h2 id="测试账号"><a class="markdownIt-Anchor" href="#测试账号"></a> 测试账号</h2><p><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login">微信公众平台接口测试账号</a>,注册一个测试账号,记下appid和secret，扫码后产生的用户ID、模板ID，填入<code>config.txt</code>文件中</p><p>自己的公众号不记得密码了，擦，先用测试的吧</p><img src="https://img.promefire.top/blog-img/20240110-570643158aec68e617bdb8dd6facd98e.png" alt="img" style="zoom: 67%;"><pre class="line-numbers language-python" data-language="python"><code class="language-python">&#123;&#123;date.DATA&#125;&#125;城市:&#123;&#123;city.DATA&#125;&#125;天气:&#123;&#123;weather.DATA&#125;&#125;实时气温:&#123;&#123;temperature.DATA&#125;&#125;湿度:&#123;&#123;humioity.DATA&#125;&#125;风向:&#123;&#123;direct.DATA&#125;&#125;您已经在地球上存活了:&#123;&#123;live.DATA&#125;&#125;天 &#123;&#123;note_ch.DATA&#125;&#125;&#123;&#123;note_en.DATA&#125;&#125;</code></pre><h2 id="配置文件"><a class="markdownIt-Anchor" href="#配置文件"></a> 配置文件</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">&#123;&quot;appid&quot;: &quot;appid&quot;,&quot;secret&quot;: &quot;secret&quot;,&quot;template_id&quot;: &quot;0sXNi6sorkdKHVKS8UuQdRARS39vaBu94YyqbmW7GtI&quot;,&quot;user&quot;: [&quot;oGeX96kGhg-wEhbKEstfGe93cAiQ&quot;,&quot;oGeX96pRe_r-0PfdsJ09zzk5juHI&quot;], &quot;key&quot;: &quot;7ccd03d19e2920224cdadd2ae2bdfd07&quot;,&quot;birthday&quot;: &quot;2000-03-11&quot;,&quot;weather_key&quot;: &quot;7ccd03d19e2920224cdadd2ae2bdfd07&quot;,&quot;region&quot;: [&quot;保定&quot;,&quot;石家庄&quot;], &quot;note_ch&quot;: &quot;good good learn,day day up&quot;, &quot;note_en&quot;: &quot;study hard and make progress every day!&quot; &#125;</code></pre><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><h3 id="在main中读取配置文件并调用函数"><a class="markdownIt-Anchor" href="#在main中读取配置文件并调用函数"></a> 在main中读取配置文件并调用函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    try:        with open(&quot;config.txt&quot;, encoding&#x3D;&quot;utf-8&quot;) as f:            config &#x3D; eval(f.read())    except FileNotFoundError:        print(&quot;推送消息失败，请检查config.txt文件是否与程序位于同一路径&quot;)        os.system(&quot;pause&quot;)        sys.exit(1)    except SyntaxError:        print(&quot;推送消息失败，请检查配置文件格式是否正确&quot;)        os.system(&quot;pause&quot;)        sys.exit(1)    # 获取accessToken    accessToken &#x3D; get_access_key()    # 接收的用户    users &#x3D; config[&quot;user&quot;]    # 传入地区获取天气信息    citys &#x3D; config[&quot;region&quot;]    note_ch &#x3D; config[&quot;note_ch&quot;]    note_en &#x3D; config[&quot;note_en&quot;]    #模板id    template_id &#x3D; config[&quot;template_id&quot;]    for usr,city in zip(users,citys):        weather, temperature, humidity, direct &#x3D; get_weather(city)        send_msg(usr,accessToken,template_id,weather,temperature,humidity,direct,note_ch,note_en)</code></pre><p>同时循环两个及以上列表要加zip()</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">for usr,city in zip(users,citys):        weather, temperature, humidity, direct &#x3D; get_weather(city)        send_msg(usr,accessToken,template_id,weather,temperature,humidity,direct,note_ch,note_en)</code></pre><p>这个循环考虑了多个用户，不同城市，目前存放的时候只能一一对应，后面可以将配置文件读入转化为Json，里面放一个users，每一个user对应城市、生日等等用户信息。读入程序后，赋给实体对象，这样外循环只遍历用户对象就行了，还方便增删查改。没毛病 。用户<code>id</code>、<code>city</code>。定义一个user类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">class User:    def __init__(self, id, city,birthday):        self.id &#x3D; id        self.city &#x3D; city        self.birthday &#x3D; birthday</code></pre><p>//TODO 能不能获取用户微信上的地址，更方便</p><p>将txt文件转换为json文件</p><p>读取文件中的每一行，并将其拆分为键和值对，来创建一个Python字典对象。对于值是一个JSON字符串的情况下，我们使用 json.loads() 函数将其解析成Python对象。最后，我们可以使用 json.dump() 将字典对象写入新的JSON文件中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import jsondef txt2json():# 读取文本文件    with open(&#39;config.txt&#39;, &#39;r&#39;) as f:        lines &#x3D; f.readlines()        # 将文本转换为字典对象    data &#x3D; &#123;&#125;    for line in lines:        key, val &#x3D; line.strip().split(&#39;: &#39;)        try:            val &#x3D; json.loads(val)        except ValueError:            pass        data[key] &#x3D; val        # 将字典对象写入JSON文件    with open(&#39;config.json&#39;, &#39;w&#39;) as f:        json.dump(data, f)</code></pre><p>读取Json文件建立userduix</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def CreateUsersByJson():    with open(&#39;config.json&#39;, &#39;r&#39;) as f:        data &#x3D; json.load(f)    users &#x3D; []    for user_data in data[&#39;users&#39;].values():        users.append(User(user_data[&#39;id&#39;], user_data[&#39;city&#39;],user_data[&#39;birthday&#39;]))    return users</code></pre><h3 id="根据appid和-secret获取密钥accesstoken"><a class="markdownIt-Anchor" href="#根据appid和-secret获取密钥accesstoken"></a> 根据<code>appid</code>和 <code>secret</code>获取密钥<code>accessToken</code></h3><p>这个在后面发消息会用到</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def get_access_key():    appid &#x3D; config[&#39;appid&#39;]    secret &#x3D; config[&#39;secret&#39;]    url &#x3D; f&#39;https:&#x2F;&#x2F;api.weixin.qq.com&#x2F;cgi-bin&#x2F;token?grant_type&#x3D;client_credential&amp;appid&#x3D;&#123;appid&#125;&amp;secret&#x3D;&#123;secret&#125;&#39;    response &#x3D; requests.get(url).json()    access_token &#x3D; &#39;&#39;    if response[&#39;expires_in&#39;] &#x3D;&#x3D; 7200:        access_token &#x3D; response[&#39;access_token&#39;]        return access_token    else:        print(&quot;appid或secret错误&quot;)</code></pre><h3 id="根据城市获得天气"><a class="markdownIt-Anchor" href="#根据城市获得天气"></a> 根据城市获得天气</h3><p>聚合网查询得到的json数据为：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;&quot;reason&quot;:&quot;查询成功!&quot;,&quot;result&quot;:&#123;&quot;city&quot;:&quot;保定&quot;,&quot;realtime&quot;:&#123;&quot;temperature&quot;:&quot;37&quot;,&quot;humidity&quot;:&quot;23&quot;,&quot;info&quot;:&quot;晴&quot;,&quot;wid&quot;:&quot;00&quot;,&quot;direct&quot;:&quot;西南风&quot;,&quot;power&quot;:&quot;5级&quot;,&quot;aqi&quot;:&quot;125&quot;&#125;,&quot;future&quot;:[&#123;&quot;date&quot;:&quot;2023-06-16&quot;,&quot;temperature&quot;:&quot;23\&#x2F;38℃&quot;,&quot;weather&quot;:&quot;晴&quot;,&quot;wid&quot;:&#123;&quot;day&quot;:&quot;00&quot;,&quot;night&quot;:&quot;00&quot;&#125;,&quot;direct&quot;:&quot;南风&quot;&#125;,&#123;&quot;date&quot;:&quot;2023-06-17&quot;,&quot;temperature&quot;:&quot;23\&#x2F;36℃&quot;,&quot;weather&quot;:&quot;晴转多云&quot;,&quot;wid&quot;:&#123;&quot;day&quot;:&quot;00&quot;,&quot;night&quot;:&quot;01&quot;&#125;,&quot;direct&quot;:&quot;西南风转东北风&quot;&#125;,&#123;&quot;date&quot;:&quot;2023-06-18&quot;,&quot;temperature&quot;:&quot;24\&#x2F;36℃&quot;,&quot;weather&quot;:&quot;多云转中雨&quot;,&quot;wid&quot;:&#123;&quot;day&quot;:&quot;01&quot;,&quot;night&quot;:&quot;08&quot;&#125;,&quot;direct&quot;:&quot;东北风&quot;&#125;,&#123;&quot;date&quot;:&quot;2023-06-19&quot;,&quot;temperature&quot;:&quot;19\&#x2F;27℃&quot;,&quot;weather&quot;:&quot;雷阵雨转阴&quot;,&quot;wid&quot;:&#123;&quot;day&quot;:&quot;04&quot;,&quot;night&quot;:&quot;02&quot;&#125;,&quot;direct&quot;:&quot;东北风转北风&quot;&#125;,&#123;&quot;date&quot;:&quot;2023-06-20&quot;,&quot;temperature&quot;:&quot;17\&#x2F;25℃&quot;,&quot;weather&quot;:&quot;雷阵雨转多云&quot;,&quot;wid&quot;:&#123;&quot;day&quot;:&quot;04&quot;,&quot;night&quot;:&quot;01&quot;&#125;,&quot;direct&quot;:&quot;北风转东北风&quot;&#125;]&#125;,&quot;error_code&quot;:0&#125;</code></pre><p>未来天气就算了吧，毕竟每天推送，郁闷的是当日天气没有最低最高温度，只有实时温度。。。。这个API不行</p><ul><li><code>r = requests.get(url,headers)</code>得到的是一个response对象，需要调用<code>res = r.json()</code>转换为json格式，然后就可以访问键值。</li><li>函数返回天气、实时温度、湿度、风向。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">def get_weather(city):    key &#x3D; config[&quot;key&quot;]    headers &#x3D; &#123;        &#39;Referer&#39;: &#39;http:&#x2F;&#x2F;apis.juhe.cn&#x2F;simpleWeather&#x2F;query&#39;,        &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;86.0.4240.198 Safari&#x2F;537.36&#39;    &#125;    url &#x3D; f&#39;http:&#x2F;&#x2F;apis.juhe.cn&#x2F;simpleWeather&#x2F;query?city&#x3D;&#123;city&#125;&amp;key&#x3D;&#123;key&#125;&#39;    r &#x3D; requests.get(url,headers)    r.encoding &#x3D; &quot;utf8&quot;    res &#x3D; r.json()    realtime &#x3D; res[&#39;result&#39;][&#39;realtime&#39;]    temperature &#x3D; realtime[&#39;temperature&#39;]    humidity &#x3D; realtime[&#39;humidity&#39;]    weather &#x3D; realtime[&#39;info&#39;]  #晴    direct &#x3D; realtime[&#39;direct&#39;] #风    return weather,temperature,humidity,direct</code></pre><h3 id="推送消息"><a class="markdownIt-Anchor" href="#推送消息"></a> 推送消息</h3><p>strptime(要转换为datetime的字符串,输入的格式)</p><p><code>reques.post(sendMessage_url, data=json.dumps(data)).json()</code>向指定的URL发送POST请求，并将发送的数据以JSON格式进行编码。将响应结果保存为json数据</p><p><code>json.dumps(data)</code>将字典转换成一个Json字符串</p><p>这个不用了,太蠢了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def send_msg(user,accessToken,template_id,weather,temperature,humioity,direct, note_ch, note_en):    sendMessage_url &#x3D; f&quot;https:&#x2F;&#x2F;api.weixin.qq.com&#x2F;cgi-bin&#x2F;message&#x2F;template&#x2F;send?access_token&#x3D;&#123;accessToken&#125;&quot;    # 当前日期和星期    week_list &#x3D; [&quot;星期日&quot;, &quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;]    year &#x3D; localtime().tm_year    month &#x3D; localtime().tm_mon    day &#x3D; localtime().tm_mday    week &#x3D; week_list[datetime.date(int(year), int(month), int(day)).weekday()]    date &#x3D; f&#39;&#123;year&#125;年&#123;month&#125;月&#123;day&#125;日  &#123;week&#125;&#39;    # 活了多久    birthday_date &#x3D; datetime.datetime.strptime(config[&#39;birthday&#39;], &quot;%Y-%m-%d&quot;)    curr_datetime &#x3D; datetime.datetime.now()    minus_datetime &#x3D; curr_datetime - birthday_date        data &#x3D; &#123;        &quot;touser&quot;: user,        &quot;template_id&quot;: template_id,        &quot;appid&quot;: config[&#39;appid&#39;],        &quot;data&quot;: &#123;            &quot;live&quot;: &#123;                &quot;value&quot;: minus_datetime.days,                &quot;color&quot;: get_color()            &#125;,            &quot;city&quot;: &#123;                &quot;value&quot;: city,                &quot;color&quot;: get_color()            &#125;,            &quot;weather&quot;: &#123;                &quot;value&quot;: weather,                &quot;color&quot;: get_color()            &#125;,            &quot;temperature&quot;: &#123;                &quot;value&quot;: temperature,                &quot;color&quot;: get_color()            &#125;,            &quot;humioity&quot;: &#123;                &quot;value&quot;: humioity,                &quot;color&quot;: get_color()            &#125;,            &quot;direct&quot;: &#123;                &quot;value&quot;: direct,                &quot;color&quot;: get_color()            &#125;,            &#39;note_ch&#39;: &#123;                &quot;value&quot;: note_ch,                &quot;color&quot;: get_color()            &#125;,            &#39;note_en&#39;: &#123;                &quot;value&quot;: note_en,                &quot;color&quot;: get_color()            &#125;        &#125;    &#125;    getTemp &#x3D; requests.post(sendMessage_url, data&#x3D;json.dumps(data)).json()</code></pre><p>修改之后的推送消息</p><p>参数只有user，看着舒服多了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def SendMsg(user):    city &#x3D; user.city    weather, temperature, humidity, direct &#x3D; get_weather(city)    sendMessage_url &#x3D; f&quot;https:&#x2F;&#x2F;api.weixin.qq.com&#x2F;cgi-bin&#x2F;message&#x2F;template&#x2F;send?access_token&#x3D;&#123;accessToken&#125;&quot;        birthday_date &#x3D; datetime.datetime.strptime(config[&#39;birthday&#39;], &quot;%Y-%m-%d&quot;)    curr_datetime &#x3D; datetime.datetime.now()    minus_datetime &#x3D; curr_datetime - birthday_date        data &#x3D; &#123;        &quot;touser&quot;: user.id,        &quot;template_id&quot;: template_id,        &quot;appid&quot;: config[&#39;appid&#39;],        &quot;data&quot;: &#123;            &quot;live&quot;: &#123;                &quot;value&quot;: minus_datetime.days,                &quot;color&quot;: get_color()            &#125;,            &quot;city&quot;: &#123;                &quot;value&quot;: city,                &quot;color&quot;: get_color()            &#125;,            &quot;weather&quot;: &#123;                &quot;value&quot;: weather,                &quot;color&quot;: get_color()            &#125;,            &quot;temperature&quot;: &#123;                &quot;value&quot;: temperature,                &quot;color&quot;: get_color()            &#125;,            &quot;humioity&quot;: &#123;                &quot;value&quot;: humidity,                &quot;color&quot;: get_color()            &#125;,            &quot;direct&quot;: &#123;                &quot;value&quot;: direct,                &quot;color&quot;: get_color()            &#125;,            &#39;note_ch&#39;: &#123;                &quot;value&quot;: note_ch,                &quot;color&quot;: get_color()            &#125;,            &#39;note_en&#39;: &#123;                &quot;value&quot;: note_en,                &quot;color&quot;: get_color()            &#125;        &#125;    &#125;    getTemp &#x3D; requests.post(sendMessage_url, data&#x3D;json.dumps(data)).json()    &#x2F;&#x2F;TODO 对getTemp判断</code></pre><p><code>get_color()</code>随机选择颜色，抄的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def get_color():    # 获取随机颜色    get_colors &#x3D; lambda n: list(map(lambda i: &quot;#&quot; + &quot;%06x&quot; % random.randint(0, 0xFFFFFF), range(n)))    color_list &#x3D; get_colors(100)    return random.choice(color_list)</code></pre><h2 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h2><p>测试号上可行，推送样式如图：</p><p><img src="https://img.promefire.top/blog-img/20240110-cab8d9d5d5c12a85d88bb878aa004a53.jpeg" alt="img"></p><p>做好了才发现个人公众号不能推送模板信息。。。搞不了。。。</p><p><img src="https://img.promefire.top/blog-img/20240110-cf8bafa19f2878519edfba1393e2c078.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OWOD复现</title>
      <link href="//post/OWOD%E5%A4%8D%E7%8E%B0.html"/>
      <url>//post/OWOD%E5%A4%8D%E7%8E%B0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>项目环境：python3.7(python3.8)、cuda11.3、pytorch1.10</p><p>论文地址：<a href="https://arxiv.org/abs/2103.02603">https://arxiv.org/abs/2103.02603</a></p><p>代码地址：<a href="https://github.com/JosephKJ/OWOD">https://github.com/JosephKJ/OWOD</a></p><h2 id="安装detectron2"><a class="markdownIt-Anchor" href="#安装detectron2"></a> 安装Detectron2</h2><h3 id="1-安装pytorch110-torchvision0110-opencv"><a class="markdownIt-Anchor" href="#1-安装pytorch110-torchvision0110-opencv"></a> 1、安装pytorch1.10 + torchvision0.11.0 + opencv</h3><p>一开始没注意，安装了1.12的pytorch，结果官方给的文档上只到1.10，复现还是不要挑战高版本是否兼容了，尝试了一下pytorch版本降级，如下，但是没成功，还是1.12的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda install pytorch&#x3D;0.1.10 -c soumith </code></pre><p>果断退出虚拟环境，再建一个。</p><p>在<a href="https://pytorch.org/get-started/previous-versions/">这里</a> 找对应1.10版本的pytorch，顺带<code>torchvision</code>也一起下了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create -n OWOD2 python&#x3D;3.7# CUDA 11.3conda install pytorch&#x3D;&#x3D;1.10.0 torchvision&#x3D;&#x3D;0.11.0 torchaudio&#x3D;&#x3D;0.10.0 cudatoolkit&#x3D;11.3 -c pytorch -c conda-forge</code></pre><p>报错了！！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(OWOD2) root@autodl-container-d8b611b252-d52809bf:~# conda install pytorch&#x3D;&#x3D;1.10.1 torchvision&#x3D;&#x3D;0.11.2 torchaudio&#x3D;&#x3D;0.10.1 cudatoolkit&#x3D;11.3 -c pytorch -c conda-forgeCollecting package metadata (current_repodata.json): doneSolving environment: failed with initial frozen solve. Retrying with flexible solve.Collecting package metadata (repodata.json): &#x2F; (OWOD2) root@autodl-container-d8b611b252-d52809bf:~#</code></pre><p>添加清华源！（不行）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#添加镜像源conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;mainconda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;freeconda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;rconda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;proconda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;msys2#显示检索路径conda config --set show_channel_urls yes#显示镜像通道conda config --show channels</code></pre><p>还是离线下载吧（成功）</p><p>离线下载网址：<a href="https://download.pytorch.org/whl/cu113/torch_stable.html">https://download.pytorch.org/whl/cu113/torch_stable.html</a></p><p>下载<code>**torch-1.10.0+cu113-cp37-cp37m-linux_x86_64.whl**</code>和<code>torchvision-0.11.0+cu113-cp37-cp37m-linux_x86_64.whl</code>,</p><p>上传到服务器，然后</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip install torch-1.10.0+cu113-cp37-cp37m-linux_x86_64.whlpip install torchvision-0.11.0+cu113-cp37-cp37m-linux_x86_64.whl</code></pre><p>查看一下torch版本怎么cuda版本也出来了，emmm，大抵是没毛病。</p><p><img src="https://img.promefire.top/blog-img/20240110-68ee230ff715d7907c788eb3503ce5fb.png" alt="img"></p><p>安装OpenCV</p><pre class="line-numbers language-none"><code class="language-none">python -m pip install opencv-python -i http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F; --trusted-host pypi.douban.com</code></pre><h3 id="2-安装detectron2"><a class="markdownIt-Anchor" href="#2-安装detectron2"></a> 2、安装Detectron2</h3><p><a href="https://github.com/facebookresearch/detectron2/blob/main/INSTALL.md#installation">这里</a> 获取对应版本的Detectron2</p><p><img src="https://img.promefire.top/blog-img/20240110-00ba652f2d4ca592bcf52c13eab9ee14.png" alt="img"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -m pip install detectron2 -f \  https:&#x2F;&#x2F;dl.fbaipublicfiles.com&#x2F;detectron2&#x2F;wheels&#x2F;cu113&#x2F;torch1.10&#x2F;index.html</code></pre><p>源代码构建</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git clone https:&#x2F;&#x2F;github.com&#x2F;facebookresearch&#x2F;detectron2.gitpython -m pip install -e detectron2</code></pre><h3 id="3-再下载gcc-和g编译器"><a class="markdownIt-Anchor" href="#3-再下载gcc-和g编译器"></a> 3、再下载gcc 和g++编译器</h3><pre class="line-numbers language-none"><code class="language-none">apt-get install gcc g++</code></pre><p><img src="https://img.promefire.top/blog-img/20240110-f9f1a41399d2cce98821b5e1a48c8776.png" alt="img"></p><h3 id="4-安装依赖"><a class="markdownIt-Anchor" href="#4-安装依赖"></a> 4、安装依赖</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip install fvcore&#x3D;&#x3D;0.1.1.post20200716pip install &#39;git+https:&#x2F;&#x2F;github.com&#x2F;cocodataset&#x2F;cocoapi.git#subdirectory&#x3D;PythonAPI&#39;</code></pre><p>4.1报错：<code>detectron2 0.6 requires fvcore&lt;0.1.6,&gt;=0.1.5, but you have fvcore 0.1.1.post20200716 which is incompatible.</code></p><p>那就换成<code>pip install fvcore==0.1.5.post20210410</code>吧</p><p>4.2报错：<code>detectron2 0.6 requires pycocotools&gt;=2.0.2, but you have pycocotools 2.0 which is incompatible.</code></p><p>解决：从<a href="https://pypi.org/project/pycocotools/2.0.2/#files">这里</a> 下载2.0.2的文件</p><p>cd到pycocotools所在目录。执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python setup.py build_ext --inplacepython setup.py build_ext install</code></pre><p><code>conda list</code> 查看pycocotools，安装成功</p><ul><li>记得要用<code>pip uninstall pycocotools</code>把之前2.0的卸载掉</li></ul><p>在demo文件夹下放一张照片测试一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python demo.py --config-file ..&#x2F;configs&#x2F;COCO-InstanceSegmentation&#x2F;mask_rcnn_R_50_FPN_3x.yaml --input 1.jpg --output .&#x2F;result.jpg --opts MODEL.WEIGHTS detectron2:&#x2F;&#x2F;COCO-InstanceSegmentation&#x2F;mask_rcnn_R_50_FPN_3x&#x2F;137849600&#x2F;model_final_f10217.pkl</code></pre><p>报错：<code> cannot import name 'cached_property' from 'functools'</code></p><p>搜索发现只有3.8以上才行？？？？我尼玛搞了这么久你说得3.8，前面说大于等于3.6是吃屎了吗？？？</p><p>爷妥协了，重新建了3.8的环境，再来一遍，跑起来了</p><p><img src="https://img.promefire.top/blog-img/20240110-e5df1e07e96da936689172eb107f96f8.png" alt="img"></p><p><img src="https://img.promefire.top/blog-img/20240115-4af72295e85457dbad57f57af7b195ad.jpeg" alt="1686361443462-23b2f48b-8d2e-42a2-881e-5665e25fff8a"></p><h1 id="owod"><a class="markdownIt-Anchor" href="#owod"></a> OWOD</h1><h2 id="1-数据集-文件夹"><a class="markdownIt-Anchor" href="#1-数据集-文件夹"></a> 1、数据集 文件夹</h2><p><img src="https://img.promefire.top/blog-img/20240110-e57b03f7e67f3a2e8842e383b0d7e4c8.png" alt="img"></p><h2 id="2-下载预训练模型"><a class="markdownIt-Anchor" href="#2-下载预训练模型"></a> 2、下载预训练模型</h2><p><a href="https://github.com/JosephKJ/OWOD/issues/86">点击这里下载</a>，放在OWOD-master下，找到<code>OWOD-master/configs/OWOD/t1/t1_train.yaml</code>,把预训练模型的文件路径替换原文件中weight的内容。</p><h2 id="3-打包代码上传"><a class="markdownIt-Anchor" href="#3-打包代码上传"></a> 3、打包代码上传</h2><p>linux下解压zip压缩文件<code>unzip xxx.zip</code></p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-d 目录名</td><td>将压缩文件解压到指定目录下。</td></tr><tr><td>-n</td><td>解压时并不覆盖已经存在的文件。</td></tr><tr><td>-o</td><td>解压时覆盖已经存在的文件，并且无需用户确认。</td></tr><tr><td>-v</td><td>查看压缩文件的详细信息，包括压缩文件中包含的文件大小、文件名以及压缩比等，但并不做解压操作。</td></tr><tr><td>-t</td><td>测试压缩文件有无损坏，但并不解压。</td></tr><tr><td>-x 文件列表</td><td>解压文件，但不包含文件列表中指定的文件。</td></tr></tbody></table><h2 id="4-进入项目文件夹配置detectron"><a class="markdownIt-Anchor" href="#4-进入项目文件夹配置detectron"></a> 4、进入项目文件夹，配置detectron</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python setup.py build develop</code></pre><ul><li>不要使用该文件夹外部构建的Detectron2，运行代码时会报’Non-existent config key: OWOD’，具体原因是Detectron2的版本问题，所以一定要在OWOD内构建Detectron2</li></ul><p>解决方法：在OWOD内部运行<code>**python -m pip install -e ./**</code></p><h2 id="5-开跑"><a class="markdownIt-Anchor" href="#5-开跑"></a> 5、开跑</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python tools&#x2F;train_net.py --num-gpus 1 --config-file .&#x2F;configs&#x2F;OWOD&#x2F;t1&#x2F;t1_train.yaml SOLVER.IMS_PER_BATCH 8 SOLVER.BASE_LR 0.0025 OUTPUT_DIR &quot;.&#x2F;output&#x2F;t1&quot;</code></pre><ul><li><strong>–num-gpus 1</strong>: 这个参数指定使用的GPU数量为1，表明训练将在单个GPU上进行。</li><li><strong>–config-file ./configs/OWOD/t1/t1_train.yaml</strong>: 这个参数指定了配置文件的路径，配置文件是训练过程中使用的设置和参数的集合。在这个例子中，配置文件的路径为 <strong>./configs/OWOD/t1/t1_train.yaml</strong>。</li><li><strong>SOLVER.IMS_PER_BATCH 8</strong>: 这个参数设置了每个训练批次（batch）的图像数目为8。在训练过程中，将每次从数据集中选择8张图像用于训练。</li><li><strong>SOLVER.BASE_LR 0.0025</strong>: 这个参数设置了基础学习率（base learning rate）为0.0025。基础学习率是在训练过程中控制参数更新的速率的一个重要参数。</li><li><strong>OUTPUT_DIR “./output/t1”</strong>: 这个参数设置了输出目录的路径为 <strong>./output/t1</strong>。在训练过程中，训练模型和其他输出文件将保存在这个目录中。</li></ul><h3 id="报错"><a class="markdownIt-Anchor" href="#报错"></a> 报错</h3><ul><li>报错：<code>**No module named 'reliability****'** </code></li></ul><p><code>pip install reliability -i https://pypi.tuna.tsinghua.edu.cn/simple</code>指定一下清华源</p><ul><li>又报错：<code>module 'numpy' has no attribute 'str'. </code></li></ul><p>查了一下是numpy版本的问题，我的是1.24.3，降级成1.22.0.但是另一个包要求numpy&gt;=1.24.2，🤮</p><p>都tmd降级，numpy降到1.23</p><ul><li>报错：<code>distutils‘ has no attribute ‘version‘ </code></li></ul><p>是setuptools版本问题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip uninstall setuptoolspip install setuptools&#x3D;&#x3D;59.5.0</code></pre><p>嗚嗚，out of memory了，batch_szie 只能設置爲2，開跑!!! 2000張圖片跑兩小時</p><p><img src="https://img.promefire.top/blog-img/20240110-ea339bd2bae8222fc089ab2a4208c22a.png" alt="img"></p><p>参数解释：</p><ul><li>eta: 2:00:55 这个指标表示预计训练完成所需的剩余时间。在这个例子中，预计还需要2小时、55分钟来完成训练。</li><li>iter: 19 这个指标表示当前的迭代次数。在这个例子中，当前迭代次数为19次。</li><li>total_loss: 2.895 这个指标表示总体损失（total loss）。总体损失是在训练过程中使用的一个综合指标，用于衡量模型的训练效果。在这个例子中，总体损失为2.895。</li><li>loss_cls: 1.497 这个指标表示分类损失（classification loss）。分类损失是用于衡量模型分类任务的损失函数值。在这个例子中，分类损失为1.497。</li><li>loss_box_reg: 0.2146 这个指标表示边界框回归损失（bounding box regression loss）。边界框回归损失是用于衡量模型边界框回归任务的损失函数值。在这个例子中，边界框回归损失为0.2146。</li><li>loss_clustering: 0 这个指标表示聚类损失（clustering loss）。聚类损失是用于衡量模型聚类任务的损失函数值。在这个例子中，聚类损失为0。</li><li>loss_rpn_cls: 0.6775 这个指标表示区域生成网络分类损失（region proposal network classification loss）。区域生成网络分类损失是用于衡量模型区域生成网络分类任务的损失函数值。在这个例子中，区域生成网络分类损失为0.6775。</li><li>loss_rpn_loc: 0.199 这个指标表示区域生成网络定位损失（region proposal network localization loss）。区域生成网络定位损失是用于衡量模型区域生成网络定位任务的损失函数值。在这个例子中，区域生成网络定位损失为0.199。</li><li>time: 0.4011 这个指标表示当前迭代的耗时。在这个例子中，当前迭代的耗时为0.4011秒。</li><li>data_time: 0.0515 这个指标表示数据加载的耗时。在这个例子中，数据加载的耗时为0.0515秒。</li><li>lr: 0.00047703 这个指标表示学习率（learning rate）的值。学习率是控制模型参数更新的速率的一个重要超参数</li></ul><p>单张图片测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python demo.py --config-file &#x2F;root&#x2F;python_work&#x2F;OWOD-master&#x2F;configs&#x2F;OWOD&#x2F;t1&#x2F;t1_test.yaml  --input 2.jpg --output 2_res.jpg --opt MODEL.WEIGHTS &#x2F;root&#x2F;python_work&#x2F;OWOD-master&#x2F;output&#x2F;t1&#x2F;model_final.pth</code></pre><p><img src="https://img.promefire.top/blog-img/20240110-a54aa493bdedc532081077dd1a1eec4e.jpeg" alt="img"></p><p>​     两千张图片训出来的果然不行，柜子检测成car了。而且还有一个问题，就是这2000张图片没有按类别进行挑选，导致不知道某一个类有没有经过训练，也就无法测试是不是新类要标注为unknown。</p><p><img src="https://img.promefire.top/blog-img/20240110-74c7f653dfc5e03efbcc2d88e15920fc.jpeg" alt="img"></p><p>可视化代码里要求output文件夹下有一个energy_dist.pkl文件，输出里面么得这个文件，稀碎。。。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cfg_file &#x3D;  &quot;&#x2F;root&#x2F;python_work&#x2F;OWOD-master&#x2F;configs&#x2F;OWOD&#x2F;t1&#x2F;t1_test.yaml&quot;model &#x3D; &#39;&#x2F;root&#x2F;python_work&#x2F;OWOD-master&#x2F;output&#x2F;t1&#x2F;model_final.pth&#39;im &#x3D; cv2.imread(&quot;&#x2F;root&#x2F;python_work&#x2F;OWOD-master&#x2F;datasets&#x2F;VOC2007&#x2F;JPEGImages&#x2F;&quot; + file_name + &quot;.jpg&quot;)param_save_location &#x3D; os.path.join(&#39;&#x2F;root&#x2F;python_work&#x2F;OWOD-master&#x2F;output&#x2F;t1_clustering_val&#x2F;energy_dist_&#39; + str(20) + &#39;.pkl&#39;)</code></pre><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h1><p>1、查看服务器CUDA版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvcc -V</code></pre><p><img src="https://img.promefire.top/blog-img/20240110-82f1d3087121c54644e1db5e7863b905.png" alt="img"></p><p>2、创建虚拟环境报错了！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CommandNotFoundError: Your shell has not been properly configured to use &#39;conda deactivate&#39;.To initialize your shell, run    $ conda init &lt;SHELL_NAME&gt;</code></pre><p>解决：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda init bash</code></pre><p>3、<a href="https://pjreddie.com/projects/pascal-voc-dataset-mirror/">Pascal VOC Dataset Mirror</a></p><p>4、查看torch版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&gt;&gt;&gt; import torch&gt;&gt;&gt; torch.__version__&#39;1.12.1&#39;</code></pre><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考：</h2><p>[OWOD复现过程总结_wangyanhuaa的博客-CSDN博客](<a href="https://blog.csdn.net/wangyanhuaa/article/details/129970265#:~:text=detectron2%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F%E5%90%8E%E5%8D%B3%E5%8F%AF%E5%A4%8D%E7%8E%B0OWOD">https://blog.csdn.net/wangyanhuaa/article/details/129970265#:~:text=detectron2搭建成功后即可复现OWOD</a> 1.下载OWOD代码。 2. 进入项目文件夹（cd OWOD-master）,，激活环境，输入语句配置detectron python <a href="http://setup.py">setup.py</a> build develop)</p><p><a href="https://blog.csdn.net/m0_64720568/article/details/129802880?spm=1001.2014.3001.5502">Ubuntu下配置detectron2_于大宝0626的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> OpenWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>城市点亮--天津</title>
      <link href="//post/%E5%9F%8E%E5%B8%82%E7%82%B9%E4%BA%AE-%E5%A4%A9%E6%B4%A5.html"/>
      <url>//post/%E5%9F%8E%E5%B8%82%E7%82%B9%E4%BA%AE-%E5%A4%A9%E6%B4%A5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 六月七八，正是高考好时节，😄出发前看了一眼天气预报，大晴天! 冲冲冲！<br><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 历经一个半小时，在将近十点的时候，终于到站了！大概是工作日的原因，路上行人三三两两，很是空旷。<p><img src="https://img.promefire.top/blog-img/20240115-cb2618882c7f6d634935e120dbd96f6a.jpg" alt></p><p><img src="https://img.promefire.top/blog-img/20240115-0b93740fa31da32bd0cf879032627658.jpg" alt="沿途风景"></p><h2 id="妈祖文化园"><a class="markdownIt-Anchor" href="#妈祖文化园"></a> 妈祖文化园</h2><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 本来打算坐公交的，关哥提议共享电驴直达妈祖像，整！骑了一个小时，越往东骑，城市的人和车越少，不愧是”新“城。破电驴有毛病，戴上头盔后它检测不到，一直提醒我头盔没带好，头盔检测系统真垃圾啊，最要命的是等完红灯，就不给电了。一开始以为是放头盔的篮子里有压力检测，最后发现检测点在头盔上，把头盔往上提一下就完事。<blockquote><p>妈祖，亦称“天妃”“天后”，俗称“海神娘娘”，是传说中掌管海上航运的女神。</p><p>妈祖，原名林默  ，公元960年三月廿三出生于福建莆田，公元987年九月初九，因救助渔民而不幸遇难，年仅28岁</p><p>父母信佛，梦观音赐药而生之。八岁从师，十岁信佛，十三岁习法术。宋雍熙四年（公元987年）盛装登山石“升天”为神。当地居民于清康熙三十三年（1694年）立庙奉祀，称“通贤灵女” 。宋元明清历代均有褒封，清封“天上圣母”。</p></blockquote><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 没想到在北方的天津，会有妈祖文化园与妈祖像，照理说应该东南沿海信奉的人会多。妈祖文化园这一片地区据说全是填海造陆来的，大工程。里面除了高达42米妈祖圣像，其他的房屋建筑感觉一般般┑(￣Д ￣)┍。<p><img src="https://img.promefire.top/blog-img/20240115-ae2e089546ff254889e7f512ca70e2c6.jpg" alt></p><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> &nbsp; 妈祖像东临渤海，翻过堤坝，土生土长的内陆人第一次见到大海,海浪的声音听着让人安静。听我天津的朋友说，看海最好是在往北的秦皇岛北戴河，下次一定！<p>是大海！</p><p><img src="https://img.promefire.top/blog-img/20240115-44c2a00f115d48b440da1216a393f5af.jpg" alt="是大海！！"></p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=954746725&bvid=BV1RW4y1D7Mw&cid=1161434252&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"> </iframe></div><p>镜头捕捉到的海鸟</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=529707372&bvid=BV1Du411Y7tB&cid=1161446244&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"> </iframe></div><h2 id="国家海洋博物馆"><a class="markdownIt-Anchor" href="#国家海洋博物馆"></a> 国家海洋博物馆</h2><blockquote>  <html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 国家海洋博物馆（National Maritime Museum of China），位于天津市滨海新区中新天津生态城中新天津生态城)滨海旅游区荣盛路与海轩道交口,由国家自然资源部与天津市人民政府共建共管，集收藏、展示、研究、教育于一体的中国唯一国家级综合性海洋博物馆。2019年5月1日，国家海洋博物馆对外开放试运营，也是全世界规模最大的海洋博物馆</blockquote><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 逛完妈祖文化园，电驴直达海博馆，唯一可惜的当日风不大，没有扑面的海风。<html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 海洋博物馆的造型还是很有特点的，三层的博物馆由四翼组成，每一翼都有一个海洋主题：古老的海洋、今日的海洋、发现之旅和恐龙年代。博物馆共有六个展区和15个相互贯通的展览大厅。<p>海博造型</p><p><img src="https://img.promefire.top/blog-img/20240115-3ad7515af3c9262b638ecbff967beaa0.jpg" alt></p><p>海博外</p><p><img src="https://img.promefire.top/blog-img/20240115-f1059867e96bdf6796a4f81404c86fbc.jpg" alt></p><p>一些展厅</p><p><img src="https://img.promefire.top/blog-img/20240115-498a7fe8e9e63d6f3730245198b3b9ac.jpg" alt></p><p>虽然是海洋博物馆，但里面的动物标本熟料好多好多</p><p><img src="https://img.promefire.top/blog-img/20240115-02cdb782e2f29486d2ba6ec55d933c4c.jpg" alt></p><p>大象！</p><p><img src="https://img.promefire.top/blog-img/20240115-c927f77676c52bf962a70ce3268b6f09.jpg" alt="动物标本2"></p><blockquote>  <html>  &nbsp; &nbsp; &nbsp; &nbsp; </html> 菊石亚纲动物是已绝灭的海生无脊椎动物，生存于中奥陶纪至晚白垩纪，因它的表面通常具有类似菊花的线纹而得名。有关菊石动物的知识主要来自保存为化石的菊石壳体和口盖以及通过对菊石在地层中的分布和保存状态的观察并基于与现代海洋中生活的鹦鹉螺属的对比而获得。</blockquote><p>菊石，虽然名字里有个石，但是是动物</p><p><img src="https://img.promefire.top/blog-img/20240115-63581cb1a36ffc7bbd484952255914fc.jpg" alt="化石标本"></p><p>出口处悬挂着一条塞满垃圾的海豚，保护环境？保护海洋？雀氏！</p><p><img src="https://img.promefire.top/blog-img/20240115-8dc09f7f384525c63091ee7c5c656bfc.JPG" alt="IMG_1383"></p><h2 id="天津之眼"><a class="markdownIt-Anchor" href="#天津之眼"></a> 天津之眼</h2><html>  &nbsp; &nbsp; &nbsp; &nbsp; </html> 去天津，怎么能不去天津之眼，去的路上离得远，以为是摩天轮没在转，怀疑是不是人不多，到了跟前发现人挤人排得满满当当的长队，甚至在美团上连票都买不到了，为我之前愚蠢的想法感到惭愧。这次没坐成，下次一定。<br><html>  &nbsp; &nbsp; &nbsp; &nbsp; </html> 天津之眼跨海河连接河北区与红桥区，两岸行人熙熙攘攘，游客居多，也有当地人饭后睡前消食散步，而每隔三五米必有一位老大爷闲来垂钓海河上，装备都挺齐全，不过沿东岸走着一圈，只发现一人桶里有收获Σ(っ °Д °;)っ。河上游船来来往往，载着游客往返，欣赏两岸风景，游船灯光耀眼，亦是我的风景。<blockquote>  <html>  &nbsp; &nbsp; &nbsp; &nbsp; </html> 摩天轮直径为110米，轮外装挂48个360度透明座舱，每个座舱可乘坐8个人，可同时供384个人观光。摩天轮旋转一周所需时间为28分钟，到达最高处时，周边景色一览无余，甚至能看到方圆40公里以内的景致，被誉为“天津之眼”。</blockquote><p><img src="https://img.promefire.top/blog-img/20240115-1fd1cec8a317e4c6f456b447b862de29.jpg" alt="天津之眼2"></p><p>沿岸风景</p><p><img src="https://img.promefire.top/blog-img/20240115-c636bf586e50b5b5842fb9097324561a.jpg" alt="12"></p><p>不愧是关哥的广角👍</p><p><img src="https://img.promefire.top/blog-img/20240115-c1e4d76aad2b87c74ddc9f9f47d71aea.jpg" alt="天津之眼"></p><h2 id="世纪钟"><a class="markdownIt-Anchor" href="#世纪钟"></a> 世纪钟</h2><blockquote><p><strong>天津世纪钟</strong>是<a href="https://www.wikiwand.com/zh/%E5%A4%A9%E6%B4%A5%E5%B8%82%E4%BA%BA%E6%B0%91%E6%94%BF%E5%BA%9C">天津市人民政府</a>为迎接二十一世纪于2000年12月25日建立的大型城市雕塑，坐落于<a href="https://www.wikiwand.com/zh/%E6%B2%B3%E5%8C%97%E5%8C%BA">河北区</a><a href="https://www.wikiwand.com/zh/%E8%A7%A3%E6%94%BE%E6%A1%A5_(%E5%A4%A9%E6%B4%A5)">解放桥</a>桥头。天津世纪钟由全金属材料构筑而成，建筑高四十米，重一百七十余吨，在钟表面的外环和内环之间镶嵌着<a href="https://www.wikiwand.com/zh/%E5%8D%81%E4%BA%8C%E6%98%9F%E5%BA%A7">十二星座</a>的青铜浮雕。<a href="https://baike.baidu.com/item/%E7%99%BD%E7%BE%8A%E5%BA%A7/2151709?fromModule=lemma_inlink">白羊座</a>放在顶端12点的部分，因为羊在中国代表吉祥；将<a href="https://baike.baidu.com/item/%E5%A4%A9%E7%A7%A4%E5%BA%A7/2609891?fromModule=lemma_inlink">天秤座</a>放在最下部6点的部位，因为秤代表公平。这些都体现了把外来的文化在排列上与<a href="https://baike.baidu.com/item/%E6%9C%AC%E5%9C%9F%E6%96%87%E5%8C%96/5110998?fromModule=lemma_inlink">本土文化</a>相融合的观念。</p></blockquote><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 当时没注意，原来两个摆分别是太阳和月亮，上摆太阳，下摆月亮。~~就是不知道这个钟会不会整点报时~~ ，会整点报时，每天第一次报时放的还是东方红，可惜不是整点去的，没听到。而且因为是白天，没有看到夜光世纪钟。<p><img src="https://img.promefire.top/blog-img/20240115-41db0066b1b20d43603fafcbc03b3f47.jpg" alt></p><h2 id="梁启超故居"><a class="markdownIt-Anchor" href="#梁启超故居"></a> 梁启超故居</h2><blockquote><p>梁启超故居位于天津<a href="https://baike.baidu.hk/item/%E6%B2%B3%E5%8C%97%E5%8D%80">河北区</a><a href="https://baike.baidu.hk/item/%E6%B0%91%E6%97%8F%E8%B7%AF">民族路</a>44号 [1] ，<a href="https://baike.baidu.hk/item/%E9%A3%B2%E5%86%B0%E5%AE%A4">饮冰室</a>位于<a href="https://baike.baidu.hk/item/%E6%B2%B3%E5%8C%97%E8%B7%AF">河北路</a>46号。这两所住宅是民国初年梁启超购买<a href="https://baike.baidu.hk/item/%E5%91%A8%E5%9C%8B%E8%B3%A2">周国贤</a>旧意租界西马路空地所建。</p><p>民族路寓所为意式两层砖木结构楼房，建于1914年。主楼为水泥外墙，塑有花饰，异型红色瓦顶，石砌高台阶，建筑面积1121平方米；书斋&quot;饮冰室&quot;为浅灰色两层洋楼，建于1924年。首层为其书房，二楼做卧室和会客。梁启超后期著述均于此完成。&quot;饮冰室&quot;系意大利建筑师白<a href="https://baike.baidu.hk/item/%E7%BE%85%E5%B0%BC">罗尼</a>欧专为其设计，造型别致典雅。建筑面积949.50平方米</p></blockquote><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 大名鼎鼎的饮冰室就在这里，公车上书、戊戌变法，再到清末民国，伟人的书房。不得不说，小洋楼就是气派。<p><img src="https://img.promefire.top/blog-img/20240115-0b8d61c2e567707bb84a068ff5e9463f.jpg" alt="梁启超纪念馆"></p><h2 id="五大道"><a class="markdownIt-Anchor" href="#五大道"></a> 五大道</h2><blockquote><p>五大道文化旅游区 [4] 是指<a href="https://baike.baidu.hk/item/%E6%88%90%E9%83%BD%E9%81%93/2376370">成都道</a>以南，<a href="https://baike.baidu.hk/item/%E9%A6%AC%E5%A0%B4%E9%81%93/8118122">马场道</a>以北，西康路以东，马场道与<a href="https://baike.baidu.hk/item/%E5%8D%97%E4%BA%AC%E8%B7%AF/5884512">南京路</a>交口以西的一片长方形区域 [11] ，是迄今<a href="https://baike.baidu.hk/item/%E5%A4%A9%E6%B4%A5/132308">天津</a>乃至中国保留最为完整的<a href="https://baike.baidu.hk/item/%E6%B4%8B%E6%A8%93/10793097">洋楼</a>建筑群，天津人把它称作“五大道”。 [8]</p><p>五大道地区拥有20世纪二三十年代建成的具有不同国家<a href="https://baike.baidu.hk/item/%E5%BB%BA%E7%AF%89%E9%A2%A8%E6%A0%BC/5350817">建筑风格</a>的花园式房屋2000多所，建筑面积达到100多万平方米。其中最具典型的300余幢风貌建筑中，英式建筑89所、意式建筑41所、<a href="https://baike.baidu.hk/item/%E6%B3%95%E5%BC%8F%E5%BB%BA%E7%AF%89/1435611">法式建筑</a>6所、德式建筑4所、西班牙式建筑3所，还有众多的文艺复兴式建筑、<a href="https://baike.baidu.hk/item/%E5%8F%A4%E5%85%B8%E4%B8%BB%E7%BE%A9%E5%BB%BA%E7%AF%89/5336501">古典主义建筑</a>、<a href="https://baike.baidu.hk/item/%E6%8A%98%E8%A1%B7%E4%B8%BB%E7%BE%A9%E5%BB%BA%E7%AF%89/283411">折衷主义建筑</a>、<a href="https://baike.baidu.hk/item/%E5%B7%B4%E6%B4%9B%E5%85%8B%E5%BC%8F%E5%BB%BA%E7%AF%89/585484">巴洛克式建筑</a>、庭院式建筑以及中西合璧式建筑等，被誉为“万国建筑博览馆”。</p></blockquote><html> &nbsp; &nbsp; &nbsp; &nbsp; </html>“汉唐看西安，明清看北京，近代百年看天津”五大道保留了近百年的好多建筑，但大部分洋楼洋房都出租了，挂牌写着公司、学校、商店什么什么的，不能进去参观。张爱玲的旧居竟然成了卖饮品的，名字还叫“爱玲咖啡”，牛逼哦。中途25/人坐了游览车，沿几条道转了一圈，严重怀疑根本没到30-40分钟，血亏。还有一种是观光游览马车，跑机动车的路上也有跑马车的，不过有点小贵。听说这里的房价20w/m^2,十平米的小屋就要二百万！！，赶上北京一环房价了，可怕。有好多以省份、城市命名的街道，在一条小巷子里找到了落满灰尘的山西路路标。路上看到一台彩票自动贩卖机，小赌怡情，买了一张十块的，中了二十，新人光环。<p><img src="https://img.promefire.top/blog-img/20240115-ed78f2a17e31242b60eaa054653f34ce.jpg" alt></p><p><img src="https://img.promefire.top/blog-img/20240115-23833d4a2d9d4c42474db0c824cd6f7e.jpg" alt="五大道2"></p><p>天津的古文化街，看到了泥人张的招牌，可惜没开门</p><p><img src="https://img.promefire.top/blog-img/20240115-af7196ee39421e57f2b99b840dea218c.jpg" alt="天津古文化街"></p><h2 id="张学良故居-津沽旧事"><a class="markdownIt-Anchor" href="#张学良故居-津沽旧事"></a> 张学良故居 + 津沽旧事</h2><blockquote>  <html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 张学良旧宅以张作霖五夫人张寿懿的名义购自法国驻天津领事馆。张学良在1920年代至1930年代来天津常住此处。1949年之后，由张寿懿之子张学铨出租管理。1956年，该建筑交由中华人民共和国国家经营。后来曾辟为少帅府大酒楼。<br>  <html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 张学良旧宅建筑面积1270．4平方米。建筑总面积1401．65平方米，总占地面积1．495市亩。有前后两幢楼房，均为砖木结构，共有楼房42间，前楼为三层带地下室，建于1921年；后楼为二层，建于1926年。前楼正面二至三层设有平台，并且层层向后退缩，外立面的柱子、栏杆、柱墩上饰雕有花盆，是一所西洋集仿式楼房</blockquote><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 1924-1931七年间，张学良和赵四小姐生活在天津。1928年，皇姑屯事件，张作霖逝世，张学良接掌东北大权，“改旗易帜”，和苏军打仗都发生在这个期间，天津少帅府的作战室还是很重要的。一楼有一架琴键全是象牙制成的钢琴，太奢侈了！在维基百科上详细了解了一下张学良的生平，不得不说是乱世出英雄，初掌大权平息奉系内不服声音，主张停止内战联合抗日。可惜张学良只有前半生，后半生都被囚禁在了台湾。<p><img src="https://img.promefire.top/blog-img/20240115-9ab7a40763bd7d94dd3ea0d931abe051.jpg" alt="张学良故居3"></p><p><img src="https://img.promefire.top/blog-img/20240115-7cc4004285e14a4333248d4e7d72fdbf.jpg" alt></p><blockquote><p>津城芳华已百年，</p><p>沽上绝代一梦还。</p><p>旧时九河无双地，</p><p>事过凝香烟云间。</p>  <html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 依托旧居原貌，建立“津沽旧事”沉浸式剧游街区，讲述天津百年商业、社会生活。穿越百年时光，回到20年代的天津，在这里可以看一看皇宫歌舞厅昔日的辉煌、逛一逛商会俱乐部、看一看仙宫理发店、鹤竹堂药铺、春和戏院……给我瞬间，还你百年。</blockquote><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 张学良故居旁边就是仿天津旧居建的“津沽旧事”沉浸式剧游街区，很有民国电影的风味，建筑风格、室内装饰、舞厅、警察局什么什么的，都很还原，还有说相声的两小伙。<p><img src="https://img.promefire.top/blog-img/20240115-53712d62bdd410d66158a9563a0c0ab5.jpg" alt="津沽旧事"></p><h2 id="瓷房子博物馆"><a class="markdownIt-Anchor" href="#瓷房子博物馆"></a> 瓷房子博物馆</h2><blockquote>  <html> &nbsp; &nbsp; &nbsp; &nbsp; </html>瓷房子位于天津市和平区赤峰道72号（近和平路商业街），是一个用古瓷器修建而成的法式洋楼。瓷房子一共有4层楼，整栋房子从里到外，除了地面是大理石铺的以外，能看到的地方都嵌上了瓷片，就连墙上也是用瓷片拼贴而成的画作。 [3]   <html> &nbsp; &nbsp; &nbsp; &nbsp; </html>瓷房子整个楼房修建一共用了7亿多片古瓷片，13000多件古瓷瓶、瓷盘、瓷碗，300多尊历代的石雕造像，300多件汉白玉石狮子，300多个明清时期的瓷猫枕，20多吨的水晶玛瑙等，它被称为一座价值连城的“中国古瓷博物馆”。</blockquote><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 从里到外，都是瓷器！大工程，实实在在的用瓷器修建的房子，网上搜了一下之前瓷房子屋顶上有一条瓷龙，貌似是已经不见了。瓷房子有四楼，扶梯蜿蜒而上，楼梯墙面都有一幅瓷器构成的名家画作，中央有一天井，不过已经是拉上了网，更有多尊石雕佛像，琳琅满目。几乎没有尊佛像前都有一堆纸币和烟，更有甚者还将烟别再了佛像耳朵上！<p><img src="https://img.promefire.top/blog-img/20240115-ce6531bb3276c28582d8dbb9ff2a2686.jpg" alt="瓷房子"></p><h2 id="天塔"><a class="markdownIt-Anchor" href="#天塔"></a> 天塔</h2><blockquote>  <html> &nbsp; &nbsp; &nbsp; &nbsp; </html>天津广播电视塔，又称天塔，为天津市电视调频广播发射中心，坐落于于天津市河西区卫津南路1号，始建于1988年6月5日，历时3年4个月，建高338米，1991年10月1日竣工时是亚洲第一高塔。天津广播电视塔建设总投资17,500万元，占地面积22公顷，建筑面积11500平方米，塔尖高415.2米，重4万余吨。截至2018年6月，天塔是中国第三高塔和世界第七高塔。天塔周围的22公顷水面名为「天塔湖」。天津天塔湖风景区被评为中国国家4A级旅游景区。天津广播电视塔也被誉为津门十景的「天塔旋云」。</blockquote><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 最后去了天塔，出了地铁站刚走到天塔下，天气就开始不对劲起来了，一边的晴天，一边是狂风+沙尘暴，快溜，下次一定。<p><img src="https://img.promefire.top/blog-img/20240115-7f60eedfd68a5bc63e1e5f8d1a51b7ed.JPG" alt="IMG_1650"></p><p><s>73M</s> 23.5M的gif，严重拖慢编译速度！</p><p><img src="https://img.promefire.top/blog-img/20240116-f78c3c2b62f994d9bdb36e6e1d27d71a.gif" alt="天塔-min"></p><h2 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h2><ul><li>天津给人最直观的感受就是发达，这才叫高楼大厦，不愧是直辖市。</li><li>滨海西和天津西离得是真远，地铁上睡了一觉还没到，第一次见到地上地铁，天津十条地铁线，地下交错搬到地上，恒河里。</li><li>这次去没见着沙滩，拖鞋白带了，不过第一次看到了海，大海啊！</li></ul><p><img src="https://img.promefire.top/blog-img/20240115-f20d9af5956063481c08b43085b45036.png" alt="高建筑"></p>]]></content>
      
      
      <categories>
          
          <category> 城市点亮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游玩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unity-ruby大冒险</title>
      <link href="//post/%E2%80%9Dunity%E7%AC%94%E8%AE%B0%E2%80%9C.html"/>
      <url>//post/%E2%80%9Dunity%E7%AC%94%E8%AE%B0%E2%80%9C.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>三天时间跟着B站教程终于把入门小游戏做完了！可喜可贺！记一下笔记</p><p>贴上B站教程：</p><p><a href="https://www.bilibili.com/video/BV1V4411W787/?spm_id_from=333.337.search-card.all.click">Ruby大冒险</a></p><hr><ul><li>切记一点：不要再场景运行时后进行修改，一定要关了之后再修改</li></ul><p>1、在人物属性刚体界面冻结Z轴旋转，可以使人物刚体碰撞时不旋转</p><p><img src="https://img.promefire.top/blog-img/20240110-518bcbf3446c71a0f30107eae80da5cf.png" alt="image-20230602103837705"></p><p>2、碰撞抖动问题</p><p>要使用刚体更新位置</p><p>3、相机跟随</p><p>窗口–&gt;包管理器—&gt;包：Unity注册表—&gt;cinemachine. 安装完成后可以在菜单游戏对象中找到。创建一个2d cinema</p><p>4、设置水面不能走</p><p>将除水面的其他tile右侧的碰撞器类型设置为无</p><p><img src="https://img.promefire.top/blog-img/20240110-6b7d1714d03da94ec2a23a1d38642fcd.png" alt="image-20230602111828620"></p><p>5、合并一些碰撞格</p><p>给tilemap添加组件 Composite Collider 2D,</p><p>在由复合使用上打勾</p><p><img src="https://img.promefire.top/blog-img/20240110-e7b9fb558d0a2063087fc7b8865d6a9b.png" alt="image-20230602112421994"></p><ul><li>记得要在地图的Rigibody 2D中把重力关掉（只关这一个没用），把地图刚体设置为静态</li></ul><p><img src="https://img.promefire.top/blog-img/20240110-fb841344318cffe5e9f4d3e5dbf4e201.png" alt="image-20230602112659463"></p><p>6、取消地图边界外视野</p><p>相机属性里添加一个cinemachineConfiner</p><p><img src="https://img.promefire.top/blog-img/20240110-30df5777989ae988596a8c652705526e.png" alt="image-20230602112830954"></p><p>新建一个CameraConfiner</p><p><img src="https://img.promefire.top/blog-img/20240110-e417887ddbaa6df0860b668e94762e3f.png" alt="image-20230602113021563"></p><p>属性里添加一个可编程的碰撞体</p><p><img src="/post/%E2%80%9Dunity%E7%AC%94%E8%AE%B0%E2%80%9C/image-20230602113218724.png" alt="image-20230602113218724"></p><p>点击编辑碰撞器，框出边界</p><p>只是触发，要不然会和人物产生碰撞</p><p><img src="https://img.promefire.top/blog-img/20240110-18556ff956efaa5fd3c27f9fecc9e2ec.png" alt="image-20230602113519684"></p><ul><li>要把新建成的CameraConfiner拖动到2D相机的Bounding Shape 2D，要把框好的边界赋给相机，要不然就只是一个文件</li></ul><p>7、使用math函数时，直接添加了<code>using System;</code>添加``using System.Math`会报错，不晓得什么情况</p><p>8、预置体，树木、草莓等元素设置好脚本和碰撞体积以后，想要批量复制，就用到了预置体，再Assets下新建一个prefabs文件夹，将做好的元素放入其中，如果变蓝了就说明已经是预置体了</p><p>9、</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#是进入有伤害void OnTriggerEnter2D(Collider2D other)&#123;&#125;#呆在区域内一直有伤害void OnTriggerStay2D(Collider2D other)&#123;&#125;</code></pre><p>10、</p><p>报错：[ AnimationEvent has no function name specified!</p><p>在动画编辑器中添加了动画事件但没有进行后续处理，删除即可</p><p><img src="https://img.promefire.top/blog-img/20240110-b4dbe3d241499fb18a0373a5cd6d7733.png" alt="image-20230604112938771"></p><p>11、图层之间不希望碰撞，在项目设置–&gt; 2d物理中把√去掉</p><p><img src="https://img.promefire.top/blog-img/20240110-e342164fc5e8b937cc2c2034291a293e.png" alt="image-20230604140038562"></p><p>12、</p><p>在对象刚生成的时候就会执行Awake方法，在start方法之前执行。</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">Void Awake()&#123;&#125;</code></pre><p>发射子弹的时候，不能用start()方法</p><p>13、</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Destroy(this.gameObject,2f);</code></pre><p>参数： 要销毁的游戏对象，经过多长时间销毁。</p><p>14、</p><p>这个不行</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">EnemyController ec &#x3D; other.GetComponent&lt;EnemyController&gt;();</code></pre><p>要加一个gameObject</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">EnemyController ec &#x3D; other.gameObject.GetComponent&lt;EnemyController&gt;();</code></pre><p>15、</p><p>启动特定动画</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">private Animator anim;&#x2F;&#x2F;获取动画组件void Start()    &#123;        .        .        .        anim &#x3D; GetComponent&lt;Animator&gt;();    &#125;void something()&#123;    anim.SetTrigger(&quot;Launch&quot;);&#125;</code></pre><p>16、特效</p><p><img src="https://img.promefire.top/blog-img/20240110-bc407720c1f1a380bb3ce8b6c2ff6324.png" alt="image-20230604144025643"></p><p>0-2可以在两张贴图中随机</p><p><img src="https://img.promefire.top/blog-img/20240110-2dde14aa2aac267f015d182ad99ac318.png" alt="image-20230604143959187"></p><p>生命周期颜色，烟冒到上面会变淡</p><p><img src="https://img.promefire.top/blog-img/20240110-bdf40630f7a6913a350c9084637f4c68.png" alt="image-20230604144837441"></p><p>打败敌人后，停止特效</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public ParticleSystem brokenEffect;&#x2F;&#x2F;获取特效组件public void Fixed()&#123;    .       .           if(brokenEffect.isPlaying &#x3D;&#x3D; true)&#123;           brokenEffect.Stop();       &#125;    .       .   &#125;</code></pre><p><img src="https://img.promefire.top/blog-img/20240110-1eda2b8012da3d8aa95495cc17aabd61.png" alt="image-20230604145736865"></p><p>17、画布</p><p><img src="https://img.promefire.top/blog-img/20240110-dff000b023ed07e93095ceacb5cdfaf8.png" alt="image-20230604154233728"></p><p>18、音乐组件<code>Audio source</code></p><p>19、离敌人远声音小，声音改成3D，最大距离改小</p><p><img src="https://img.promefire.top/blog-img/20240110-c780ffcb7294ef963acf8328d4c39db5.png" alt="image-20230605093848619"></p><p>20、UImanager中Text组件托不上去</p><p>原因是组件类型是Text TMP，而代码中是Text，把代码改成:</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using TMPro;public TMP_Text progressText;</code></pre><p>21、地图编辑</p><p>窗口—》2d–》平铺调色板</p><p>22、</p><p>vscode代码补全问题<a href="https://blog.csdn.net/G0rgeoustray/article/details/106754628">https://blog.csdn.net/G0rgeoustray/article/details/106754628</a></p><p>23、射线检测</p><p>射线未能检测到碰撞体：最终发现问题是由于使用了错误的<code>Physics.Raycast</code>方法而不是<code>Physics2D.Raycast</code>。由于你的游戏对象是2D的，因此需要使用2D版本的射线检测方法。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">foreach (Vector3 direction in directions)   &#123;       RaycastHit2D[] hits &#x3D; Physics2D.RaycastAll(explosionPosition, direction, power);           Debug.DrawRay(explosionPosition, direction * power, Color.red, 1f); &#x2F;&#x2F; 打印射线起始点和终点           foreach (RaycastHit2D hit in hits)           &#123;               if (hit.collider.CompareTag(&quot;iceCube&quot;))               &#123;                   Debug.Log(&quot;有冰块！！！&quot;);                   Destroy(hit.collider.gameObject);               &#125;           &#125;&#125;</code></pre><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码：</h2><p>1、PlayController.cs</p><ul><li>玩家</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System.Collections;using System.Collections.Generic;using UnityEngine;using System;public class PlayerController : MonoBehaviour&#123;    &#x2F;&#x2F; Start is called before the first frame update    public float speed &#x3D; 5f;    private int maxHealth &#x3D; 5;    private int currentHealth ;    &#x2F;&#x2F;玩家的朝向    private   Vector2 lookDirection &#x3D; new Vector2(1,0);&#x2F;&#x2F;默认朝右      Rigidbody2D rbody;&#x2F;&#x2F;刚体组件    public int MyMaxHealth&#123;get &#123;return maxHealth;&#125;&#125;    public int MyCurrentHealth&#123;get&#123;return currentHealth;&#125;&#125;    private float invincibleTime &#x3D; 2f;&#x2F;&#x2F;无敌时间2秒    private float invincibleTimer;&#x2F;&#x2F;无敌计时器    private bool isInvincible;&#x2F;&#x2F;是否无敌    private Animator anim;&#x2F;&#x2F;获取动画组件    public GameObject bulletPrefab;    &#x2F;&#x2F;音效    public AudioClip hitClip; &#x2F;&#x2F;受伤    public AudioClip bulletClip;    public int curBulletCount;    public int maxBulletCount &#x3D; 99;    void Start()    &#123;        rbody &#x3D; GetComponent&lt;Rigidbody2D&gt;();        invincibleTimer &#x3D; 0;        currentHealth &#x3D; maxHealth;        curBulletCount  &#x3D; 2;        anim &#x3D; GetComponent&lt;Animator&gt;();        UImanager.instance.UpdateHealthBar(currentHealth,maxHealth);&#x2F;&#x2F;更新血条        UImanager.instance.UpdateBulletCount(curBulletCount,maxBulletCount);    &#125;    &#x2F;&#x2F; Update is called once per frame    void Update()    &#123;        &#x2F;&#x2F; transform.Translate(transform.right * speed * Time.deltaTime);        float moveX &#x3D; Input.GetAxisRaw(&quot;Horizontal&quot;);&#x2F;&#x2F;控制水平        float moveY &#x3D; Input.GetAxisRaw(&quot;Vertical&quot;);&#x2F;&#x2F;W:1,S:-1;        &#x2F;&#x2F;        Vector2 moveVector &#x3D; new Vector2(moveX,moveY);        if(moveVector.x !&#x3D; 0 || moveVector.y !&#x3D; 0 )&#123;            lookDirection &#x3D; moveVector;        &#125;        anim.SetFloat(&quot;Look X&quot;,lookDirection.x);        anim.SetFloat(&quot;Look Y&quot;,lookDirection.y);        anim.SetFloat(&quot;Speed&quot;,moveVector.magnitude);&#x2F;&#x2F;取向量长度                &#x2F;&#x2F;移动        Vector2 position &#x3D; rbody.position;        &#x2F;&#x2F; position.x +&#x3D; moveX * speed * Time.deltaTime;        &#x2F;&#x2F; position.y +&#x3D; moveY * speed * Time.deltaTime;        &#x2F;&#x2F; transform.position &#x3D; position;  更新组件位置        position +&#x3D; moveVector * speed *Time.deltaTime;        rbody.MovePosition(position);&#x2F;&#x2F;更新刚体位置        &#x2F;&#x2F;无敌计时        if(isInvincible)&#123;        invincibleTimer -&#x3D; Time.deltaTime;        if(invincibleTimer &lt; 0)&#123;            isInvincible &#x3D; false;        &#125;    &#125;      &#x2F;&#x2F;按下J建进行攻击    if(Input.GetKeyDown(KeyCode.J) &amp;&amp; curBulletCount &gt; 0)&#123;        ChangeBulletCount(-1);        anim.SetTrigger(&quot;Launch&quot;);        GameObject bullet &#x3D; Instantiate(bulletPrefab,rbody.position + Vector2.up * 0.5f,Quaternion.identity);&#x2F;&#x2F;参数分别是对象、位置、方向（默认方向）        AudioManager.instance.AudioPlay(bulletClip);&#x2F;&#x2F;播放音效        BulletController bc &#x3D; bullet.GetComponent&lt;BulletController&gt;();        if(bc !&#x3D; null)&#123;            bc.move(lookDirection,300);                    &#125;    &#125;    &#x2F;&#x2F;按下E建与npc交互    if(Input.GetKeyDown(KeyCode.E))&#123;        RaycastHit2D hit &#x3D; Physics2D.Raycast(rbody.position,lookDirection,2f,LayerMask.GetMask(&quot;NPC&quot;));&#x2F;&#x2F;layerMask根据名字检测层级        if(hit.collider !&#x3D; null)&#123;            Debug.Log(&quot;hit npc!!&quot;);            NpcManager npc &#x3D; hit.collider.GetComponent&lt;NpcManager&gt;();            if(npc !&#x3D; null)&#123;                npc.show();            &#125;        &#125;    &#125;    &#125;    public void ChangeHealth(int amount)&#123;        &#x2F;&#x2F; 伤害是传入负值的，受到伤害，如果是无敌状态，就不进行伤害判定，反之，开启无敌状态        if(amount &lt; 0)&#123;            if(isInvincible)&#123;                return;            &#125;            anim.SetTrigger(&quot;Hit&quot;);            AudioManager.instance.AudioPlay(hitClip);&#x2F;&#x2F;播放音效            isInvincible &#x3D; true;            invincibleTimer &#x3D; invincibleTime;&#x2F;&#x2F;重置无敌时间                    &#125;        &#x2F;&#x2F; 约束一下玩家生命值，0---max        currentHealth &#x3D; Math.Clamp(currentHealth + amount ,0,maxHealth);        UImanager.instance.UpdateHealthBar(currentHealth,maxHealth);&#x2F;&#x2F;更新血条        Debug.Log(currentHealth + &quot;&#x2F;&quot; + maxHealth);    &#125;    public void ChangeBulletCount(int amount)&#123;        curBulletCount &#x3D; Math.Clamp(curBulletCount + amount ,0,maxBulletCount);        UImanager.instance.UpdateBulletCount(curBulletCount,maxBulletCount);    &#125;&#125;</code></pre><p>2、EnemyController.cs</p><ul><li>敌人相关</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System.Collections;using System.Collections.Generic;using UnityEngine;using System;public class EnemyController : MonoBehaviour&#123;    public int speed &#x3D; 3;    public float changeDirectionTime &#x3D; 2f;&#x2F;&#x2F;改变方向的时间。    public float changeTimer;&#x2F;&#x2F;改变方向的计时器     private int Health &#x3D; 5;    public int getHealth&#123;get &#123;return Health;&#125;&#125;    private bool isDead;    public ParticleSystem brokenEffect;&#x2F;&#x2F;获取特效组件    &#x2F;&#x2F; private Health;    private Rigidbody2D rbody;    public bool isVertical;    private Vector2 moveDirection;    private Animator anim;&#x2F;&#x2F;获取动画组件    public AudioClip robotFixedClip;    &#x2F;&#x2F; public AudioClip robotWalkClip;    &#x2F;&#x2F; Start is called before the first frame update    void Start()    &#123;        rbody &#x3D; GetComponent&lt;Rigidbody2D&gt;();        anim &#x3D; GetComponent&lt;Animator&gt;();        moveDirection &#x3D; isVertical ? Vector2.up : Vector2.right;        changeTimer &#x3D; changeDirectionTime;        isDead &#x3D; false;                &#125;    &#x2F;&#x2F; Update is called once per frame    void Update()    &#123;        if(isDead)&#123;return;&#125;&#x2F;&#x2F;挂了就别移动了        changeTimer -&#x3D; Time.deltaTime;        if(changeTimer &lt; 0)&#123;            moveDirection *&#x3D; -1;            changeTimer &#x3D; changeDirectionTime;        &#125;        Vector2 position &#x3D; rbody.position;        position.x +&#x3D; moveDirection.x * speed * Time.deltaTime;        position.y +&#x3D; moveDirection.y * speed * Time.deltaTime;        rbody.MovePosition(position);        anim.SetFloat(&quot;moveX&quot;,moveDirection.x);        anim.SetFloat(&quot;moveY&quot;,moveDirection.y);    &#125;    &#x2F;&#x2F;怪物掉血    public void ChangeHealth(int amount)&#123;        Health &#x3D; Math.Clamp(Health + amount ,0,Health);        if(Health &#x3D;&#x3D; 0)&#123;            Fixed();            Destroy(this.gameObject,3f);        &#125;        Debug.Log(Health);    &#125;    &#x2F;&#x2F;播放死亡动画    public void Fixed()&#123;        isDead &#x3D; true;        if(brokenEffect.isPlaying &#x3D;&#x3D; true)&#123;            brokenEffect.Stop();        &#125;        AudioManager.instance.AudioPlay(robotFixedClip);&#x2F;&#x2F;播放音效        &#x2F;&#x2F;死了就没碰撞掉血了        rbody.simulated &#x3D; false;        anim.SetTrigger(&quot;fix&quot;);    &#125;        private void OnCollisionEnter2D(Collision2D other) &#123;        PlayerController pc &#x3D; other.gameObject.GetComponent&lt;PlayerController&gt;();        if(pc !&#x3D; null)&#123;            pc.ChangeHealth(-1);        &#125;    &#125;&#125;</code></pre><p>3、Collectible.cs</p><ul><li>草莓</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using static System.Console;using System.Collections;using System.Collections.Generic;using UnityEngine;using System;&#x2F;&#x2F; using System.Math;public class Collectible : MonoBehaviour&#123;        public ParticleSystem collectEffect;    public AudioClip collectClip;    &#x2F;&#x2F; Start is called before the first frame update    void Start()    &#123;            &#125;    &#x2F;&#x2F; Update is called once per frame    void Update()    &#123;            &#125;    &#x2F;&#x2F; 碰撞检测相关类    &#x2F;&#x2F; &lt;param name&#x3D;&quot;other&quot;&gt;&lt;&#x2F;param&gt;    void OnTriggerEnter2D(Collider2D other)&#123;        &#x2F;&#x2F;检测一下与草莓碰撞的物体有没有挂载playercontroller脚本        PlayerController pc &#x3D; other.GetComponent&lt;PlayerController&gt;();        if(pc !&#x3D; null)&#123;            if(pc.MyCurrentHealth &lt; pc.MyMaxHealth)&#123;                        pc.ChangeHealth(1);                                  Instantiate(collectEffect,transform.position,Quaternion.identity);            AudioManager.instance.AudioPlay(collectClip);&#x2F;&#x2F;播放音效            Destroy(this.gameObject);            &#125;                        &#x2F;&#x2F; Debug.Log(&quot;玩家碰到草莓&quot;);        &#125;    &#125;&#125;</code></pre><p>4、BulletController.cs</p><ul><li>子弹相关</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System.Collections;using System.Collections.Generic;using UnityEngine;public class BulletController : MonoBehaviour&#123;    Rigidbody2D rbody;        public AudioClip hitEnemyClip;    &#x2F;&#x2F; Start is called before the first frame update    void Awake()    &#123;        rbody &#x3D; GetComponent&lt;Rigidbody2D&gt;();        Destroy(this.gameObject,2f);    &#125;    &#x2F;&#x2F; Update is called once per frame    void Update()    &#123;            &#125;    public void move(Vector2 moveDirection,float moveForce)&#123;        rbody.AddForce(moveDirection * moveForce);&#x2F;&#x2F;施加一个移动方向的力    &#125;    private void OnCollisionEnter2D(Collision2D other) &#123;        EnemyController ec &#x3D; other.gameObject.GetComponent&lt;EnemyController&gt;();        if(ec !&#x3D; null)&#123;            ec.ChangeHealth(-1);                    &#125;        AudioManager.instance.AudioPlay(hitEnemyClip);&#x2F;&#x2F;播放音效        Destroy(this.gameObject);&#x2F;&#x2F;碰到就销毁            &#125; &#125;</code></pre><p>5、BulletBox.cs</p><ul><li>子弹袋</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System.Collections;using System.Collections.Generic;using UnityEngine;public class BulletBox : MonoBehaviour&#123;    public int bulletCount &#x3D; 10;    public ParticleSystem collectEffect;    public AudioClip collectClip;    &#x2F;&#x2F; Start is called before the first frame update    void Start()    &#123;            &#125;    &#x2F;&#x2F; Update is called once per frame    void Update()    &#123;            &#125;    void OnTriggerEnter2D(Collider2D other)&#123;        PlayerController pc &#x3D; other.GetComponent&lt;PlayerController&gt;();        if(pc !&#x3D; null)&#123;            if(pc.curBulletCount &lt; pc.maxBulletCount)&#123;            pc.ChangeBulletCount(bulletCount);            Instantiate(collectEffect,transform.position,Quaternion.identity);            &#x2F;&#x2F; AudioManager.instance.AudioPlay(collectClip);&#x2F;&#x2F;播放音效            Destroy(this.gameObject);        &#125;        &#125;    &#125;&#125;</code></pre><p>6、UImanager.cs</p><ul><li>UI界面（血条、子弹数量）</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.UI;using TMPro;public class UImanager : MonoBehaviour&#123;        public TMP_Text  bulletCountText;    public static UImanager instance&#123;get;  private set;&#125;    void Start()&#123;        instance &#x3D; this;    &#125;    public Image healthBar;&#x2F;&#x2F;角色血条    public void UpdateHealthBar(int curAmount,int maxAmount)&#123;        healthBar.fillAmount &#x3D; (float)curAmount &#x2F; (float)maxAmount;    &#125;    &#x2F;&#x2F;更新子弹数量文本    public void UpdateBulletCount(int curAmount,int maxAmount)&#123;        bulletCountText.text &#x3D; curAmount.ToString() + &quot; &#x2F; &quot; + maxAmount.ToString();    &#125;&#125;</code></pre><p>7、AudioManager.cs</p><ul><li>音效</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System.Collections;using System.Collections.Generic;using UnityEngine;public class AudioManager : MonoBehaviour&#123;    public static AudioManager instance &#123;get; private set;&#125;    private AudioSource audioS;    &#x2F;&#x2F; Start is called before the first frame update    void Start()    &#123;        instance &#x3D; this;        audioS &#x3D; GetComponent&lt;AudioSource&gt;();    &#125;    &#x2F;&#x2F; Update is called once per frame    void Update()    &#123;            &#125;    public void AudioPlay(AudioClip clip)&#123;        audioS.PlayOneShot(clip);    &#125;&#125;</code></pre><p>8、NpcManager.cs</p><ul><li>NPC对话框显示</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.UI;public class NpcManager : MonoBehaviour&#123;    public GameObject dialogImage;    public GameObject tipImage;    public float showTime &#x3D; 4f;    public float showTimer;&#x2F;&#x2F;计时器    &#x2F;&#x2F; Start is called before the first frame update    void Start()    &#123;        showTimer &#x3D; -1;        tipImage.SetActive(true);        dialogImage.SetActive(false);    &#125;    &#x2F;&#x2F; Update is called once per frame    void Update()    &#123;        showTimer -&#x3D; Time.deltaTime;        if(showTimer &lt; 0)&#123;            dialogImage.SetActive(false);            tipImage.SetActive(true);        &#125;    &#125;    &#x2F;&#x2F;显示对话框    public void show()&#123;        showTimer &#x3D; showTime;        tipImage.SetActive(false);        dialogImage.SetActive(true);    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unityProject </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>城市点亮---石家庄</title>
      <link href="//post/%E5%9F%8E%E5%B8%82%E7%82%B9%E4%BA%AE-%E7%9F%B3%E5%AE%B6%E5%BA%84.html"/>
      <url>//post/%E5%9F%8E%E5%B8%82%E7%82%B9%E4%BA%AE-%E7%9F%B3%E5%AE%B6%E5%BA%84.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​从保定到石家庄的列车，窗外多是平原耕地农田，明显的华北平原特征。而处于黄土高原的山西，视野中长久不变的是远方的群山。九点半和小伙伴在石家庄站汇合，离上一次见面已将近一年，天空下着点蒙蒙细雨，微风，有点冷，应该带件外套的。</p><p><img src="https://img.promefire.top/blog-img/20240115-103b24f9d43b2833e5602a26c8708fca.jpeg" alt="IMG_0929.jpeg"></p><p>​想着十点多吃午饭有点早，就找了家麦当劳准备点杯热咖啡，一开始点美式卡布奇诺，服务员说是咋咋然后做不了了，给我们换个其他咖啡+热牛奶，等了一会又说设备坏了做不了热的，大早上的喝冷牛奶着实不太行，准备退单走人了，到门口被服务员拉回来说不好意思啥啥的然后送了我们一人一杯美式咖啡。我就想说一开始第一次做不了的时候为什么不给我们换成这个最后送的这两杯咖啡呢。      <img src="https://img.promefire.top/blog-img/20240115-277d556fee18ea7611da7feca9a6aded.jpeg" alt="IMG_0939.jpeg"></p><p>​中午找了家潮汕牛肉火锅，不得不说潮汕的牛肉丸真的好吃，不是火锅丸能比的，其他倒也中规中矩，量也不多。话说潮汕地区有地方养牛吗，还是从其他地方买的<img src="https://img.promefire.top/blog-img/20240115-803b77afd90a6cf2d638e063b0a55e02.jpeg" alt="IMG_0942.jpeg">（正常店里这一大瓶就应该酸梅汤而不是醋）</p><p>商量了商量之后，决定奢侈一回，定了一间电竞电影房，三百三十块，确实贵。</p><p><img src="https://img.promefire.top/blog-img/20240115-acf886074c899057fb5e43a88c873f45.jpeg" alt="IMG_1038.jpeg"></p><p>​到店以后觉得emmm……有点小，翻相册发现没有拍全貌，电影是投影仪放的，总觉得有点糊，搜了一下投影仪的牌子至少是3000块的，不应该啊。最后设置里亮度拉满，其实也还行。电脑的配置是3070，听朋友说是垃圾键盘和鼠标，倒是电竞椅挺贵1000。新思路！我感觉可以在网吧跑代码，网吧的显卡配置杠杠的。</p><p><img src="https://img.promefire.top/blog-img/20240115-f29d4783832b5dcacf0156319d8ceb8a.jpeg" alt="IMG_0954.jpeg"></p><p><img src="https://img.promefire.top/blog-img/20240115-18da083eec0d1fc44e70ff5cf9170e80.jpeg" alt="IMG_0959.jpeg"></p><p>​晚上一点睡的觉，想着一觉睡到天亮，结果半夜4:50多被痒醒了，手掌上被咬了一个疙瘩，晚上窗户没关纱窗，直接拉了窗帘。然后又醒了好几次，没睡好，呜呜呜。</p><p>看美团上是全天都能进入，两点多来的时候排了这么长的队<br><img src="https://img.promefire.top/blog-img/20240115-5359a88a1c3467fecec3a3425cd7fe6f.jpeg" alt="IMG_0974.jpeg"></p><h1 id="河北博物馆"><a class="markdownIt-Anchor" href="#河北博物馆"></a> 河北博物馆</h1><p>博物馆分北区和南区，一开始去了北区，空空如也，难道时因为文物展品太少了，塞不满北区，</p><p><img src="https://img.promefire.top/blog-img/20240115-62a445b5f0f7468fa85d69946ca67299.jpeg" alt="IMG_0990.jpeg">琉璃工艺品，中间这个葫芦蛮好看的。<br><img src="https://img.promefire.top/blog-img/20240115-516f8a76ff89a2554a0777e6b558a3d1.jpeg" alt="IMG_0983.jpeg">秸秆制品，黄鹤楼<br><img src="https://img.promefire.top/blog-img/20240115-e5704c8e4640ea64b78b0752f6ade699.jpeg" alt="IMG_0984.jpeg">黄袍加身！<br><img src="https://img.promefire.top/blog-img/20240115-95b43569bf92d62f79de88365e8717db.jpeg" alt="IMG_0985.jpeg"></p><p>燕京八绝<br>旁边还有梨园文化,兴趣不大,没有过去看<br></p><p><img src="https://img.promefire.top/blog-img/20240115-ddc08bb1875bc8f6967aa5d58c5aa969.jpeg" alt="IMG_0987(1).JPG"></p><h2 id="大汉绝唱-满城汉墓"><a class="markdownIt-Anchor" href="#大汉绝唱-满城汉墓"></a> 大汉绝唱----满城汉墓</h2><p>也就是中山靖王刘胜墓，刘皇叔的老祖宗墓被挖了！</p><blockquote><p>刘胜（？－前113年） ，男，汉族，汉景帝<a href="https://baike.baidu.com/item/%E5%88%98%E5%90%AF/1629700?fromModule=lemma_inlink">刘启</a>之子，汉武帝<a href="https://baike.baidu.com/item/%E5%88%98%E5%BD%BB?fromModule=lemma_inlink">刘彻</a>异母兄，母为<a href="https://baike.baidu.com/item/%E8%B4%BE%E5%A4%AB%E4%BA%BA/10163848?fromModule=lemma_inlink">贾夫人</a> ，<a href="https://baike.baidu.com/item/%E8%A5%BF%E6%B1%89/394557?fromModule=lemma_inlink">西汉</a>中山靖王。<br>前元三年（前154年），受封<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%B1%B1%E7%8E%8B?fromModule=lemma_inlink">中山王</a>。后元三年（前141年），汉景帝去世，<a href="https://baike.baidu.com/item/%E6%B1%89%E6%AD%A6%E5%B8%9D/338322?fromModule=lemma_inlink">汉武帝</a>即位。汉武帝即位之初，大臣们鉴于<a href="https://baike.baidu.com/item/%E5%90%B4%E6%A5%9A%E4%B8%83%E5%9B%BD%E4%B9%8B%E4%B9%B1/446166?fromModule=lemma_inlink">吴楚七国之乱</a>的教训，对诸侯王进行百般挑剔，动不动就上告诸侯王的过失。刘胜便把官吏侵夺欺凌诸侯王之事，全部奏报<a href="https://baike.baidu.com/item/%E6%B1%89%E6%AD%A6%E5%B8%9D/338322?fromModule=lemma_inlink">汉武帝</a>，汉武帝就增加诸侯的礼遇，废止官吏检举诸侯王之事，对诸侯王施行优侍亲属的恩惠。<br>刘胜为人喜好酒色，有子孙一百二十余人，并认为诸侯王应当日听音乐，玩赏歌舞美女。<a href="https://baike.baidu.com/item/%E5%85%83%E9%BC%8E/2477115?fromModule=lemma_inlink">元鼎</a>四年（公元前113年），刘胜去世，终年五十三岁，葬于河北省保定市<a href="https://baike.baidu.com/item/%E6%BB%A1%E5%9F%8E%E5%8C%BA/17541705?fromModule=lemma_inlink">满城区</a>陵山之上，谥号靖，史称中山靖王。</p></blockquote><p><img src="https://img.promefire.top/blog-img/20240115-52e75a5827f13aa4fd4a0d480ce4d47c.jpeg" alt="IMG_0991.JPG">金缕玉衣，镇馆之宝！</p><blockquote><p>“玉衣”又称“玉匣”“玉柙”，使用于两汉时期，是一种高级殓服，根据编缀缕线的不同，又可分为金缕玉衣、银缕玉衣、铜缕玉衣和丝缕玉衣，其中金缕玉衣等级最高，通常只有皇帝和诸侯王可以使用</p></blockquote><blockquote><p>满城一号汉墓的这套金缕玉衣是考古工作中首次发现保存完整的玉衣，它的发现终于解开了汉代以来长期存在的玉衣之谜，具有重大价值，是研究汉代皇室贵族丧葬制度的重要实物资料，因此也在2002年被国家列为首批64件（套）禁止出境展览的文物之一。</p></blockquote><p>​汉武帝时期学黄老之术的杨王孙所说“口含玉石，欲化不得，郁为枯腊，千载之后，棺椁朽腐，乃得归土，就其真宅”。古人想借助腐的玉来使尸身不腐，穿着金缕玉衣下葬的刘胜尸体出土时都已经腐烂，只剩下一些灰褐色的骨渣和牙齿的珐琅质外壳碎片，不朽的只有金缕玉衣<br><img src="https://img.promefire.top/blog-img/20240115-7880d3301d94d3800bff49eec341daad.jpeg" alt="IMG_0993.JPG"><img src="https://img.promefire.top/blog-img/20240115-3b71dcaf48db744afd8957acb1244a96.jpeg" alt="IMG_0995.JPG"><img src="https://img.promefire.top/blog-img/20240115-505cd5f6910f382b215157b61bdf1732.jpeg" alt="IMG_0997.JPG">汉代玉器<br><img src="https://img.promefire.top/blog-img/20240115-01da67e6fc4c08230cb994300e7b2df8.jpeg" alt="IMG_0998.jpeg"><img src="https://img.promefire.top/blog-img/20240115-3e6ac0e56c8de6a62f18725d98e80383.jpeg" alt="IMG_0999.JPG">后人仿制的汉车<br><img src="https://img.promefire.top/blog-img/20240115-f812570d2d79098447167cccb732de45.jpeg" alt="IMG_1002.JPG">还有一件镇馆之宝–错金博山炉没看到,官网上找了张图</p><blockquote><p>这是西汉时作为香薰、薰炉用的青铜器,因为造型象征的是传说中的海上仙山一博山,所以叫做博山炉。现藏于河北博物院, 是镇馆宝物之一, 1993年就被已经被定为国宝级文物了。</p></blockquote><p><img src="https://img.promefire.top/blog-img/20240115-533cbbd0c1d7cf54af00f65c77af0252.png" alt="pic.png"></p><h2 id="战国雄风古中山国"><a class="markdownIt-Anchor" href="#战国雄风古中山国"></a> 战国雄风—古中山国</h2><p>这个没怎么看，逛的时候还以为和刘胜墓一起的.<br><img src="https://img.promefire.top/blog-img/20240115-6c185f172aec7cfdec4cc9ccc130b72b.jpeg" alt="IMG_0992.JPG"></p><h2 id="石器时代的河北"><a class="markdownIt-Anchor" href="#石器时代的河北"></a> 石器时代的河北</h2><p><img src="https://img.promefire.top/blog-img/20240115-347afaac43758f286cdd8afd993be118.jpeg" alt="IMG_1003.JPG"></p><p>​只拍了一张猛犸象骨架，放置在入口的右偏后一点点方向，从入口进来一抬眼看到高达三米多四米的猛犸象骨骼，还是有点震撼的。<br></p><p><img src="https://img.promefire.top/blog-img/20240115-72a11ab2146c54449ad7b5a59480c548.jpeg" alt="IMG_1004.JPG"></p><p>这个设置不错，石器时代的石头。<br></p><p><img src="https://img.promefire.top/blog-img/20240115-8e832d4e6f2151be9b8a2fd49f9586b4.jpeg" alt="IMG_1007.JPG"></p><h2 id="河北商代文化"><a class="markdownIt-Anchor" href="#河北商代文化"></a> 河北商代文化</h2><p><img src="https://img.promefire.top/blog-img/20240115-686531acb07f0e2aa6322be492f4bfd6.jpeg" alt="IMG_1009.JPG">商代嘛，最出名的就是青铜器了，入口的标志也是一个青铜鼎的形状。<br>商代<strong>夔纹蝉纹铜鼎</strong></p><blockquote><p>夔  [kuí]</p><p>夔，是中国神话传说中的<a href="https://baike.baidu.com/item/%E4%B8%80%E6%9D%A1%E8%85%BF/53776076?fromModule=lemma_inlink">一条腿</a>的怪物。出自《山海经·大荒经》。相传为尧、舜时代的国家<a href="https://baike.baidu.com/item/%E4%B9%90%E5%AE%98/8961317?fromModule=lemma_inlink">乐官</a>。传至商代及西周时期传说中一种近似龙的动物，形象多为无角、一足、口张开、尾上卷，在钟鼎<a href="https://baike.baidu.com/item/%E5%BD%9D%E5%99%A8/5867978?fromModule=lemma_inlink">彝器</a>等青铜器上经常会释有<a href="https://baike.baidu.com/item/%E5%A4%94%E7%BA%B9/9890407?fromModule=lemma_inlink">夔纹</a>。外形像夔声音如雷，仅有一足。据说<a href="https://baike.baidu.com/item/%E9%BB%84%E5%B8%9D/118887?fromModule=lemma_inlink">黄帝</a>依照<a href="https://baike.baidu.com/item/%E4%B9%9D%E5%A4%A9%E7%8E%84%E5%A5%B3/1482?fromModule=lemma_inlink">九天玄女</a>的指示将夔杀死，以其皮制成<a href="https://baike.baidu.com/item/%E6%88%98%E9%BC%93/7851959?fromModule=lemma_inlink">战鼓</a>。<br>异兽说许为讹传,<a href="https://baike.baidu.com/item/%E3%80%8A%E9%9F%A9%E9%9D%9E%E5%AD%90%C2%B7%E5%A4%96%E5%82%A8%E8%AF%B4%E5%B7%A6%E4%B8%8B%E3%80%8B?fromModule=lemma_inlink">《韩非子·外储说左下》</a>有如下记载：“<a href="https://baike.baidu.com/item/%E9%B2%81%E5%93%80%E5%85%AC/4400425?fromModule=lemma_inlink">鲁哀公</a>问于<a href="https://baike.baidu.com/item/%E5%AD%94%E5%AD%90/1584?fromModule=lemma_inlink">孔子</a>曰：‘吾闻古者有夔一足，其果信有一足乎？’孔子对曰：‘不也，夔非一足也。夔者忿戾恶心，人多不说喜也。虽然，其所以得免于人害者，以其信也。人皆曰：“独此一，足矣。”夔非一足也，一而足也。’哀公曰：‘审而是，固足矣。’”可辨.</p></blockquote><p><img src="https://img.promefire.top/blog-img/20240115-438d483a7c7dbfd1cec2db1e8ea82ea5.jpeg" alt="IMG_1010.JPG"></p><blockquote><p>斝（jiǎ）</p><p>（名词）古代一种铜制的酒器。《诗经·大雅·行苇》：“或献或酢(<strong>zuò，客人用酒回应主人）</strong>，洗爵奠～。”</p></blockquote><p><img src="https://img.promefire.top/blog-img/20240115-989bade2610e504ee659fad045b96c26.jpeg" alt="IMG_1011.JPG"></p><p>商代青铜器纹理<br>记住这几张图，以后看到也能认出个大概了</p><p><img src="https://img.promefire.top/blog-img/20240115-1080771b11ed7502c1dcc57f8c70b8ed.jpeg" alt="IMG_1017.JPG"></p><p><img src="https://img.promefire.top/blog-img/20240115-c9973fb3b2983c649b7592c6e5f3a70b.jpeg" alt="IMG_1018.JPG"></p><p><img src="https://img.promefire.top/blog-img/20240115-a59768a276c13305118ecc4a861c7b6a.jpeg" alt="IMG_1019.JPG"></p><h2 id="慷慨悲歌-燕赵故事"><a class="markdownIt-Anchor" href="#慷慨悲歌-燕赵故事"></a> 慷慨悲歌-----燕赵故事</h2><ul><li>燕国故事</li></ul><blockquote><p>西周初期，周武王为加强东北边陲的统治，封召(shào)公奭（shì）于燕地，建立了燕国。公元前222年，燕国为秦国所灭，历43世，800余年。存国期间，内忧外患，历经磨难。战国时期，经燕昭王28年苦心经营，据有今冀北、辽东等广大地域，经济发达，繁盛一时，跻身“战国七雄”</p></blockquote><p><img src="https://img.promefire.top/blog-img/20240115-ad6f028e20fdf4adc1f99c5392d9cf1c.jpeg" alt="IMG_1029.JPG"></p><p>惭愧，我对燕国的了解只有荆轲刺秦。<br>前251年，燕伐赵，大败，割五城。前242，燕伐赵，大败，失五城。<br>燕国也太惨了吧，还都是主动出击的，竟无语凝噎。</p><p><img src="https://img.promefire.top/blog-img/20240115-9457007ad3c58f535054ac4e269921d3.jpeg" alt="IMG_1026.JPG"></p><p>万箭齐发，有点帅<br><img src="https://img.promefire.top/blog-img/20240115-96bff6c50d49be7a2fe2ce2119af14ea.jpeg" alt="IMG_1028.JPG">铁头盔，易县出土，风潇潇兮易水寒的易吗?<br><img src="https://img.promefire.top/blog-img/20240115-1c6f17919e4831e0cbb67e53643739cf.jpeg" alt="IMG_1027.JPG"></p><blockquote><p><strong>荆轲塔</strong>坐落于河北易县的<strong>荆轲山</strong>上，为纪念古义士荆轲而建。塔为白色砖木结构，高26米，共13层，形如利剑，直指苍天。初冬时节，荆轲塔在缥缈的云海间若隐若现，气势磅礴，美如仙境。</p></blockquote><p><strong>百度一手，云雾缭绕的荆轲塔还挺美。</strong><img src="https://img.promefire.top/blog-img/20240115-eed5f7840fa6408364572c34d8484173.jpeg" alt="1129172566_16697690063021n.jpg"></p><ul><li>赵国故事</li></ul><blockquote><p>战国时期，诸侯争霸，赵国与秦、齐、楚、燕、韩、魏并称战国七雄。赵武灵王实行“胡服骑射”，赵地方二千里，带甲数十万，骑万匹，粟可支十年，傲然雄视天下，常怀吞秦之志，“收率天 下以摈秦，秦兵不敢出函谷关十五年”。<br>赵人雄健尚武，廉颇、赵奢、庞媛、李牧等名将辈出，齐国田单、燕国乐毅亦曾为赵所用。赵为“四达之国”，交通便利，经济繁荣，思想活跃，名士云集。儒家荀子、法家慎到、名家公孙龙等诸子思想传播四方，影响深远。<br>赵氏，与秦共祖。周幽王时入晋，世代为晋国重臣。简子赵鞅营造晋阳城(今山西太原)为赵氏根据地，并把势力扩展到邯郸。公元前453年，赵氏、魏氏、韩氏三家尽分晋地，赵国初立。公元前386年，赵敬侯迁都邯郸，谋求向中原地区扩张。公元前307年，赵武灵王进行“胡服骑射”改革，实力大增。惠文王承武灵王功烈余荫，保持最强态势，屹立东方。公元前262年，秦国发动“长平之战”，坑杀赵兵四十万，赵国一.蹶不振。公元前222年，代王嘉被秦俘虏，赵国灭亡。</p></blockquote><p><img src="https://img.promefire.top/blog-img/20240115-7117017e30d6757f37e0e21ac0212167.jpeg" alt="IMG_1025.JPG">长平之战<br><img src="/post/%E5%9F%8E%E5%B8%82%E7%82%B9%E4%BA%AE-%E7%9F%B3%E5%AE%B6%E5%BA%84/1685586667279-5a260b77-37d2-4eec-84b9-5fd79c7ce598.jpeg" alt="IMG_1023.JPG">大概是赵武灵王吧，拍完了才发现有一个小孩<br><img src="https://img.promefire.top/blog-img/20240115-9b820cf545bcdfd15afd9341da81f8f8.jpeg" alt="IMG_1024.JPG">到了战国，比商代多了好多xx纹。</p><blockquote><p>蟠龙纹： 龙形巨首有两角，双目圆睁，身似蛇形，有鳞纹，蟠曲如球状，空间填以兽、鸟和鱼纹等<br>蟠螭是龙属的蛇状神怪之物，是一种无角的早期龙，对蟠螭也有两种说法，一种是指黄色的<a href="https://baike.baidu.com/item/%E6%97%A0%E8%A7%92%E9%BE%99/1648740?fromModule=lemma_inlink">无角龙</a>，另一种是指雌性的龙，在《汉书·<a href="https://baike.baidu.com/item/%E5%8F%B8%E9%A9%AC%E7%9B%B8%E5%A6%82%E4%BC%A0/5953525?fromModule=lemma_inlink">司马相如传</a>》中就有“赤螭，雌龙也”的注释。螭是传说中的一种没有角的龙，张口、卷尾、蟠屈。有的作<a href="https://baike.baidu.com/item/%E4%BA%8C%E6%96%B9%E8%BF%9E%E7%BB%AD/2301081?fromModule=lemma_inlink">二方连续</a>排列，有的构成<a href="https://baike.baidu.com/item/%E5%9B%9B%E6%96%B9%E8%BF%9E%E7%BB%AD%E7%BA%B9%E6%A0%B7/288341?fromModule=lemma_inlink">四方连续纹样</a>。一般都作<a href="https://baike.baidu.com/item/%E4%B8%BB%E7%BA%B9/23130738?fromModule=lemma_inlink">主纹</a>应用。</p></blockquote><p><img src="https://img.promefire.top/blog-img/20240115-03c47c8e596224c4fa471d20d2408b4a.png" alt="20210421061209668.png"><img src="https://img.promefire.top/blog-img/20240115-bc0d5a012642127162699d9cbeb3be3c.png" alt="20210421060934341.png"></p><p>赵国名人图，不得不说有好多耳熟能详<br><img src="https://img.promefire.top/blog-img/20240115-1ed6a14190f501058d52f36bf54d5447.jpeg" alt="IMG_1021.JPG"></p><h2 id="结束"><a class="markdownIt-Anchor" href="#结束"></a> 结束</h2><p>​出来以后想买点文创纪念品什么的,商店里逛了一圈要么是太贵,要么是拉跨,河北博物馆没有把这个IP做起来,里面的好多东西脱离了博物馆这个背景去卖也完全没影响.有一个博物馆护照应该是逛之前买,边逛边盖章,可惜我们逛完了才发现.<br>这两小东西是博物馆门前石雕的缩小版,盲猜是龙生九子中的一个,照着图片比对感觉都不太像…一看价格,1500!忒贵了,<br><img src="https://img.promefire.top/blog-img/20240115-312c269c91b65dd08f8911df9805e195.jpeg" alt="IMG_1030.JPG"></p><table><thead><tr><th>名称</th><th>喜好</th><th>形似</th><th>见于</th></tr></thead><tbody><tr><td>赑屃(bì xì)</td><td>负重</td><td>龟</td><td>驮碑</td></tr><tr><td>蚩吻</td><td>吞</td><td>龙头鱼身</td><td>建筑的脊梁</td></tr><tr><td>蒲牢</td><td>吼叫</td><td>小龙</td><td>钟提梁的兽钮</td></tr><tr><td>狴犴(bì àn)</td><td>诉讼</td><td>老虎</td><td>狱门或官衙正堂两侧</td></tr><tr><td>饕餮</td><td>食</td><td>凶残野兽</td><td>青铜器的面部装饰</td></tr><tr><td>螭首</td><td>水</td><td>龙</td><td>排水口、桥柱</td></tr><tr><td>睚眦</td><td>杀斗</td><td>龙首豺身</td><td>刀环、剑柄吞口</td></tr><tr><td>狻猊</td><td>喜烟好坐</td><td>狮</td><td>香炉脚部、佛座狮子</td></tr><tr><td>椒图</td><td>闭居、不受打扰</td><td>螺蚌</td><td><a href="https://zh.wikipedia.org/wiki/%E9%8B%AA%E9%A6%96">铺首</a><br>衔环</td></tr><tr><td>囚牛</td><td>音律</td><td>黄色小龙</td><td>蹲立于琴头</td></tr><tr><td>嘲风</td><td>险、远望</td><td>凤凰</td><td>殿角走兽</td></tr><tr><td>负屃(fù xì)</td><td>文、书法</td><td>身似龙、头似狮</td><td>盘绕在碑顶</td></tr></tbody></table><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><p>第二天换了一家逸程,这家服务环境都不错,点名表扬<br>入住时候还送了小礼品,两块饼干和酸奶,这好像是我第一次住酒店送礼品的.<br><img src="https://img.promefire.top/blog-img/20240115-a4ab172c501a0c836ad182a84c2d6bd1.jpeg" alt="IMG_1036.JPG">喝着七千年前的矿泉水,看世乒赛,马龙惜败,输给了中国小将王楚钦,中国乒乓球后继有人.<br><img src="https://img.promefire.top/blog-img/20240115-d3fe2a9ccc72f050bcf99d01385500b3.jpeg" alt="IMG_1037.JPG">余下的就是吃吃喝喝了,吃了潮汕牛肉火锅,福缘烤肉,呷脯呷脯,小烧烤.福缘烤肉去了两次,第一次去的时候被排队的人惊到了,一张照片甚至不能拍全,左右两边还有.<br><img src="https://img.promefire.top/blog-img/20240115-c94230b92448a3ea10cc28233f3b9dfa.jpeg" alt="IMG_0971.JPG">有一说一这个商城还不错,顶楼有音乐喷泉还有一个滑冰场,建议其他商场效仿.<img src="https://img.promefire.top/blog-img/20240115-9ad0f27bbb03f9952e9e550c2c905e25.jpeg" alt="IMG_0968.JPG">一辆经受了太多的共享电驴</p><p><img src="https://img.promefire.top/blog-img/20240115-316307e9a21b1dea6025b334cf37edbd.jpeg" alt="IMG_1035.JPG"></p><h2 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h2><ul><li>石家庄的天气,emmm,不是太好,下完雨后实在是闷,走几步就感觉身上粘粘乎乎的.这城市不适合居住．</li><li>路上还看到一家雅马哈钢琴体验店，等我工作了高低整个罗兰３０ｘ电钢琴．</li><li>小红书上找石家庄必去景点，想去西板坡,和赵州桥,不搜不知道,一搜吓一跳,两个都在周边的县里,大几十公里,太远了,遂放弃,至于正定古城，虽说都是好评，不过我觉得一定不如忻州古城．</li></ul>]]></content>
      
      
      <categories>
          
          <category> 城市点亮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博物馆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>月圆</title>
      <link href="//post/%E6%9C%88%E5%9C%86.html"/>
      <url>//post/%E6%9C%88%E5%9C%86.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>乌鸦，古钟与残破的手稿，静静地诉说着一场月圆之夜的伟大实验。</p><p>阴影飞起，扬起一团旧日的烟尘，绯红的月光透过茂林的缺口，黑暗中堆积的枯叶染上了诡异的红晕。</p><p>凄风，苦雨，寒灯，夜行人。</p><p>马车伴着古老嘶哑的钟声抵达破败小屋，下马，站定，黑黄干燥的手掌拂去木门上历史的迷雾，不规则的暗红显现，仿若被血浸染千百年。</p><p>屋内灯火闪烁，但昏暗无比，老者扶着墙壁，点燃手中的油灯，寻找着前行的路。</p><p>火焰中出现了一条木制阶梯，老者拖着疲惫的身躯，沿着扶手慢慢前进。“吱——”前方木门打开，一位年轻人迎了出来。</p><p>“实验最后一种材料已经送到，处理之后就可以开始”</p><p>静谧的风划过，森林无声地摇动，地上的红晕规律的摇摆。</p><p>林间，传来了一声声瘆人哀号。</p><p>那是狼人的声音，狼人，正是实验需要的最后材料。</p><p>老者放下油灯，从怀里取出一叠泛黄手稿，残破的纸张与模糊不清的字记录着一场古老的实验。</p><p>”红月中的旧日宫殿，沉睡着一尊神明“。</p><p>”狼人居于深林、雷鸟栖息峰顶、鱼怪遨游大海、石巨人看守荒漠、睡魔入侵梦境。奇异生物的居所，是人类的禁地“。</p><p>”提取奇异生物血液中与神明的“联系”——我称之为”灵“，用人血中和，可沟通神明！”</p><p>“实验消耗：狼人八具、雷鸟四只、成年男性一百人…&quot;</p><p>”实验结果：成功，获得神的知识“</p><p>老者小心地将手稿放回胸前，拄着拐杖审视着祭坛的每一处，每种奇异生物的灵都已正确地放置，扭曲之线与残破之圆交织。</p><p>巨大的红色圆月挂在窗边，这将是红月离大地最近的一次月圆，因此老者才回来此，作为悲剧的缔造者，同时也是奇迹的见证者。</p><p>”愿我们能成功沟通神明，获得更珍贵的知识“年轻人低语。</p><p>知识与智慧来自于神。</p><p><img src="https://img.promefire.top/blog-img/20240110-c21756dc7d7f1c25223cd3c569360ba1.jpg" alt="12"></p><p>乌云，从两侧袭来，逐渐覆盖红月,遮盖了最后一丝光亮。</p><p>林中小屋内，油灯闪烁，在黑暗的笼罩下燃尽最后一截灯芯，周围的景物变得陌生且神秘莫测。</p><p>无人知晓黑暗会何时过去，但月亮终会升起，将光芒带给那些愿意追逐远方的末路人。</p><p>暗木书桌上，一本摊开的泛黄纸张，蘸了墨的羽毛笔轻轻划下。</p><p>”奇异生物与红月有关，红月中的旧日宫殿，沉睡着一尊神明，奇异生物的力量来自神明，籍此提取“联系”沟通神明“获取知识”</p><p>“知识与智慧来自于神，在教会的严格管控下，私自教授探索知识被认为异端，只有通过向神献祭得来的知识是为正统”</p><p>”为了向神献祭，人类大肆捕捉奇异生物，一次献祭要数十甚至上百只，而在数百年前，奇异生物并非如此弱小，一只简单训练的小队就可捕杀，那时候猎人与猎物角色相反，我猜测奇异生物变弱的原因在于其与神明的“联系”变少，换句话说，神明在回收祂的”灵“，将散落的一部分收回。那么是否可以根据举行献祭仪式所需奇异生物数量的多少来判断“灵”的减少速度曲线”</p><p>“在我的大半生中，我做了一系列实验，举行了一次次献祭仪式获取知识，并根据第二次献祭获取的知识得到了一个模型——关于灵减少速度的模型，”</p><p>“最后一次实验成功，共消耗狼人七十二具，雷鸟一百二十只…&quot;</p><p>&quot;我的模型终于完整，得到了最终的预言：</p><p>​二十年后，神将苏醒。“</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>夜半</title>
      <link href="//post/%E5%A4%9C%E5%8D%8A.html"/>
      <url>//post/%E5%A4%9C%E5%8D%8A.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="657ba2d3da3033cdbdbc5c3ea3f4257a73f591083587526eb327296440ee1e7c">a12d143d61e43de5669527613d318b6f6ef44fc50a9be6b56ea42c6d6c46c476d9977c513b871c3c5c59ef13ba077cd8052f36fbe9ca51bf63af0bcb9d4633a177d444897ac85ee7f8a139777b697a5ce6410589bad075133e923501d95938f03034e55a522e88845fef1a99f61341f2d36eb90fae1f7899fcae738a37e4d35e71d6bc5d97998aef56d6a3d9307b08f8820735e8c7588a37fe04b39eb63af2d68948ac08007adfda77139fb79f1ceb30c6f028e29bc542aaddb113ecd6e5be5b07f5ce1f4e80014e4814a2d2f3ab428a828525b1f312039931fb14e2f6e926203139a33581432754bea6d103e8ab468994ffd6954fab1ea54d0ec71ced67110663aa83ded8f1e4ce5cdbafcc7d176dad8c9a73f26252aae1354e16ed8e97190258a95658d4e7837ac36b074f34348ea8791d47200176516771a0d719d4dffdaafe9f21c628b3371faa863632d596ed0e9989b8ff0fd6bbc0692725f487090eb80c434c556e5bebac32cbff8c9290aad86f095ab488fe996adbb0e41e95aef3156adc0ba1036a9baae23b69b866296d07de80250e5ae7f8713e26bee31c1987700bf9c4366ebc14338181b551843effc5b8d6d39fa05ad9f3a1d104e50360546f0320abbfa04c5c244abc1d0b5e41cfddb44a75547fe5856286c2ebbe8276a70fba51e6575e610f3604699a6d3269ad98d129e5d685aae177eb59824c3824b406a6b6c371f2572e9157b63a163eb5f3cc1486695f5aa0b8c7e6d18057d312c7cf</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>星光</title>
      <link href="//post/%E6%98%9F%E5%85%89.html"/>
      <url>//post/%E6%98%9F%E5%85%89.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f16cdc603a4c7cb7313b9bc2dd78fa42521f899388aaa5c14236a0874c8a6f96">a12d143d61e43de5669527613d318b6f6ef44fc50a9be6b56ea42c6d6c46c476d9977c513b871c3c5c59ef13ba077cd8052f36fbe9ca51bf63af0bcb9d4633a177d444897ac85ee7f8a139777b697a5ce6410589bad075133e923501d95938f03034e55a522e88845fef1a99f61341f2d36eb90fae1f7899fcae738a37e4d35e71d6bc5d97998aef56d6a3d9307b08f8820735e8c7588a37fe04b39eb63af2d68948ac08007adfda77139fb79f1ceb30c6f028e29bc542aaddb113ecd6e5be5b07f5ce1f4e80014e4814a2d2f3ab428a5ed803094cbbb3133ad1a5139e60cef05c211fbf44122262b5692f3acb1a31623964d2b11ab561db88ca957f5175976b809dc5ba423e32657673638094befc9ad3c88b8b3ab3c3dab3a95263047791c1530c0aa5791ce39a3907d9468ffe51207c74c60474af3262644854c1bbf916594f6c7ddca42f33510bdfaca6bc70ae4b9fbdf45d4492591102bc22bcdca73c06d0ef4024a2664199fa28b1e82fb7627af164f8552189d8997cc4ed5493f57ebdb56ae1fa9ad323800ccab462cb79ddd268f21b6163d4151854606be82acd494c27e371119631a93004c8ad12cf3ab4d8afbb2c23c8fbbefa7f5453e0b63c89aedc96bf6e4f55b202b2bd77b4302c43e376ba02a120e50e8d1881560f8ed58284</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五一</title>
      <link href="//post/%E4%BA%94%E4%B8%80.html"/>
      <url>//post/%E4%BA%94%E4%B8%80.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d7447070460abe29cab36c7dfab22fc46f1081f2891850cb635ad437c17fa778">a12d143d61e43de5669527613d318b6f6ef44fc50a9be6b56ea42c6d6c46c476d9977c513b871c3c5c59ef13ba077cd8052f36fbe9ca51bf63af0bcb9d4633a177d444897ac85ee7f8a139777b697a5ce6410589bad075133e923501d95938f03034e55a522e88845fef1a99f61341f2d36eb90fae1f7899fcae738a37e4d35e71d6bc5d97998aef56d6a3d9307b08f8820735e8c7588a37fe04b39eb63af2d68948ac08007adfda77139fb79f1ceb30c6f028e29bc542aaddb113ecd6e5be5b07f5ce1f4e80014e4814a2d2f3ab428ac49ae2d57d44cf73dbb8b6a6fe90e1c4337e5a04ee33488973ecd3a0c7d2d3263f256106b8c785966cedd85341e400cabea3760796e9d0b082dddd265abecfbbb5a0ad1796fa49d6f6216954f50852cd80042aa16746f6a7331585c883153d9e7f3dcd2efb4eb5f31f949afee0d995936f743233bb72909eef570cfead59205002ddba2b513e6e50ee0c346b7b475a7093163a4a960ee9aba8451a1ff2a95691d6759a2edc41424a183adebd2e9a4a9913b02d1aaab955b6f2e29418137ac4044b47ff30bd7684b7078e9dd135e21e08dc8934b567ffa57c3c567767ae46fe5d7ac4ab627addb405fc22a1f03e378049261dac2918d09eee997bc6b2f611c9d177d367c44a7efc3c1e28629c0914dbfe296c66e9e78382f2195c9a37b981ed6ff0792a5843fb3e854bdd2bb023ba7a6a9706bc57fd8bc7c6e82b194fd8adbb1634b0bca29d1ae0879357e69e2da3dd16e377ee5e3060b8b31c9a416923ea5c772369e8e123af123c34a4e624afbf67946df40798e4c3436f052b0cec0c033c3f606d507ba56dc6fff3a4be88b31f6480449921c58ab6d35474472d1cc4a109d313662ffd85810455122870293ee2ab4662428f6b903aa5c56330403e89b809f2b081133eddf4a560e7b30bf089c1b92eb9806ce0d62993114f948154fd659522e31821751846ca07871f31fb828fbb9e35edeb834c231f57f3f79f675bbababb3780f754d23da8965ef04ebbb05b4dd9c312c2523fe4317d23002803467df35e5eb580e8e482ef46f24a487545797440cc58f5bb83050a19a4416a0e886d60bd4fdd4c72c7502175c3b16af21d0a0499bb17a0ded108ce548829f69fc33e033a3752490ccfa2d374d8adc4478b7873572f0484c56fa7afc0c09bce0995dd2cd009ab2c8f86701d04f545bf7962964eb3f2043e5af656904b24c80c9155d912cfed3fc6c4e68f5758c0ed4ee816ce2c295bc89f0ac860eb40de817c1a3171dd3691cb58a97101adeb053c339e2784310e3f50ac242bc8cc5750ec2170eaf4902c87bdc03c31a80d66451ed7394978a84f2fba013062cedd0fbdefd91561218e368fb23bcc71623d79be07ad94954278312db38ce106df09acb2eb92b772b6ddeafe7295028b6c83cec91b8b81aabfe9b5091ae4adfdda1d5610e70aa64404dee8a8ed023bfca782baf71921ffd52a2a0d485ed6d5394882e1740171582fe63fcb44bebe176592d096ab88233664513b922b7fe8e904ca8c4616bb9240bfc51d4470e33879dd1b61e50451d918630f2a0fa1db3a70dc5a81775929b3e9cbd514f50bd560d2b5257cdbda473321b07f7232e244cb33c3e7bc06e47130756f77285ec7feb126a0db2e841b2705e4ec8fabddf872c69a72ab15ac5e1c24af9230349ae2eeda82998e10407a3e49ac7f2edc71355187666045889a72742e9733932a17743a77079511687f803954586831e28430c745b6293018124670132a033046d94585f4d0fb97aa0ab1a7d9138d7e00af5bee6d0aa232a9a974c2e26c418791d66129a33a3bb0431a287f38cc0c2aa666edaebf497ed6aa9eefb78b26eff051a5028bd12399944a0e72bc05c846c51638429ff93e381e05c6df3e75749d37aa51968b42c4020e153ad838b7c4fa034f46aa6333da3176b78a8c5b4121b977aedcc5eb99705d59ec7d01a58ab40956c1f925d6d6ac6e9fe05fbb048c0891143c688bd291ccb3bb9ce4e59861445b9f537c1ec6b4ae54bcb810deaacd7874b80ed00fee0dfaf02b720aafc5563495c1dc87c66f406ab3668d9f00dce4f8693bfe7732e3bdca9c1479d21791404170ecd280afbb5dc80dfe6acf6e66fedf8d79c7fe4d129b5e82287eaf565a3de495698005d88c954be3822683fefa04ec7d0d1be0a0a2f4bf4b1d6a8b75b2d2aa88ea89e525bd42c7ac7ebd2378c2977fe56d62afc77410aa60a86342cca5759cc28091e92748d1efc0a45d28d87ae3eecaa68848688dfb9f47517b486d084db46fd65027f98badeb24098c157b9ad6ee7e87beba6d0f84d6bc3c0abdaa320c7c108b2a4c16294215c116d96214835263aba8b54151a3dffa0c2bee4b639088fbc8719e0729362ba0439c87664c917d34dd60c2f9ca6237a0971c570da2f4c428204206a9e9feabcf57532e16673674e18e6889b309bd0ca495465b548f9d7423a04d73d0b1bc349b0b106ad8e7715b6aed5b5062dc8ca4f57592feaf1dedbd77b7729a64a6adf9c26d0abd2002be3a0b2287e7bd244fadb923230cc430a111b773e0a559419026079c4a336a8c9216d3d6d8149438776a24dc87eeddad3af1e0442c47bea82f7dec1895eb70be5101b2fc0fcc02048d5d19ed5d651fc5e8d5cd701925270b02f0877b4429b8d9f5abd95618b384b15a6adaf075e043d676bd89d31e6d55f77a22bf7110f3b702281d97f135c5e1</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活小记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回不去的童年/(ㄒoㄒ)/~~</title>
      <link href="//post/%E7%AB%A5%E5%B9%B4.html"/>
      <url>//post/%E7%AB%A5%E5%B9%B4.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1c39d3f4c31e2a73c45690a33d4ee2c9c14ed54bc7676fc93ae3f704bd5506f4">a12d143d61e43de5669527613d318b6f6ef44fc50a9be6b56ea42c6d6c46c476d9977c513b871c3c5c59ef13ba077cd8052f36fbe9ca51bf63af0bcb9d4633a177d444897ac85ee7f8a139777b697a5ce6410589bad075133e923501d95938f03034e55a522e88845fef1a99f61341f2d36eb90fae1f7899fcae738a37e4d35e71d6bc5d97998aef56d6a3d9307b08f8820735e8c7588a37fe04b39eb63af2d68948ac08007adfda77139fb79f1ceb30c6f028e29bc542aaddb113ecd6e5be5b07f5ce1f4e80014e4814a2d2f3ab428a055e0e2dbe2aa3846d8c417cb7e45b7d9d337c78264e17e4016ac2bacdd3f4b40f87aad22fefed77463fb3e9e2200f95f593c38897885a24fc11c7259d76822869ab80945a8e79a690e708bcf32324fed182c5b9ece211b315f1b11e24f259e80b2eaeec9705b3c7167a820102142b074e1947020c609574ecd83cdbd7532a8af854b0c09feba016e7d4d1ae77d55c96f243f7836958f73c8f19edeba1e19fa5735b0bd253ce6bade1bb26ab461712eb40e3269eef37083e37df26f2e13f0a7f08950671c4be8fd1f3b07c314c6cbf26b4532bd011e2df0dcd0f17106955852f34bc412a707b7cdc89a059d9ead69ea4d1f8e20248fb25b52259725eecb39cde9a1a5c3251857ebc59f96105150caffca3fd2b02cd5026824d3eb1801af74db43ae77684f6080d08218eca4b08d0c8d457a4e5c5fa2c14fb63a8b739559a2ace75f6d18d7df68fef45fa87a2389e42750be6e67a95f31546ff14d8c835f1a58f8d22533e37395b8e1d42f71f8cbbae6775f12ec67dd5748f48ba6b2532de931ad5b91c12cdf525d7387012d36842e2a31cb50347856fa33a119ca31d5be8ca6b56097090aa680bbe0a7a60ef7f0b8cd709f05d753b11a3f92693a75f9cb010c6f6a06165cb9518afb8fb52f283696aec415a74c93454d022a3f68661975ca441dd4b8392afe09cc0efd479c9668062a03191dae30d87b116942e5d9d97416ef4f21146903495fa12ecca199054421522a02aa3eed9644fa3588cfc0fad7b0b9a444f3f7c523a8b324ae75de1d33e11e94c1214df7ecc1950b761347d94184f40deb065e3c3cc2e985d8874143f24222662c01823515b9d1df1d9ffa9ff40a453f5b5586e4343e24e80672221812bdda03af863994c4a0f0dd96339d5827894ce97b6f66eba5a955ab8c72a8592e96a434645ea5c36c478975298d3aae1c6c60f9ab5b1f23ac904e2a0ec57043b6f1e03edf31bfa999adfa4c58a122711211f4589497e4584eac624e0ebb5c1363900ee9ef46b066515b8a084e93f2210cbf031c50e145aecbe1819778b64572cfdac9b302d658c3ff3c3511c483c9364562c8ecd6715530e7e3e84d4912a6a6398f2c22191badf9bf0c2a7cfdc5d4d355135dcef3d8023c78409a78d91de08a21ff30c1b3c4f51b74e22e147e1e0056e80081fbcbc283fbd7fe4a5d7d7f930d6bdd02418099a09022a6d626db1adf2f5a6f6bc836c7702a12607a3dcc69e7b59069b323c2cba16c125de89aa04fdc40b4ecd1381a89a43760f5e86ef3df4af85d2f51a8af92f787f0c989843cbaf69d3e8de1645579dfba83c2796e14a4891b5bda9695dd3c4bb05454eddddf82803254073ddbd54a22f413d1ec86c080e73cf9b0ec4690faf56fc29bdc2d833d2df8eceea7e2d3f9e8e5e559cfcca7fdc077a34cdf9f7623e409a263dcec01d0203ec26994744a03609f5e3fd49543da870d72cd9d022146b8d0aaaa9f22b33a4be97c313ce3caa48fa8d9bea1f3a41ec7ccebb9bd8c347407dced9e95724d1d8c6f4609d06bd1a0579c183a8ea6331b5d3b8df5a29419f716c7ecb3ff8edcfccb6ea1f41e129a1fe42ee56d8dea38da8175f9a56202871f1aa35974751fc79c6b8dd1d704110be86699bde21f113540c659c67113fab24d61065e19e9b53fa8f2d360f51377ce7d2913c1f29231d7230e9ef10347424c3f5100e7b9cb8a0508d74ed1e95e0dca413bb953b0d4262a933f1e72485521095c698322a5ae9ac4efb01df464623e92f85ccc888ac88eb8d6e2747770f1c1eb98a41c3947ae92e8b1de0c00268f45ee8dcbb2d1e166182e119d00c703719e939548a4973cb9e07fd0358c12e2112d106795debffccd225a5a930b21e1346070186856ed19d012ec5de9c611683ac552b3fd71a19c58efb55dc0e344bd7b275866b99e251fa34e5fc822c52cb09be34737e0b029ec3653f1336b0c56deb8eab5d34818bddfb6e3a1cd1928a17a8e5f0681823bedb26099ab0a869c24f6759c1cbc5c7b767706e3b389ba1ab0006dee54e325663132a765f9e293c91b72e52ad6b546b5e594c91f94022beec968b83cd47594652c3af7b5342ce78ab2f6048df894166c26a427e6a02b489dde2fec53e513fbe95f00ba8a1c58085082c1155b9c14fd8165827c06ab2d133fa87da7f0062a16ab49300e694a412762cd199e1aff0172881138819a2c9f01ecdeecc09792ac43f580395cf023c7410e4bbf6fd936e1edb94838cee8155aead8ead594f96a5aad4042978d478757ea18a8f794b964742db4338acc6cbca5e64e291c94f52620c6999d30e2cea009fce5127d234b9d971a2c2c52ca50f2bef8225c735f447dc43d7e4a5799da54b9ab11bd8dcd8f46ec4dea51f74f01b3d13a14f171f047f958efb98c97766501d15562613cbf406335d3daf48a9d4ac21f3385d5a5b7895b6a13bdbb84fafee0ca04fa71d21dacbb8c0029162991bec6419d41883742ba070515fdc713cdd37396f6e094dce5c5801646252846f5d36532da088409640f891f976a0565f54d922041c27f2927ad793b76ee3bc7c2522989768de8e3d88a69144888716242ddc59e16c3729d64d1307344bab2ea620598ae0d8d8267c1615c2013232dbb82b4be218a9465237961c88c2f01aa3eb4d62b1080908c158d3880bb651a15eacea2931258e74d06b2d4a29313ff17f8d51d8cb18e6543954133df06aee5a4ee43c9862437c620a57ebba75c015e96f640e17604cd61878f771d33df45b25da38ad09341a7ae4b0df6f28800cece6cda8f978d6e8a20e8416746c90810466e372437ca2165c77f6dc71a89cbdf563298ac93f77e151199c9d88de1e50a58da22a4e8e18fc504c78b3ce03b3c2bf6e8f0cac0f1d2abc5030538850c38508575518e25fd14b9598ceaaad2becb916e6b2a74a622af44fd7ff91c9a56deb1807e6fb630609174896f65f621a4ced09f914c41edb8a53b736bf4a4d95398d2e4f6b2a3a3f78d2600d6284872ee457630188683a9c7814a71006b51923678f01652c6673b32c98c402121ae7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活小记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🐏了个🐏</title>
      <link href="//post/%F0%9F%90%8F%E4%BA%86%E4%B8%AA%F0%9F%90%8F.html"/>
      <url>//post/%F0%9F%90%8F%E4%BA%86%E4%B8%AA%F0%9F%90%8F.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d2b69f1d4aff8894166b7f2ba18a0ddd0806f9c616bcc50fabbdfbf28133d467">a12d143d61e43de5669527613d318b6f6ef44fc50a9be6b56ea42c6d6c46c476d9977c513b871c3c5c59ef13ba077cd8052f36fbe9ca51bf63af0bcb9d4633a177d444897ac85ee7f8a139777b697a5ce6410589bad075133e923501d95938f03034e55a522e88845fef1a99f61341f2d36eb90fae1f7899fcae738a37e4d35e71d6bc5d97998aef56d6a3d9307b08f8820735e8c7588a37fe04b39eb63af2d68948ac08007adfda77139fb79f1ceb30c6f028e29bc542aaddb113ecd6e5be5b07f5ce1f4e80014e4814a2d2f3ab428a89cf38323c42532bf7e175af3557774e9d633321cb0897f3ccb26fb044d633d5baaa56b7074230c00809e315e0f17f45aba9f30680f91b3fa03878143f25c73c6268c386c504c749a4ff442fe4af82c73fd58017a22d4182c4a1d23e5378755726ae8789f7ab66835a62f7a17d2af904cd2ab8adaec372a632fd7024efb65c57e53af756072baea404ba5cbfa2acd22060759bbd028d6532164d802f969463a910f8fa0e3cbbd4a8294f42f7c3c95c3d20544c3021f6f0821afe89acf12d61208441a4f5b1136c9e67c864bec2a49c7fcd38ff873a6eb01ac727b3be3acfa55c552cd9801b962d1e5f60a60e1831eb1320b1779d5889b987ff7b251f890dec6fc613460799b2abe7f365e52cd735c667fc9c9592a0090614e34db61f323b3630546bddc52c578760a8a0b3d2781a4379b69a6ee4a731991d1a640eaf19ce0c317a4ce19ef382cf1dc2094b14f21a204f5cc6a1c21264ec2f9ff942da7e8aa6ec23ba1d62cb2dae4d9603b67ce8add277f9e5101280a24b613e41d00f1faf18fee3014973530b73ba9fac2bbe2b725d351d68f30f6fc6b4de8435457b12bdc8b60e04cb67a7a24f89cf5c6705eba7fcbeb6275ac394608fc9b389a7b4f93bbc62b4adc9802ebb60ba6e9e8c5031c33ae7ff4af9dc5bad50095ecbd446194b93f7b03d878fe0668934a9fb0ba919b9970e07e0f9de54455056d8f549b3bff4231448e5ba2fdb9d5c66be52c52555d8064d432a49019071fa6fd1352d4bc4c05ad54d33c01ed75da070ff201589d0ff7e17e68a899b872f5e94332e89c6013bc1aed0c992b5c1404a77d7e4ff22a86cf89f491f8c2d582398b8f0d0e1af95c3ea385ab3111ecf5dca862e48777bfe7ce00198623d3ef5db5b24c7d33248f5f6e994d82f3b06b0695ce11b56cf6d3a81dfc0a0868e05ca4630e3c51f853b7b350007962f8e0c52560eaca3ad2fd8d144b3d97365d88fbc9544133ffd6cf2cbe80983e6001772561592668beb687d6b81acac453279e2eed1eb035579a1304d77e9215d3d956ed7e22c0d9d3136f73d4957aa90ebedfdf64f4257e34414a653575864a6582e7623dcc8ad3948c59809b61537667390189f0950f5c736af88d6eecf468ed9c2e3ca221e2a7d05d71c5e19ea3e443b9dd0c80e4f393075935faa5a208f2f8801022bc594621fc2e824c0bd765cbadf8aea1a828807bcc9961e4b357ed8fd5d8209fdf70c753fa2035a6fe3181a31bd490fc96da062f4456f5dec6587a64a71a7ecc11cc99c0b8758905d8fe0e230a6333e22e3d438c21dc0f314e6efb2d5830c97800a0744678a989b7b14f3efd1748d7d9ff06b754b394976a59b5f87f48bcd0c16ff9e14e0cfdd5f1c0e04ffc403da2babe813181932941bda092a6b5961c0fe6d41a07c4e7099da02b416a19edf736afb1ba7c5b11f29cbf41fb56bb008557166921bb322f0da16613916361c02de5f2e08243de3cbb2919de42fdb10c9fd7d0c38b39fc28ad043444d199634d11fdf8bada5c2d3b21276ff41b2e2eb9965db528fdbcdf4021df4ff9cadcd86323c19ef01534acd9307af8f59ad4bf36593f1da97c65f395151ac680d6b7f7749bfed43b3a4ee18e37d41c9bac84a0a81cd2cb8aec334ed1270a5bb76874ef875c2c5b9d0982660819e0d29844994cfe7dda696ebc40cdf1ad762b70c3b56405c5aee37ebdb5a9d9052926a4d571837b5e49c701deaeab079a4ff8ad9ebfcbfeec1cd5855586663d9169282e25cd2a4ac809c5c7cd8196720628b405330c21a174546e4a2e9f6e4580eb58a861156af64b3bb1bad3b52a0c63b31c1beb5d9be06af7fb6780b7f0e6a0c77c2ecf435a36f8ab4894b4ce5fb3374c43ad4eb7d4cc4121cc96dc079fdc5ce28e5b62aa6ee12dad247e8921bdeaffbb7e34f7f02bc530b176f49e6c35a4ab36a1d13414f760ebb4360d63f310fcb8313df075607eea3f73d749a55342d4cd0b1de501f8302bfb3932b81a82f446b459001416f02d7f02c9362a830c4e534f3d009807289ea92401a0ed909a686b09717e869f7fe4d891e706560af6b547e84cd040b37ca8af1f6caca24d0d3541eb01dede5ffc11a207d3601e666a37d802f9c81d530476d9621058bffe89686fe3afb335a24f1bf5e4ab88845864c8333b80e7c059575273a30b92e11de0ded751a1ced05e2b215a572d27e89ebefe6518b8ea322cd0658723207cf211f55dae418eb906b71bcbe2e9f18796789d49bd818b95694ee329e659c7c282009782ec635d862af59270a6fb55a1a0a82a9da2af0f029a4ade256092a2f207c7f9f10b61cf3eadfe1b0523d6138e783f2ce26a555485d031010a967b69431ff45e87edfd9032dfadcfe3d845748df2fee08eecc6b710bc6bd5b040a3f77d2f9e936cf100036fca81fc1223a4149139736be4c6e071b15a0dd48c396e3fd909f275e46d1002ccd2c947bbdeacdf522f0e5e4d47e9fc39c340657622057ab183bca106bd4bcdb23309ed1ba2ff54299433cbe559f0d311d70d6ff248c35854cb5f669dfff3326df88e8b6b38adce9cdd814db0635d610cd14cf818212fc730f0c3603d9f2b38e5c792896964182ce212fdf021f8ced4ce49d564b5d5f2d38e2dc8a731ab5d6248a52adb1bb4a516966c608d0c834ca5ed17e2fc64e17ec5d541dce9efd9d551213d2cec1e7eb46d10db7adb7dac0e95af87581bb7e35f73660194f86b873cd220d5852eee6ae62a1e187393556e75c4f9183260d43c48e912a37ab215e023342fff71f26276ac490756abea1fcd36cf841ab2eb88afe296a9a800de528f63a891499aee79c4990f835e70ca40ee3d49f73b6201db856e75caed6e91b06c49e0b07a55eca9835e3192c808290979bcf9c745cf8a922a49e8420aaef028d20dfb8644d6d8a61ac052c1714d04ec5c5effce243c3bc66ee1232ff30febe862bedc4c900fea46a6eff663113eb35e47cd33a5afd20179f457d84c22414dd3a494814bdcfdbb488db094b05445faa29ee8ab9d0e97ea23f9d59901be9013de2fa77ea16b657d3aa12030c153f7a5847c02b238aa88c838886c6347839dd6e8158cf86955f410964277f19b9acaa0052caa2ffe904562612c2bc9191e5bf15f70957f37002d45e7fba672225148690e618b88cbe76658c0832a1b26971f56909ad8ab7711d3ec0c43f0c2da55c14d077beb0dd9707c92db00afaef5b567f0e5506c955520d6545191e08ca1f7b9fe3b2582e2bc193728f7429e52b30b0c13c7aabc83b61d50dc3e2df950552251feed627932961af43513d441a19809897c989b54966a8a508c29ca23c7bfadb0851b0649204ae7aa6b418d3a883fdc7cefdfc168faa4c5c7f72db1d0a07f84761ecf9484a7a9845388319cba0fc77d297980e280d5a1f2e877c23d3fa44461ba7aed968e13ef69657cb</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活小记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验室服务器安装pytorch-gpu</title>
      <link href="//post/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85pytorch-gpu.html"/>
      <url>//post/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85pytorch-gpu.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>​实验室给分配了服务器账号，可以跑自己的深度学习代码，但是在配置的过程中出现了种种问题，记录如下</p><hr><h4 id="0-解决服务器联网问题"><a class="markdownIt-Anchor" href="#0-解决服务器联网问题"></a> 0、解决服务器联网问题</h4><blockquote><p>首先你得有个vpn，点击<a href="https://ikuuu.eu/auth/login">这里</a>注册下载</p></blockquote><ul><li>本机按 win + R输入cmd，在小黑框中输入ipconfig，记下本机ip地址</li><li>在<strong>服务器</strong>上输入以下指令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">export http_proxy&#x3D;http:&#x2F;&#x2F;172.xx.xx.xx:7890export https_proxy&#x3D;http:&#x2F;&#x2F;172.xx.xx.xx:7890</code></pre><blockquote><p>172.xx.xx.xx替换为第一步记下的本机IP地址，端口号7890替换成本机VPN的端口号</p></blockquote><ul><li>使用wget测试</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wget www.baidu.com</code></pre><p><img src="https://img.promefire.top/blog-img/20240110-a2ff1256ceb498b4eedcbbb59c021f76.png" alt="img"></p><h4 id="1-使用winscp将anaconda3-202111-linux-x86_64sh上传至自己服务器"><a class="markdownIt-Anchor" href="#1-使用winscp将anaconda3-202111-linux-x86_64sh上传至自己服务器"></a> 1、使用WinScp将<code>Anaconda3-2021.11-Linux-x86_64.sh</code>上传至自己服务器</h4><p>给权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chmod +x Anaconda3-2021.11-Linux-x86_64.sh</code></pre><p>安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.&#x2F;Anaconda3-2021.11-Linux-x86_64.sh</code></pre><p>一路回车，有的地方需要输入yes</p><p>安装完成后</p><p>输入<code>conda -V</code>测试是否安装成功</p><ul><li>中间如果遇到问题，试试断开putty重新连接</li></ul><h4 id="2-创建虚拟环境"><a class="markdownIt-Anchor" href="#2-创建虚拟环境"></a> 2、创建虚拟环境</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#创建虚拟环境conda create -n py3.9 python&#x3D;3.9#激活虚拟环境conda activate py3.9</code></pre><p>3、安装pytorch-gpu</p><p>在激活的虚拟环境下输入以下命令</p><pre class="line-numbers language-none"><code class="language-none">conda install pytorch&#x3D;&#x3D;1.13.1 torchvision&#x3D;&#x3D;0.14.1 torchaudio&#x3D;&#x3D;0.13.1 pytorch-cuda&#x3D;11.6 -c pytorch -c nvidia</code></pre><ul><li>如果出现Solving environment: failed with initial frozen solve. Retrying with flexible solve</li></ul><p>conda config --set channel_priority false</p><p>再次出现这个错误时不必理会，耐心等待即可</p><p>附：</p><p>pytorch-gpu测试代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import torchflag &#x3D; torch.cuda.is_available()print(flag)ngpu&#x3D; 1# Decide which device we want to run ondevice &#x3D; torch.device(&quot;cuda:0&quot; if (torch.cuda.is_available() and ngpu &gt; 0) else &quot;cpu&quot;)print(device)print(torch.cuda.get_device_name(0))print(torch.rand(3,3).cuda()) </code></pre><p>结果：</p><p><img src="https://img.promefire.top/blog-img/20240110-47ad2859c9673164f7503b3891a342f4.png" alt="img"></p><p>指定GPU0来跑代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import osos.environ[&quot;CUDA_VISIBLE_DEVICES&quot;] &#x3D; &quot;0&quot;</code></pre><hr><p>更简单的方法：安装打包好的带pytorch-gpu的虚拟环境（只需要看第二步）</p><h4 id="打包anaconda虚拟环境"><a class="markdownIt-Anchor" href="#打包anaconda虚拟环境"></a> 打包anaconda虚拟环境：</h4><h5 id="1-将要迁移的环境打包"><a class="markdownIt-Anchor" href="#1-将要迁移的环境打包"></a> 1、将要迁移的环境打包</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda pack -n 虚拟环境名称 -o output.tar.gz</code></pre><ul><li>如果报错：No command ‘conda pack’<br>尝试使用：<code>conda install -c conda-forge conda-pack</code></li></ul><h5 id="2-迁移"><a class="markdownIt-Anchor" href="#2-迁移"></a> 2、迁移</h5><ul><li>进到conda的安装目录：/anaconda3/envs/</li><li>在该目录下新建文件夹py3.9</li><li>复制output.tar.gz压缩文件到/anaconda3/envs/py3.9/下，在该目录下解压 <code>tar -xzvf output.tar.gz</code></li></ul><hr><p>1、查看服务器GPU</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvidia-smi</code></pre><p><img src="https://img.promefire.top/blog-img/20240110-0f456eaf404cc1bae0daa51f35492404.png" alt></p><p><a href="https://pan.baidu.com/s/1r_DfpurqY15AJy3fe0B4Wg?pwd=1r03">Anaconda3-2021.11-Linux-x86_64.sh</a></p><p><a href="https://pan.baidu.com/s/1fCvn_0xDnb-HuOrjCkC00Q?pwd=7fqg">output.tar.gz</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业设计</title>
      <link href="//post/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1.html"/>
      <url>//post/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>毕业设计遇到的问题和解决</p><p>1、jsp汉字乱码</p><p>首行添加：</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot; pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</code></pre><p>2、数据库连接问题</p><p>读取properties问题</p><p><a href="https://www.jb51.net/article/195047.htm">https://www.jb51.net/article/195047.htm</a></p><p>通过重新安装8.0版本Mysql数据库及对应驱动包解决</p><p>3、authorize标签</p><p><a href="authz:authorize">authz:authorize</a>是一个流程控制标签，能够在满足特定安全需求的条件下显示它的内容体。它有三个互斥的参数：<br>n  ifAllGranted――是一个由逗号分隔的权限列表，用户必须拥有所有列出的权限才能渲染标签体；<br>n  ifAnyGranted――是一个由逗号分隔的权限列表，用户必须至少拥有其中的一个才能渲染标签体；<br>n  ifNotGranted――是一个由逗号分隔的权限列表，用户必须不拥有其中的任何一个才能渲染标签体。</p><p>从标签源码可以知道，authorize标签判断顺序是： access-&gt;url-&gt;ifNotGranted-&gt;ifAllGranted-&gt;ifAnyGranted 但他们的关系是“与”: 即只要其中任何一个属性不满足则该标签中间的内容将不会显示给用户,举个例子:</p><p>4、<strong>IsAuthenticated</strong> 属性是一个布尔值，指示当前用户是否已通过身份验证（已登录）。</p><p>如果当前用户已通过身份验证，则该属性值是一个布尔值 <strong>true</strong>，否则是 <strong>false</strong>。</p><p>isAnonymous() 匿名登录返回true</p><p>5/j_spring_security_check</p><p>spring security 3.x默认登录拦截URL</p><p>5<code>&lt;img src</code>标签引用网络地址图片不显示</p><p>​这因为在引用链接时,浏览器对地址发起请求加上了refre这个请求头,而有些服务器能根据refre反盗所以引用失败返回403。</p><p>解决：加一行代码就行：<meta name="referrer" content="no-referrer"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>错误及解决</title>
      <link href="//post/%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF%E5%8F%8A%E8%A7%A3%E5%86%B3.html"/>
      <url>//post/%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF%E5%8F%8A%E8%A7%A3%E5%86%B3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="错误及解决"><a class="markdownIt-Anchor" href="#错误及解决"></a> 错误及解决</h2><h4 id="1-no-constructor-found-matching异常"><a class="markdownIt-Anchor" href="#1-no-constructor-found-matching异常"></a> 1、No constructor found matching异常</h4><ul><li>缺少无参构造函数</li></ul><h4 id="2-文件夹与moudle"><a class="markdownIt-Anchor" href="#2-文件夹与moudle"></a> 2、文件夹与moudle</h4><p>moudle右下角有小蓝块，没有则是普通的文件夹</p><p><img src="https://img.promefire.top/blog-img/20240110-639e871e9ffd9a4ff131d06015c3ccae.png" alt></p><h4 id="3-idea目录错误"><a class="markdownIt-Anchor" href="#3-idea目录错误"></a> 3、idea目录错误</h4><p><img src="https://img.promefire.top/blog-img/20240110-3625a0277a2c15df0ed4601426034249.png" alt>s</p><h4 id="4-报错non-static-method-inital-cannot-be-referenced-from-a-static-contex"><a class="markdownIt-Anchor" href="#4-报错non-static-method-inital-cannot-be-referenced-from-a-static-contex"></a> 4、报错：Non-static method ‘inital()’ cannot be referenced from a static contex</h4><h4 id="5-idea写spring新建moudle是缺少pomxml文件"><a class="markdownIt-Anchor" href="#5-idea写spring新建moudle是缺少pomxml文件"></a> 5、idea写spring新建moudle是缺少pom.xml文件</h4><p>解决：错误新建了Javaee文件，应该是新建maven文件</p><h4 id="6-动态代理代理的是接口不是他的实现类"><a class="markdownIt-Anchor" href="#6-动态代理代理的是接口不是他的实现类"></a> 6、动态代理代理的是接口，不是他的实现类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Mytest &#123;    public static void main(String[] args) &#123;        ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;Context.xml&quot;);        UserServiceImpl userservice &#x3D; (UserServiceImpl) context.getBean(&quot;userservice&quot;);        userservice.search();    &#125;&#125;</code></pre><pre class="line-numbers language-none"><code class="language-none">报错：Exception in thread &quot;main&quot; java.lang.ClassCastException: com.sun.proxy.$Proxy5 cannot be cast to com.aop.user.UserServiceImpl</code></pre><p>解决：不能用接口的实现类（UserServiceImpl）转换转换Proxy的实现类，它们是同级，应该用接口（UserService）来实现</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java项目部署至服务器</title>
      <link href="//post/Java%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%87%B3%E6%9C%8D%E5%8A%A1%E5%99%A8.html"/>
      <url>//post/Java%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%87%B3%E6%9C%8D%E5%8A%A1%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="部署流程"><a class="markdownIt-Anchor" href="#部署流程"></a> 部署流程：</h3><p>1、服务器配置好Java web项目运行环境</p><p>2、本地将java web项目打包成<code>.jar</code>或<code>.war</code>文件</p><p>3、将打包好的文件上传至服务器并移动至tomcat安装目录下<code>webapps</code>路径下</p><h3 id="环境配置"><a class="markdownIt-Anchor" href="#环境配置"></a> 环境配置</h3><p>1、服务器安装Java环境，即下载jdk</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y install java-1.8.0-openjdk</code></pre><p>2、服务器安装tomcat</p><p><a href="http://tomcat.apache.org/">Tomcat官网</a>下载<code>tar.gz</code>安装包并上传至服务器解压，在bin目录下输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.&#x2F;startup.sh</code></pre><p>启动服务器</p><h3 id="项目打包"><a class="markdownIt-Anchor" href="#项目打包"></a> 项目打包</h3><p>1、点击<code>Project Structure</code> -&gt; 点上边绿色加号 -&gt; 点击 <code>Web Application: Archive</code> -&gt; 选择<code>For'XXX'</code>—&gt; 上面<code>Include in project</code>勾选 -&gt; 点击Apply 、ok</p><p><img src="https://img.promefire.top/blog-img/20240110-7b30539b4855e472bb5932cfa9cc88a5.png" alt="image-20210306175841970"></p><p>2、点击菜单栏的<code>build</code> ，选择<code>build Artifacts</code></p><p><img src="https://img.promefire.top/blog-img/20240110-0b4c042ca25edd73082ba0b0c656343c.png" alt="image-20210306180229527"></p><p>3、最后在<code>out</code>文件夹找到生成的<code>war</code>包</p><h3 id="项目部署"><a class="markdownIt-Anchor" href="#项目部署"></a> 项目部署</h3><p>把打包好的<code>war</code>包放到<code>tomcat</code>的**<code>webapps</code><strong>文件夹下，然后重启<code>tomcat</code>就可以了，</strong><code>tomcat</code>会自动解压**。<br>注意项目启动后访问路径会发生变化，如之前的访问路径是<code>/hello</code>,那么此时就得加上<code>webapps</code>下解压的那个项目文件夹的名字，即<code>/项目文件名/hello</code>。</p><h3 id="附"><a class="markdownIt-Anchor" href="#附"></a> 附：</h3><h3 id="linux开启mysql远程连接"><a class="markdownIt-Anchor" href="#linux开启mysql远程连接"></a> Linux开启Mysql远程连接</h3><p>1、开启用户的远程访问权限</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -uroot -pgrant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;123456&#39; with grant option;flush privileges;</code></pre><blockquote><p>% 代表任意主机，可替换为ip地址。root是用户名，‘123456’指定登录密码，与root用户密码无关，不影响</p></blockquote><p>2、开启防火墙端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent</code></pre><p>3、重启防火墙</p><p>使用idea测试，连接成功</p><p><img src="https://img.promefire.top/blog-img/20240110-dde0659de968aed00aae6a1e2708e9d7.png" alt="image-20210306181017759"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长亭日暮</title>
      <link href="//post/%E9%95%BF%E4%BA%AD%E6%97%A5%E6%9A%AE.html"/>
      <url>//post/%E9%95%BF%E4%BA%AD%E6%97%A5%E6%9A%AE.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="55abc84adb033a282a2507168699f6705f8f37ce3241909328b6d8f2154d1f6c">165d50f05814027fb7fe5e4ae8a088d8f56f9f99da4d666013e31ffb8bb0171fc7fb7e123a0dbdaace91d8f5befd348f68f3bcc4e96bdfebb15056a3980290f29c0c120b90ffb0cebc9c31a4d04c44972ce2a895680349ca25c6eddd2d3749ce833d61fed42c21fe820b3e702c2beecdc5fcb1acbb65358d6f34e59a41c94ec956740406d42b703ac29ea909ccda0f2cc67084675aa625c82c641589d82f84fa515f949338d812eefbb1b1c4434b5d37c2760e312ce0dbe832618a828494f5e33072b4988b53d58c0364d610c4542bb50f48b109029ef59c5e5f2c503995f8f0f19e796da85dbc52b53bf514281f37c86f5f2b31ef59bb5277bea7a34db682babb468a517ca42b40c81ea59968c9755b316af2a7cfda35691cd3308c5cd227ee619a7a357819c1a2c75a04793cde0a282a4424c951d62ebda6e0a4b0f2aaa6bf1591e507a5dddc6a5877b44aee48d47e353b3e69d2d15da7274a9c6bd33e473a9d894142c4002e3d8a8d3c3ff8fabdff05d93d2b344620142241bfb4a4badde0afaec4eaa443e0ee50ac41ccc41811739921d864cf23c5a19f88cfffb03ba4016a28caa2464991534dc613dcc73bd259c76c16f9c8d7239d05602b0a80bdfe6f53d22bea7f2c2bd1e738a13556f7ad7781513221628d9733cdf664bd995744230e21c2a1c3174802c2fc67ab07c9023a1ffaf0d642bcfd08a88756cb3043cc29c4ad72d8d52752d8cfca2972688d3c5ee1b7ff27ea88e6af29259fa9bcdeed66d93df285c6ff7c7c818a2ccc34baf4ec30f8468eddf5c723a13b2b7efe02d5b8c879c19ad17ffc8d4efd4cba126aade8a1bfdd522c2d76883f572c3d644f8fbc21139c588eb6284215a345719202c45b780f09778b69112cbe823dad8bae691d6d08cb13f3f1e44602388ed985945be31a34a1c3917745f1292fa0e6460fe81283549e375dcc8d22c773ed2c1509d0ee2c2d1cb619e445bb067c711fc3d7282f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码123</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现博客每日换肤</title>
      <link href="//post/%E7%88%AC%E5%8F%96bing%E5%9B%BE%E7%89%87.html"/>
      <url>//post/%E7%88%AC%E5%8F%96bing%E5%9B%BE%E7%89%87.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="实现博客每日换肤"><a class="markdownIt-Anchor" href="#实现博客每日换肤"></a> 实现博客每日换肤</h1><h2 id="1-爬取bing图片"><a class="markdownIt-Anchor" href="#1-爬取bing图片"></a> 1、爬取bing图片</h2><p>使用requests库获取网页html，正则表达式获取图片链接，python’库<code>datetime</code>标注日期，crontab建立定时任务每天爬取</p><p>代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import reimport requestsimport datetimeurl &#x3D; &#39;https:&#x2F;&#x2F;www.bing.com&#x2F;&#39;headers &#x3D; &#123;&quot;user-agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;88.0.4324.182 Safari&#x2F;537.36&quot;&#125;response &#x3D; requests.get(url,headers &#x3D; headers).textpicUrl &#x3D;re.findall(r&#39;style&#x3D;&quot;background-image: url(.*?);&#39;,response,re.S)Url &#x3D; &#39;https:&#x2F;&#x2F;www.bing.com&#x2F;&#39; + picUrl[0]pic &#x3D; requests.get(Url)file1 &#x3D; &#39;E:\Desktop\\screen\\&#39; + str(datetime.datetime.now().year)+&#39;-&#39;+str(datetime.datetime.now().month)+&#39;-&#39;+str(datetime.datetime.now().day) + &#39;.jpg&#39;file2 &#x3D; &#39;E:\\blog\\myblog\\themes\\fluid\\source\\img\\&#39; +  &#39;default.jpg&#39;fp &#x3D; open(file1,&#39;wb&#39;)fp.write(pic.content)fp.close()fp &#x3D; open(file2,&#39;wb&#39;)fp.write(pic.content)fp.close()</code></pre><hr><p>file1保存图片</p><p>file2直接将图片下载到hexo目录下fluid主题下的资源文件夹中，命名为default.jpg,自动覆盖上一天的图片。以实现自动更换博客顶部图片</p><p><img src="https://img.promefire.top/blog-img/20240110-1181217953e025666193d123b555cc93.png" alt></p><h2 id="2-编写bat文件实现图片爬取及博客部署"><a class="markdownIt-Anchor" href="#2-编写bat文件实现图片爬取及博客部署"></a> 2、编写bat文件,实现图片爬取及博客部署</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">e:cd Desktop\screenpython download.pycd E:\blog\myblogstart E:\Git\bin\sh.exe -c &quot;hexo clean &amp;&amp; hexo d -g&quot;exit</code></pre><h2 id="3-设置windows定时任务设置为超过时间立即执行"><a class="markdownIt-Anchor" href="#3-设置windows定时任务设置为超过时间立即执行"></a> 3、设置windows定时任务，设置为超过时间立即执行</h2><p><img src="https://img.promefire.top/blog-img/20240110-4a0bbb13fa8782f642dd64597e03f655.png" alt></p><p><img src="https://raw.githubusercontent.com/promefire/Myblog/main/img202303292048218.png" alt="image-20210304195728504"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调栈</title>
      <link href="//post/%E5%8D%95%E8%B0%83%E6%A0%88.html"/>
      <url>//post/%E5%8D%95%E8%B0%83%E6%A0%88.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="单调栈问题"><a class="markdownIt-Anchor" href="#单调栈问题"></a> 单调栈问题</h1><h2 id="什么是单调栈"><a class="markdownIt-Anchor" href="#什么是单调栈"></a> 什么是单调栈</h2><p>维护一个栈，里面的元素的大小按照他们所在栈内的位置，满足一定的单调性</p><h2 id="84-柱状图中最大的矩形"><a class="markdownIt-Anchor" href="#84-柱状图中最大的矩形"></a> 84、<a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram/">柱状图中最大的矩形</a></h2><h3 id="解法一暴力法超时"><a class="markdownIt-Anchor" href="#解法一暴力法超时"></a> 解法一：暴力法（超时）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public int largestRectangleArea(int[] heights) &#123;        int len &#x3D; heights.length;        if(len &#x3D;&#x3D; 1) return heights[0];        int maxArea &#x3D; 0;        for (int i &#x3D; 0;i &lt; len;i++)&#123;            System.out.println(&quot;i &#x3D; &quot; + i);            int left &#x3D; i;            int right &#x3D; i;            for(int j &#x3D; i - 1;j &gt;&#x3D; 0;j--)&#123;                if(heights[j] &lt; heights[i])&#123;                    left &#x3D; j;                    break;                &#125;                else&#123;                    left &#x3D; -1;                    &#x2F;&#x2F;假设之前还有一个比heights【i】小                &#125;            &#125;            for(int k &#x3D; i + 1;k &lt; len;k++)&#123;                if(heights[k] &lt; heights[i])&#123;                    right &#x3D; k ;                    break;                &#125;                else&#123;                    right &#x3D; len;                &#125;            &#125;            System.out.println(&quot;left &#x3D; &quot;+ left);            System.out.println(&quot;right &#x3D; &quot;+ right);            int Area &#x3D; 0;            if(left !&#x3D; i &amp;&amp; right !&#x3D; i)&#123;                Area &#x3D; heights[i] * (right - left - 1);            &#125;            else if((left &#x3D;&#x3D; i &amp;&amp; right !&#x3D; i) || (left !&#x3D; i &amp;&amp; right &#x3D;&#x3D; i) )&#123;                Area &#x3D; heights[i] * (right - left);            &#125;            else if(left - right &#x3D;&#x3D; 0 )&#123;                Area &#x3D; heights[i];            &#125;            System.out.println(&quot;Area &#x3D; &quot;+ Area);            maxArea &#x3D; Area &gt; maxArea? Area:maxArea;        &#125;        return maxArea;    &#125;&#125;</code></pre><h3 id="解法二符合后进先出规律使用栈"><a class="markdownIt-Anchor" href="#解法二符合后进先出规律使用栈"></a> 解法二：符合后进先出规律，使用栈</h3><blockquote><p>栈存放下标，并且对应的高度按从小到大顺序排列</p></blockquote><p>遍历每个高度，如果当前高度比栈顶的高度大，将当前下标入栈，否则，将栈顶元素出栈（这个高度矩形的面积已经可以确定），如果栈顶出栈后栈空，意味着之前没有比他小的柱形，即这个高度的矩形可以扩展到最左边，即<code>width = i</code>。如果出栈后栈不为空，说明<strong>新栈顶</strong>就是栈顶(已出栈）该高度的左边界，即<code>width = i - stack.peekLast() - 1 </code>,记录过程中的最大面积。</p><p>遍历结束后，如果此时栈不为空，并且已知栈内高度从小到大排列，所以可以得出<strong>每一个高度的矩形都可以扩展道最右边</strong>。在对宽度<code>Width</code>的计算中，只需把<code>i</code>替换成数组长度<code>len</code>。</p><p>最后返回最大面积</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public int largestRectangleArea(int[] heights) &#123;        int len &#x3D; heights.length;        &#x2F;&#x2F;特判        if(len &#x3D;&#x3D; 0)&#123;            return 0;        &#125;        if(len &#x3D;&#x3D; 1)&#123;            return heights[0];        &#125;                Deque&lt;Integer&gt; stack &#x3D; new ArrayDeque&lt;&gt;();        int area &#x3D; 0;        &#x2F;&#x2F;遍历每个高度        for(int i &#x3D; 0;i &lt; len;i++)&#123;            int now &#x3D; heights[i];            while(!stack.isEmpty() &amp;&amp; now &lt; heights[stack.peekLast()])&#123;                int height &#x3D; heights[stack.removeLast()];                &#x2F;&#x2F;相同的话将栈顶元素弹出                while(!stack.isEmpty() &amp;&amp; heights[stack.peekLast()] &#x3D;&#x3D; height)&#123;                    stack.removeLast();                &#125;                int width;                &#x2F;&#x2F;栈为空说明没有比这个高度更小的柱形，即这个高度的柱形可以扩展到最左边                if(stack.isEmpty())&#123;                    width &#x3D; i;                &#125;else &#123;                    width &#x3D; i - stack.peekLast() - 1;                &#125;                area &#x3D; Math.max(area,height * width);            &#125;            &#x2F;&#x2F;当前高度比栈顶的高度大，入栈            stack.addLast(i);        &#125;        while(!stack.isEmpty())&#123;            int height &#x3D; heights[stack.removeLast()];            &#x2F;&#x2F;相同的话将栈顶元素弹出            while(!stack.isEmpty() &amp;&amp; heights[stack.peekLast()] &#x3D;&#x3D; height)&#123;                stack.removeLast();            &#125;            int width;            &#x2F;&#x2F;栈为空说明没有比这个高度更小的柱形，即这个高度的柱形可以扩展到最左边            if(stack.isEmpty())&#123;                width &#x3D; len;            &#125;else &#123;                width &#x3D; len - stack.peekLast() - 1;            &#125;            area &#x3D; Math.max(area,height * width);        &#125;        return area;        &#125;&#125;</code></pre><h3 id="解法二优化使用哨兵节点"><a class="markdownIt-Anchor" href="#解法二优化使用哨兵节点"></a> 解法二优化：使用哨兵节点</h3><p>加入哨兵节点 即在数组首尾加入一个高度为0的柱形</p><p>哨兵1可以保证栈非空，从而可以在代码逻辑中删去所有判断栈为空的操作</p><p>哨兵2可以保证一轮遍历结束后，计算出的最大面积即为所求，省去了上面遍历结束后弹栈的操作。因为有哨兵2的存在，它比栈内所有的高度都小，都要进行弹栈操作。简化代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public int largestRectangleArea(int[] heights) &#123;        int len &#x3D; heights.length;        if(len &#x3D;&#x3D; 0)&#123;            return 0;        &#125;        if(len &#x3D;&#x3D; 1)&#123;            return heights[0];        &#125;        int[] Heights &#x3D; new int[len + 2];        for(int i &#x3D; 0;i &lt; len ;i++)&#123;            Heights[i + 1] &#x3D; heights[i];        &#125;        len +&#x3D; 2;        heights &#x3D; Heights;        int area &#x3D; 0;        Deque&lt;Integer&gt; stack &#x3D; new ArrayDeque&lt;&gt;();        stack.addLast(0);&#x2F;&#x2F;加入哨兵节点，保证栈非空        for(int i &#x3D; 1;i &lt; len;i++)&#123;            while( heights[i] &lt; heights[stack.peekLast()])&#123;                int height &#x3D; heights[stack.removeLast()];                int width &#x3D; i - stack.peekLast() - 1;                area &#x3D; Math.max(area,height * width);            &#125;            stack.addLast(i);        &#125;        return area;        &#125;&#125;</code></pre><h2 id="496-下一个更大元素i"><a class="markdownIt-Anchor" href="#496-下一个更大元素i"></a> 496、<a href="https://leetcode-cn.com/problems/next-greater-element-i/">下一个更大元素Ⅰ</a></h2><h3 id="法一-暴力法"><a class="markdownIt-Anchor" href="#法一-暴力法"></a> 法一、暴力法</h3><p><code>hashmap</code>保存数组<code>nums2</code>中元素及对应的下标</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public int[] nextGreaterElement(int[] nums1, int[] nums2) &#123;        HashMap&lt;Integer,Integer&gt; map &#x3D; new HashMap&lt;&gt;();        int[] result &#x3D; new int[nums1.length];        Arrays.fill(result,-1);        for(int i &#x3D; 0;i &lt; nums2.length;i++)&#123;            map.put(nums2[i],i);        &#125;        for(int i &#x3D;0;i &lt; nums1.length;i++)&#123;            int location &#x3D; map.get(nums1[i]);            for(int j &#x3D; location;j &lt; nums2.length;j++)&#123;                if(nums2[j] &gt; nums1[i])&#123;                    result[i] &#x3D; nums2[j];                    break;                &#125;            &#125;        &#125;    return result;    &#125;</code></pre><h3 id="法二单调栈"><a class="markdownIt-Anchor" href="#法二单调栈"></a> 法二：单调栈</h3><p>维护一个单调递减的栈，如果遇到了大于栈顶元素的值，那么这个值一定是栈顶元素的下一个更大的元素。将栈顶元素弹出，写入map。最后将数组元素遍历结束，如果栈不为空，说明站内元素找不到更大的元素，即为-1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public int[] nextGreaterElement(int[] nums1, int[] nums2) &#123;            HashMap&lt;Integer,Integer&gt; map &#x3D; new HashMap&lt;&gt;();            Stack&lt;Integer&gt; stack &#x3D; new Stack&lt;&gt;();            int[] result &#x3D; new int[nums1.length];            for(int i &#x3D; 0;i &lt; nums2.length;i++)&#123;                while (!stack.isEmpty() &amp;&amp; stack.peek() &lt; nums2[i])&#123;                    map.put(stack.pop(),nums2[i]);                &#125;                stack.push(nums2[i]);            &#125;            while (!stack.isEmpty())&#123;                map.put(stack.pop(),-1);            &#125;            for(int i &#x3D; 0;i &lt; nums1.length;i++)&#123;                result[i] &#x3D; map.get(nums1[i]);            &#125;            return result;        &#125;&#125;</code></pre><h3 id="739-每日温度"><a class="markdownIt-Anchor" href="#739-每日温度"></a> <a href="https://leetcode-cn.com/problems/daily-temperatures/">739、每日温度</a></h3><p>简简单单</p><blockquote><p>一开始傻乎乎地将数组元素值存进栈，之后在 知元素值求下表问题上出错，因为我是用map&lt;T[i],i&gt;存储，而给定数组中可以出现重复温度，这些重复温度在map中仅记录最新值。</p><p>应该为存放下标</p></blockquote><blockquote><p>我用的是Stack&lt;&gt;集合，提交只击败24%</p><p>官方题解使用队列模拟栈<code>Deque&lt;Integer&gt; stack = new LinkedList&lt;Integer&gt;();</code>。击败76%，记录学习</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public int[] dailyTemperatures(int[] T) &#123;        Stack&lt;Integer&gt; stack &#x3D; new Stack&lt;&gt;();        int[] result &#x3D; new int[T.length];        Arrays.fill(result,0);        for(int i &#x3D; 0;i &lt; T.length;i++)&#123;            while (!stack.isEmpty() &amp;&amp; T[stack.peek()] &lt; T[i])&#123;                &#x2F;&#x2F;int j &#x3D; stack.pop();                result[stack.peek()] &#x3D; i - stack.pop() ;            &#125;            stack.push(i);        &#125;        return result;    &#125;&#125;</code></pre><p>问题：</p><p>Leetcode 42 接雨水</p><p>Leetcode 503 下一个更大元素||</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(二)  AOP</title>
      <link href="//post/Spring(%E4%BA%8C)%20%20AOP.html"/>
      <url>//post/Spring(%E4%BA%8C)%20%20AOP.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="spring二-aop"><a class="markdownIt-Anchor" href="#spring二-aop"></a> Spring(二)  AOP</h1><p>AOP的底层机制就是动态代理！</p><h2 id="一-静态动态代理"><a class="markdownIt-Anchor" href="#一-静态动态代理"></a> 一、静态/动态代理</h2><p>Spring AOP中的动态代理主要有两种方式，JDK动态代理和CGLIB动态代理。</p><p>JDK动态代理通过反射来接收被代理的类，并且<strong>要求被代理的类必须实现一个接口</strong>。JDK动态代理的核心是InvocationHandler接口和Proxy类。</p><p>如果目标类没有实现接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。</p><p>CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成某个类的子类，注意，CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。</p><p><img src="/post/Spring(%E4%BA%8C)%20%20AOP/20240110-94d3b80d7a83678a768bc863397ef00f.png" alt></p><pre class="line-numbers language-none"><code class="language-none">基于接口的代理两个类InvocationHandler调用处理程序返回结果proxy提供生成动态代理类和实例的静态方法</code></pre><h2 id="二-一些名词"><a class="markdownIt-Anchor" href="#二-一些名词"></a> 二、一些名词</h2><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 …</li><li>切面（ASPECT）：横切关注点 被模块化 的特殊对象。即，它是一个类。</li><li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。</li><li>目标（Target）：被通知对象。</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li><li>切入点（PointCut）：切面通知 执行的 “地点”的定义。</li><li>连接点（JointPoint）：与切入点匹配的执行点。</li></ul><h2 id="三-实现方法"><a class="markdownIt-Anchor" href="#三-实现方法"></a> 三、实现方法：</h2><h3 id="方法一"><a class="markdownIt-Anchor" href="#方法一"></a> 方法一</h3><p>使用spring的API接口（xml配置）主要是Spring接口实现</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;bean id&#x3D;&quot;userservice&quot; class&#x3D;&quot;com.aop.user.UserServiceImpl&quot;&#x2F;&gt;  &lt;bean id&#x3D;&quot;log&quot; class&#x3D;&quot;com.aop.promefire.Log&quot;&#x2F;&gt;  &lt;bean id&#x3D;&quot;afterLog&quot; class&#x3D;&quot;com.aop.promefire.AfterLog&quot;&#x2F;&gt;  &lt;aop:config&gt;      &lt;!--切入点--&gt;      &lt;!--excution表达式   UserServiceImpl.* 表示类中所有方法 --&gt;      &lt;!--UserServiceImpl.*(..) 两个点表示可以有任意个参数--&gt;      &lt;aop:pointcut id&#x3D;&quot;pointcut&quot; expression&#x3D;&quot;execution(* com.aop.user.UserServiceImpl.*(..))&quot;&#x2F;&gt;      &lt;aop:advisor advice-ref&#x3D;&quot;log&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&#x2F;&gt;      &lt;aop:advisor advice-ref&#x3D;&quot;afterLog&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&#x2F;&gt;  &lt;&#x2F;aop:config&gt;</code></pre><h3 id="方法二"><a class="markdownIt-Anchor" href="#方法二"></a> 方法二</h3><p>自定义类实现AOP（主要是切面定义）</p><p>定义一个增强类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class DiyPointCut &#123;    public void before()&#123;        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法前&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);    &#125;    public void after()&#123;        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法后&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);    &#125;&#125;</code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;bean id &#x3D;&quot;diy&quot; class&#x3D;&quot;com.aop.diy.DiyPointCut&quot;&#x2F;&gt;   &lt;aop:config&gt;       &lt;aop:aspect ref&#x3D;&quot;diy&quot;&gt;           &lt;!--切入点--&gt;           &lt;aop:pointcut id&#x3D;&quot;pointcut&quot; expression&#x3D;&quot;execution(* com.aop.user.UserServiceImpl.*(..))&quot;&#x2F;&gt;           &lt;aop:before method&#x3D;&quot;before&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&#x2F;&gt;           &lt;aop:after method&#x3D;&quot;after&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&#x2F;&gt;       &lt;&#x2F;aop:aspect&gt;   &lt;&#x2F;aop:config&gt;</code></pre><h2 id="附execution表达式"><a class="markdownIt-Anchor" href="#附execution表达式"></a> 附：execution表达式</h2><p>语法格式：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">execution(&lt;修饰符模式&gt;？&lt;返回类型模式&gt;&lt;方法名模式&gt;(&lt;参数模式&gt;)&lt;异常模式&gt;?)</code></pre><p>示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">execution(* com.sample.service.impl..*.*(..))</code></pre><p>解释：</p><ul><li>execution()，表达式的主体</li><li>第一个“*”符号，表示返回值类型任意；</li><li>com.sample.service.impl，AOP所切的服务的包名，即我们的业务部分</li><li>包名后面的“…”，表示当前包及子包</li><li>第二个“*”，表示类名，即所有类</li><li>.*(…)，表示任何方法名，括号表示参数，两个点表示任何参数类型</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(一)</title>
      <link href="//post/Spring(%E4%B8%80).html"/>
      <url>//post/Spring(%E4%B8%80).html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="spring"><a class="markdownIt-Anchor" href="#spring"></a> Spring</h2><h2 id="一-ioc理论"><a class="markdownIt-Anchor" href="#一-ioc理论"></a> 一、IOC理论</h2><p>对于新增或修改业务，不需要修改代码。只需要修改配置文件，</p><h2 id="二-实例化容器"><a class="markdownIt-Anchor" href="#二-实例化容器"></a> 二、实例化容器</h2><h4 id="bean骨架"><a class="markdownIt-Anchor" href="#bean骨架"></a> bean骨架</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;    &lt;bean id&#x3D;&quot;...&quot; class&#x3D;&quot;...&quot;&gt;        &lt;!-- collaborators and configuration for this bean go here --&gt;    &lt;&#x2F;bean&gt;    &lt;bean id&#x3D;&quot;...&quot; class&#x3D;&quot;...&quot;&gt;        &lt;!-- collaborators and configuration for this bean go here --&gt;    &lt;&#x2F;bean&gt;    &lt;!-- more bean definitions go here --&gt;&lt;&#x2F;beans&gt;</code></pre><h2 id="三-ioc创建对象方式"><a class="markdownIt-Anchor" href="#三-ioc创建对象方式"></a> 三、IOC创建对象方式</h2><p>1、默认使用无参构造创建</p><p>2、使用有参构造</p><p>​1、下标赋值</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.promefire.injection.User&quot;&gt;        &lt;!-- collaborators and configuration for this bean go here --&gt;        &lt;constructor-arg index&#x3D;&quot;0&quot; value&#x3D;&quot;智杰&quot;&#x2F;&gt;    &lt;&#x2F;bean&gt;</code></pre><p>​2、类型赋值</p><pre class="line-numbers language-Xml" data-language="Xml"><code class="language-Xml">&lt;bean id &#x3D; &quot;user&quot; class &#x3D; &quot;com.promefire.injection.User&quot;&gt;        &lt;constructor-arg type&#x3D;&quot;java.lang.String&quot; value&#x3D;&quot; （Type赋值）智杰&quot;&#x2F;&gt;    &lt;&#x2F;bean&gt;</code></pre><blockquote><p>不建议使用，可能会有多个相同类型的变量</p></blockquote><p>​3、参数名</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;bean id &#x3D; &quot;user&quot; class &#x3D; &quot;com.promefire.injection.User&quot;&gt;        &lt;constructor-arg name&#x3D;&quot;name&quot; value&#x3D;&quot;promefire&quot;&#x2F;&gt;    &lt;&#x2F;bean&gt;</code></pre><p>配置文件加载的时候，容器中管理的对象已经被初始化</p><blockquote><p>不能忘记写有参构造函数，否则会报错</p></blockquote><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Test    public void text1() &#123;        ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;Userbeans.xml&quot;);        User user &#x3D; (User) context.getBean(&quot;user&quot;);        &#x2F;&#x2F;User user &#x3D; context.getBeans(&quot;user&quot;,User.class);        &#x2F;&#x2F;可以省去强转类型        System.out.println(user);    &#125;</code></pre><h2 id="四-spring-配置"><a class="markdownIt-Anchor" href="#四-spring-配置"></a> 四、Spring 配置</h2><h4 id="1-别名"><a class="markdownIt-Anchor" href="#1-别名"></a> 1、别名</h4><pre class="line-numbers language-none"><code class="language-none"></code></pre><h2 id="五-依赖注入di"><a class="markdownIt-Anchor" href="#五-依赖注入di"></a> 五、依赖注入DI</h2><h4 id="1-构造器注入"><a class="markdownIt-Anchor" href="#1-构造器注入"></a> 1、构造器注入</h4><h4 id="2-set注入"><a class="markdownIt-Anchor" href="#2-set注入"></a> 2、set注入</h4><p>基于 setter 的 DI</p><h4 id="3-拓展注入"><a class="markdownIt-Anchor" href="#3-拓展注入"></a> 3、拓展注入</h4><blockquote><p>需要加入xml依赖</p></blockquote><p>P命名空间注入(proprety)</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">xmlns:p&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;p&quot;&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.promefire.injection.User&quot; p:name&#x3D;&quot;智杰&quot; p:age&#x3D;&quot;18&quot;&#x2F;&gt;</code></pre><p>C命名空间注入（construct）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"> xmlns:c&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;c&quot;&lt;bean id&#x3D;&quot;user2&quot; class&#x3D;&quot;com.promefire.injection.User&quot; c:name&#x3D;&quot;promefire&quot; c:age&#x3D;&quot;20&quot; &#x2F;&gt;</code></pre><h4 id="4-bean生命周期"><a class="markdownIt-Anchor" href="#4-bean生命周期"></a> 4、bean生命周期</h4><p>单例模型（默认）：<code>scope</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.promefire.injection.User&quot; p:name&#x3D;&quot;promefire&quot; p:age&#x3D;&quot;18&quot; scope&#x3D;&quot;singleton&quot;&#x2F;&gt;</code></pre><p>原型模式 ：每次从容器中取出一个对象，都是一个新的对象</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.promefire.injection.User&quot; p:name&#x3D;&quot;promefire&quot; p:age&#x3D;&quot;18&quot; scope&#x3D;&quot;prototype&quot;&#x2F;&gt;</code></pre><h2 id="六-自动装配"><a class="markdownIt-Anchor" href="#六-自动装配"></a> 六、自动装配</h2><p>1、在xml中显示的配置</p><p>2、在Java中显示的配置</p><p>3、隐式的自动装配bean</p><h4 id="1-byname"><a class="markdownIt-Anchor" href="#1-byname"></a> 1、Byname</h4><p>​       会自动在容器上下文寻找与自己对象set方法后面的<strong>值</strong>对应的bean id</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;bean id&#x3D;&quot;people&quot; class&#x3D;&quot;com.promefire.pojo.People &quot; autowire&#x3D;&quot;byName&quot; &#x2F;&gt;</code></pre><blockquote><p>必须名字唯一</p></blockquote><h4 id="2-bytype"><a class="markdownIt-Anchor" href="#2-bytype"></a> 2、ByType</h4><p>​    会自动在容器上下文寻找与自己对象set方法对象属性<strong>类型</strong>相同的bean</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;bean id&#x3D;&quot;people&quot; class&#x3D;&quot;com.promefire.pojo.People &quot; autowire&#x3D;&quot;byType&quot; &#x2F;&gt;</code></pre><blockquote><p>必须类型唯一</p></blockquote><h4 id="3-使用注解实现自动装配"><a class="markdownIt-Anchor" href="#3-使用注解实现自动装配"></a> 3、使用注解实现自动装配</h4><h6 id="autowired注解"><a class="markdownIt-Anchor" href="#autowired注解"></a> @Autowired注解</h6><p>1、导入约束</p><p>2、配置注解的支持:<a href="context:annotation-config/">context:annotation-config/</a></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;    xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;    &lt;context:annotation-config&#x2F;&gt;&lt;&#x2F;beans&gt;</code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class People &#123;    @Autowired    private Cat cat;    @Autowired    private Dog dog;    private String name;</code></pre><blockquote><p>属性前加@Autowired注解可以省略setter（）方法，前提是属性在IOC容器中存在且名字相同</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class People &#123;    @Autowired(required &#x3D; false)    private Cat cat;    @Autowired    @Qualifier(&quot;dog111&quot;)&#x2F;&#x2F;显示地指定一个id    private Dog dog;    private String name;        </code></pre><blockquote><p>自动装配环境比较复杂时，可以用Qualifier（“XXX”）配合Autowired使用</p></blockquote><h6 id="resource注解"><a class="markdownIt-Anchor" href="#resource注解"></a> @Resource注解</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class People &#123;    @Resource(name &#x3D; &quot;cat2&quot;)    private Cat cat;    @Resource    private Dog dog;    private String name;</code></pre><p>@Resource和@Autowired比较:</p><ul><li>都是用来自动装配，都可以放在属性字段上</li><li>@Autowired 默认先使用byType，必须要求这个对象存在</li><li>@Resource 默认ByName，找不到就用ByType实现，还找不到，报错</li></ul><h2 id="七-使用注解开发"><a class="markdownIt-Anchor" href="#七-使用注解开发"></a> 七、使用注解开发</h2><blockquote><p>1、开启注解约束，</p><p>2、扫描包，使该包下注解生效</p></blockquote><p>1、bean</p><p>2、属性如何注入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Componentpublic class User &#123;    &#x2F;&#x2F;等价于&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.promefire.dao.User&quot;&gt;    &#x2F;&#x2F;        &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;智杰&quot;&#x2F;&gt;    &#x2F;&#x2F;    &lt;&#x2F;bean&gt;    &#x2F;&#x2F;@Value(&quot;智杰&quot;)    public String name ;    @Value(&quot;智杰&quot;)    public void setName(String name) &#123;        this.name &#x3D; name;    &#125;&#125;</code></pre><p>3、衍生的注解</p><p>4、自动装配</p><ul><li>@Autowired：自动装配，通过类型，名字<ul><li>如果不能唯一指定，需要@Qualifier(“xxx”)显示指定一个id</li></ul></li><li>@Nullable :该字段可以为null</li><li>@Resource: 自动装配，通过名字，类型</li></ul><p>5、作用域</p><ul><li>@Scope(“singleton”)</li><li>@Scope(“prototype”)</li></ul><h2 id="八-流程"><a class="markdownIt-Anchor" href="#八-流程"></a> 八、流程</h2><h3 id="springioc启动流程"><a class="markdownIt-Anchor" href="#springioc启动流程"></a> SpringIOC启动流程</h3><p><img src="https://img.promefire.top/blog-img/20240110-6ee10b14a34027261db46c6af7cfb69e.png" alt></p><h3 id="ioc容器启动主线"><a class="markdownIt-Anchor" href="#ioc容器启动主线"></a> IOC容器启动主线</h3><p><img src="https://img.promefire.top/blog-img/20240110-659cc68879eaccec21f21fc625982e5c.png" alt></p><h3 id="文档注释"><a class="markdownIt-Anchor" href="#文档注释"></a> 文档注释</h3><table><thead><tr><th>应用场景</th><th style="text-align:left">注解</th><th style="text-align:left">注解说明</th></tr></thead><tbody><tr><td>处理请求</td><td style="text-align:left">@Controller</td><td style="text-align:left">处理 Http 请求</td></tr><tr><td>处理请求</td><td style="text-align:left">@RestController</td><td style="text-align:left">@Controller 的衍生注解</td></tr><tr><td>路由请求</td><td style="text-align:left">@RequestMapping</td><td style="text-align:left">路由请求 可以设置各种操作方法</td></tr><tr><td>路由请求</td><td style="text-align:left">@GetMapping</td><td style="text-align:left">GET 方法的路由</td></tr><tr><td>路由请求</td><td style="text-align:left">@PostMapping</td><td style="text-align:left">POST 方法的路由</td></tr><tr><td>路由请求</td><td style="text-align:left">@PutMapping</td><td style="text-align:left">PUT 方法的路由</td></tr><tr><td>路由请求</td><td style="text-align:left">@DeleteMapping</td><td style="text-align:left">DELETE 方法的路由</td></tr><tr><td>请求参数</td><td style="text-align:left">@PathVariable</td><td style="text-align:left">处理请求 url 路径中的参数 /user/{id}</td></tr><tr><td>请求参数</td><td style="text-align:left">@RequestParam</td><td style="text-align:left">处理问号后面的参数</td></tr><tr><td>请求参数</td><td style="text-align:left">@RequestBody</td><td style="text-align:left">请求参数以json格式提交</td></tr><tr><td>返回参数</td><td style="text-align:left">@ResponseBody</td><td style="text-align:left">返回 json 格式</td></tr></tbody></table><ul><li>依赖：spring-webmvc</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework&#x2F;spring-webmvc --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;    &lt;version&gt;5.2.9.RELEASE&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre><blockquote><p>快捷键</p></blockquote><p><code>Ctrl+Alt+V</code>:生成变量名</p><p><code>psvm</code>：main函数</p><p><code>sout</code>:输出</p><p><code>Alt + Enter</code>:强制类型转换</p><p><code>Ctrl + /</code>: 注释</p><p><code>Ctrl + SHift + /</code>：块注释</p><blockquote><p>踩坑</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&lt;bean id&#x3D;&quot;hello&quot; class&#x3D;&quot;com.promefire.Hello&quot;&gt;        &lt;property name&#x3D;&quot;str&quot; value&#x3D;&quot;Spring&quot;&#x2F;&gt;    &lt;&#x2F;bean&gt;</code></pre><blockquote><p>name 后面的值 要与Hello类中变量相同</p></blockquote><blockquote><p>id = 变量名 class = new的对象</p><p>Hello hello =  new Hello()</p><p>property 给对象中的属性设置一个值</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10修改中文用户名</title>
      <link href="//post/win10%E4%BF%AE%E6%94%B9%E4%B8%AD%E6%96%87%E7%94%A8%E6%88%B7%E5%90%8D.html"/>
      <url>//post/win10%E4%BF%AE%E6%94%B9%E4%B8%AD%E6%96%87%E7%94%A8%E6%88%B7%E5%90%8D.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="win10修改中文用户名"><a class="markdownIt-Anchor" href="#win10修改中文用户名"></a> win10修改中文用户名</h3><p>1、win+R输入regedit</p><p>2、CTRL + F 搜索 ProfileList</p><p>从下面所有中找到<code>C\Users\中文用户名</code>一项，修改为英文用户名</p><p>3、重启，将C盘users下中文用户名修改为第二步修改的英文用户名，再次重启</p>]]></content>
      
      
      <categories>
          
          <category> win10 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秒杀系统</title>
      <link href="//post/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F(%E4%B8%80%EF%BC%89.html"/>
      <url>//post/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F(%E4%B8%80%EF%BC%89.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="学习记录"><a class="markdownIt-Anchor" href="#学习记录"></a> 学习记录</h1><h3 id="1-xml-cdata"><a class="markdownIt-Anchor" href="#1-xml-cdata"></a> 1、XML CDATA</h3><p>使用方法：<!--[CDATA[文本内容]]--></p><p>XML文档中所有的文本均会被解析器解析，只有CDATA区段中的文本会被解析器忽略</p><h3 id="2-mybatis和spring整合方式"><a class="markdownIt-Anchor" href="#2-mybatis和spring整合方式"></a> 2、mybatis和spring整合方式</h3><ul><li>XML提供SQL</li><li>DAO接口Mapper</li></ul><h3 id="3-jdbc连接池是个什么东西"><a class="markdownIt-Anchor" href="#3-jdbc连接池是个什么东西"></a> 3、jdbc连接池是个什么东西?</h3><p>在增删改查操作中，避免频繁地创建和销毁JDBC连接，可以通过连接池复制已经创建好的连接</p><h3 id="4-class-path-resource-jdbcproperties-cannot-be-opened-because-it-does-not-exist"><a class="markdownIt-Anchor" href="#4-class-path-resource-jdbcproperties-cannot-be-opened-because-it-does-not-exist"></a> 4、class path resource [jdbc.properties] cannot be opened because it does not exist</h3><p>之前的写法:</p><p><img src="https://img.promefire.top/blog-img/20240110-091cf14df515a4bbd9d27b5371b20820.png" alt></p><p>修改为 相对路径 即 <code>spring/jdbc.properties</code>：</p><p><img src="https://img.promefire.top/blog-img/20240110-559101d18e3440a463d607df0433ec23.png" alt></p><h3 id="5-connections-could-not-be-acquired-from-the-underlying-database"><a class="markdownIt-Anchor" href="#5-connections-could-not-be-acquired-from-the-underlying-database"></a> 5、Connections could not be acquired from the underlying database!</h3><p>折腾了半天，最后把<code>jdbc.properties</code>中的配置直接写到<code>spring-dao.xml</code>中</p><p><img src="https://img.promefire.top/blog-img/20240110-15769ecdac7966dc51c2b1d5615794b1.png" alt></p><p>结果是一个 &amp; 报错 ，删掉&amp;及后面的就成功了，我直接？？？</p><p>xml配置文件中，要用<code>&amp;amp;</code>代替</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;property name&#x3D;&quot;jdbcUrl&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;seckill?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&quot;&#x2F;&gt;</code></pre><p><img src="https://raw.githubusercontent.com/promefire/Myblog/main/img202303292048105.png" alt="img"></p><p>得出结论，<code>spring-dao.xml</code>不能读取<code>jdbc.properties</code>文件</p><p>暂未解决</p><p>6、java的运行不会保留形参</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">List&lt;Seckill&gt; queryAll(int offet, int limit)-&gt;queryAll(arg0,arg1);</code></pre><p>如果之后操作需要形参，如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;select id&#x3D;&quot;queryAll&quot; resultType&#x3D;&quot;Seckill&quot;&gt;        select seckill_id,NAME,NUMBER ,start_time,end_time,create_time        from seckill        order by create_time DESC        limit #&#123;offset&#125;,#&#123;limit&#125;    &lt;&#x2F;select&gt;</code></pre><p>则可以通过<code>@Param()</code>注解实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">List&lt;Seckill&gt; queryAll(@Param(&quot;offset&quot;) int offset,@Param(&quot;limit&quot;) int limit);</code></pre><h3 id="7-error-instantiating-class-orgseckillentityseckill-with-invalid-types-or-values"><a class="markdownIt-Anchor" href="#7-error-instantiating-class-orgseckillentityseckill-with-invalid-types-or-values"></a> 7、Error instantiating class org.seckill.entity.Seckill with invalid types () or values ().</h3><p>seckill实体类缺少无参构造</p><h3 id="8-这个dao层单元测试之前一直有几个属性报null检查之后发现是两个实体类共有的属性变量名不一致造成的"><a class="markdownIt-Anchor" href="#8-这个dao层单元测试之前一直有几个属性报null检查之后发现是两个实体类共有的属性变量名不一致造成的"></a> 8、这个dao层单元测试之前一直有几个属性报Null，检查之后发现是两个实体类共有的属性变量名不一致造成的。</h3><p><img src="https://raw.githubusercontent.com/promefire/Myblog/main/img202303292048222.png" alt="image-20210206213044063"></p><h2 id="service层"><a class="markdownIt-Anchor" href="#service层"></a> Service层</h2><p>9、报错：不兼容的类型</p><p>Incompatible types. Required:  java.util.logging.Logger<br>Found:       org.slf4j.Logger</p><p>解决：</p><p><img src="https://img.promefire.top/blog-img/20240110-6f5456cdffcf9c0998f576a9d7c26ece.png" alt></p><p>将划红线的修改为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import org.slf4j.Logger;import org.slf4j.LoggerFactory;</code></pre><p>10、 roll back回滚？spring事务</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Connection conn &#x3D; DriverManager.getConnection();try &#123;      conn.setAutoCommit(false);  &#x2F;&#x2F;将自动提交设置为false                             执行CRUD操作     conn.commit();      &#x2F;&#x2F;当两个操作成功后手动提交  &#125; catch (Exception e) &#123;      conn.rollback();    &#x2F;&#x2F;一旦其中一个操作出错都将回滚，所有操作都不成功    e.printStackTrace();  &#125; finally &#123;    conn.colse();&#125;</code></pre><p>​事务是一系列的动作，一旦其中有一个动作出现错误，必须全部回滚，系统将事务中对数据库的所有已完成的操作全部撤消，滚回到事务开始的状态，避免出现由于数据不一致而导致的接下来一系列的错误。事务的出现是为了确保数据的完整性和一致性，在目前企业级应用开发中，事务管理是必不可少的。</p><p>11、spring整合mybatis Dao层注入失败,但是单元测试通过，无报错</p><p><img src="https://raw.githubusercontent.com/promefire/Myblog/main/img202303292048258.png" alt="image-20210222184343517"></p><h2 id="web层"><a class="markdownIt-Anchor" href="#web层"></a> Web层</h2><p>1、Restful是什么</p><p>一种url规范</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/30396391">https://zhuanlan.zhihu.com/p/30396391</a></p><p>2、Spring的Model</p><p>作用：从控制层直接返回前端所需的数据</p><p>3、@RequestMapping()</p><p>参数produce：指定返回值类型还可以指定字符编码</p><p>@Responsebody</p><p>@ResponseBody的作用其实是将java对象转为json格式的数据</p><p>4、@Pathvariable()</p><p>通过 @PathVariable 可以将URL中占位符参数{xxx}绑定到处理器类的方法形参中@PathVariable(“xxx“)</p><p>5、重定向和请求转发</p><p>6、@CookieValue</p><p><strong>作用：</strong><br>用于把指定cookie名称的值传入控制器方法参数。<br><strong>属性：</strong><br><code>value</code>：指定cookie的名称。<br><code>required</code>：是否必须有此cookie。</p><p>7、重复秒杀、秒杀关闭异常，在service层直接抛出，需要在controller层处理</p><p>8、静态包含</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@include file&#x3D;&quot;common&#x2F;head.jsp&quot;%&gt;    &lt;%--静态包含--%&gt;</code></pre><p>9、</p><p>jsp页面中<a> 标签中的target=_blank是什么意思?</a></p><p>解答：<br>表示该连接在新窗口中打开</p><p>_self相同框架<br>_top整页<br>_blank新建一个窗口<br>_parent父窗口<br>其它的就是自定义了，可以指向已有的窗口名称</p><p>10、html页面中文乱码</p><p>查看页面编码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&quot;windows-1252&quot;</code></pre><p>修改系统编码（失败）</p><p><img src="https://raw.githubusercontent.com/promefire/Myblog/main/img202303292048773.png" alt="img"></p><p>修稿jsp文件编码设置</p><p>原先设置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@page contentType&#x3D;&quot;text&#x2F;html; charset &#x3D; utf-8&quot; language&#x3D;&quot;java&quot; %&gt;</code></pre><p>解决方案：将<code>charser = utf-8</code>修改为<code>pageEncoding=utf-8</code></p><p>pageEncoding是jsp文件本身的编码</p><p>contentType的charset是指服务器发送给客户端时的内容编码</p><p>成功显示：</p><p><img src="https://img.promefire.top/blog-img/20240110-318b07cbf03b2cbb43c2bbf0a09de405.png" alt></p><p>11、jquery选择器,选择到一个节点</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">var killPhoneModal &#x3D; $(&#39;#killPhoneModal&#39;)</code></pre><p>12、电话输入框无法弹出</p><p>原因：未能成功加载<code>seckill.js</code></p><p>将路径<code>resources/script/seckill.js</code>前加上**‘ / ’**</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;script src&#x3D;&quot;&#x2F;resources&#x2F;script&#x2F;seckill.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;</code></pre><p><img src="https://img.promefire.top/blog-img/20240110-26620a5c039d64d97ea7b5d52df933b5.png" alt></p><p>13、电话输入框无法输入</p><p>解决方法：加入一个样式</p><p><img src="https://img.promefire.top/blog-img/20240110-ed89ebdecdc0c6561ec1210390919850.png" alt></p><p>14、/time/now加载失败</p><p><img src="https://gitee.com/Promefire/pictures/raw/master/img/20210301220229.png" alt="image-20210301220229002"></p><p>原因是web层SeckillController中没有加入@ResponseBody注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(value &#x3D; &quot;&#x2F;time&#x2F;now&quot;,method &#x3D; RequestMethod.GET)   @ResponseBody   public SeckillResult&lt;Long&gt; time()&#123;       Date now  &#x3D; new Date();       return new SeckillResult(true,now.getTime());   &#125;</code></pre><p>15、Uncaught TypeError: killPhoneModal.modal is not a function</p><p>jqury包含了两次，注释掉一个</p><p><img src="https://img.promefire.top/blog-img/20240110-ccb823cce1104dec9a2875b518202f39.png" alt></p><p>16、修改Js无效</p><p>清除浏览器缓存并按F12 network中禁用缓存</p><p>17、IDEA中 JSP/HTML文件无法导入js文件</p><p>解决，需要把js文件所在的上级目录设置为<code>resources</code>文件夹</p><p><img src="https://img.promefire.top/blog-img/20240110-6fa24407b898529afb8794b7ee10dea4.png" alt></p><p>18、电话输入框一直弹出</p><p>原因是<code>seckill.js</code>文件中  <code>cookie</code>值与<code>SeckillController.java</code>中cookie值不一致，导致无法读入输入的手机号</p><p><img src="https://img.promefire.top/blog-img/20240110-8ef8652825cb390002de42cf972edbef.png" alt></p><p><img src="https://raw.githubusercontent.com/promefire/Myblog/main/img202303292048788.png" alt="image-20210312221724921"></p><p>最后</p><p><img src="https://img.promefire.top/blog-img/20240110-1f3db45793770abe9eb653531987924b.png" alt></p><p>数据库</p><p><img src="https://img.promefire.top/blog-img/20240110-b2fb2b70294dd22309eb597fec60b14a.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客相关</title>
      <link href="//post/hexo%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3.html"/>
      <url>//post/hexo%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>还行吧，空有博客没有内容是不行滴，要多记录哦</li><li>贴上参考教程:<a href="https://www.cnblogs.com/visugar/p/6821777.html">https://www.cnblogs.com/visugar/p/6821777.html</a></li></ul><hr><p>0、使用的插件</p><p>寒假期间入手一台阿里云ECS服务器，现将hexo博客由GithubPage迁到阿里云上</p><p>现记录如下：</p><p>1、本地有git和npm但是hexo命令无效</p><p>解决：检查后是环境变量的问题，应把hexo根目录下<code>~\node_modules\.bin</code>添加至系统变量.</p><p>2、修改完文章部署命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean &amp;&amp; hexo d -g</code></pre><p>等于</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean    --清除缓存，每次部署前建议执行这一步hexo generate --生成静态文件hexo deploy   --部署至服务器</code></pre><p>将环境文件推送至github</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git add . &amp; git commit -m &quot;save&quot; &amp; git push origin source</code></pre><p>3、一些命令</p><pre class="line-numbers language-none"><code class="language-none">hexo new &quot;文章题目&quot;         --新建文章hexo new page &quot;pagename&quot;   --新建页面</code></pre><p>4、hexo同步管理</p><blockquote><p>将本地的一些环境文件存放至github，防止误删或使用新电脑</p></blockquote><ul><li>在<code>promefire.github.io</code>仓库中新建一个<code>source</code>分支</li><li>github切换到source分支，<code>git clone</code>到本地</li><li>进入<code>promefire.github.io</code>文件夹，只保留<code>.git</code>文件夹，其他全部删除</li><li><code>git add -A</code>  <code>git commit -m &quot;some description&quot;</code> <code>git push origin</code>推送至github，此时<code>source</code>分支下为空白</li><li>将<code>promefire.github.io</code>目录下的<code>.git</code>文件夹复制到hexo根目录下，此时，hexo项目已经变成了和远程hexo分支关联的本地仓库了</li><li>每次发布新文章或修改时，<code>git add . &amp; git commit -m &quot;save&quot; &amp; git push origin source</code>即可把环境文件推送到source分支，然后再使用<code>hexo d -g</code>发布网站。</li></ul><p>5、更改后每次都要执行hexo三件套+备份实在太麻烦了，新建一个<code>deploy.sh</code>脚本放在博客目录下，需要部署和备份时运行即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo generatehexo deploygit add .git commit -m &quot;save&quot;git push</code></pre><p><code>git add xx</code> 后悔了，使用 <code>git reset &lt;file&gt;</code> 或<code>git reset</code> 撤销</p><p>6、博客中插入哔哩哔哩视频,视频要点分享–&gt;嵌入代码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;div style&#x3D;&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;&gt;&lt;iframe src&#x3D;&quot;&#x2F;&#x2F;player.bilibili.com&#x2F;player.html?aid&#x3D;529707372&amp;bvid&#x3D;BV1Du411Y7tB&amp;cid&#x3D;1161446244&amp;page&#x3D;1&quot;scrolling&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; frameborder&#x3D;&quot;no&quot; framespacing&#x3D;&quot;0&quot; allowfullscreen&#x3D;&quot;true&quot; style&#x3D;&quot;position: absolute; width: 100%; height: 100%; Left: 0; top: 0;&quot;&gt; &lt;&#x2F;iframe&gt;&lt;&#x2F;div&gt;</code></pre><p>7、空格消失</p><p>把tab替换成这个</p><p><code>&lt;html&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/html&gt; </code></p><p>参考：<a href="https://www.jianshu.com/p/fceaf373d797">https://www.jianshu.com/p/fceaf373d797</a></p><p>8、草稿</p><p>有些时候某篇文章还没写完，发布其他文章的时候会把未完成的也发布，hexo自带了草稿功能，我竟然一直不知道，都是在其他地方写完再拉到post文件夹下</p><ul><li>新建草稿</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new draft &lt;title&gt;</code></pre><p>Hexo 另外提供 <code>draft</code> 机制，它的原理是新文章将建立在 <code>source/_drafts</code> 目录下，因此 <code>hexo generate</code> 并不会将其编译到 <code>public</code> 目录下，所以 <code>hexo deploy</code> 也不会将其部署到 GitHub。</p><ul><li>本机预览草稿</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo S --draft</code></pre><ul><li>将草稿发布为正式文章</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo P &lt;filename&gt;</code></pre><p>其中 <code>&lt;filename&gt;</code> 为不包含 <code>md</code> 后缀的文章名称。它的原理只是将文章从 <code>source/_drafts</code> 移动到 <code>source/_posts</code> 而已。</p><p>9、</p><p>报错</p><blockquote><p>Updates were rejected because the remote contains work that you do<br>not have locally. This is usually caused by another repository pushing<br>to the same ref. You may want to first integrate the remote changes<br>(e.g., ‘git pull …’) before pushing again.<br>See the ‘Note about fast-forwards’ in ‘git push --help’ for details.</p></blockquote><p>解决</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git pull origin master &#x2F;&#x2F;run this first, thengit push origin master</code></pre><p>10、git push后代码回滚</p><p>今天莫名奇妙，博客首页404了，我寻思也没改什么东西，最后选择回滚代码解决。</p><ul><li><code>git log</code> 查看push日志</li><li><code>git reset --hard 回退到的版本号</code></li><li><code>git push -f origin</code> 强制同步</li></ul><p>11、hexo永久链接设置英文</p><blockquote><p>Markdown <code>Front-matter</code> 区域可以看到，我这里除了 <code>title</code>， <code>date</code> 以及 <code>tags</code> 外，自己添加了一个新的变量 <code>urlname</code> ，这个新的变量用来保存每个文章的英文名字，这样一来可以有利于 SEO，二来可以缩短博客文章 URL 的层数。</p></blockquote><p>那么，<code>Front-matter</code> 区域新增一个变量 <code>urlname</code> ，值为前面说的英文字母格式</p><p>再在 Hexo 配置文件 <code>_config.yml</code> 中，把 <code>permalink:</code> 的值设为 <code>urlname.html</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">permalink: :urlname.html</code></pre><p>12、修改创建文章时<code>Front-matter</code> 区域模板</p><p>修改<code>/scaffolds/post.md</code>文件即可,修改如下</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:    -categories:    -cover:description: </code></pre><p>13、文章置顶</p><p><code>sticky</code> 数字越大，越靠前</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">--- title: Hello Worlddate: 2013&#x2F;7&#x2F;13 20:46:25sticky: 100---</code></pre><p>14、文章永久链接</p><p>原先使用title会在链接中存在中文，复制粘贴打开不方便，使用日期时间作为url</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># URL## Set your site url here. For example, if you use GitHub Page, set url as &#39;https:&#x2F;&#x2F;username.github.io&#x2F;project&#39;url: http:&#x2F;&#x2F;example.compermalink: &#x2F;post&#x2F;:year:month:day:hour:minute:second.html#permalink: &#x2F;post&#x2F;:title.htmlpermalink_defaults:pretty_urls:  trailing_index: true # Set to false to remove trailing &#39;index.html&#39; from permalinks  trailing_html: true # Set to false to remove trailing &#39;.html&#39; from permalinks</code></pre><p>15、导入外部CSS</p><p>在<code>[BlogRoot]</code>的<code>source</code>文件夹下新建CSS文件夹，存放<code>.css</code>文件</p><p>在主题<code>_config.butterfly.yml</code> 的<code>inject</code>下导入</p><p><img src="https://img.promefire.top/blog-img/20240116-59304e7eefe2627c7c927e4dc667d4dc.png" alt="image-20240116155059633"></p><p>16、Git设置代理</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:10808&#39; git config --global https.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:10808&#39;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
