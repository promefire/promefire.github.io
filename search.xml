<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kubernetes</title>
      <link href="//post/kubernetes.html"/>
      <url>//post/kubernetes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、k8s中文文档：<a href="http://docs.kubernetes.org.cn/">http://docs.kubernetes.org.cn/</a></p><p>2、minikube官方文档：<a href="https://minikube.sigs.k8s.io/docs/start/?arch=%2Flinux%2Fx86-64%2Fstable%2Fbinary+download">https://minikube.sigs.k8s.io/docs/start/?arch=%2Flinux%2Fx86-64%2Fstable%2Fbinary+download</a></p><p>3、在线学习文档：<a href="https://kubernetes.io/zh-cn/docs/tutorials/kubernetes-basics/">https://kubernetes.io/zh-cn/docs/tutorials/kubernetes-basics/</a></p><p>4、云原生minikube文档（！）：<a href="https://www.zhaowenyu.com/minikube-doc/ops/minikube.html">https://www.zhaowenyu.com/minikube-doc/ops/minikube.html</a></p><p>5、参考：<a href="https://blog.csdn.net/haohaifeng002/article/details/116788698">https://blog.csdn.net/haohaifeng002/article/details/116788698</a></p><p>6、k8s在线环境：<a href="https://killercoda.com/playgrounds/scenario/kubernetes">https://killercoda.com/playgrounds/scenario/kubernetes</a></p><h2 id="是什么"><a class="markdownIt-Anchor" href="#是什么"></a> 是什么？</h2><p><font style="color:rgb(51, 51, 51);">Kubernetes是容器集群管理系统，是一个开源的平台，可以实现容器集群的自动化部署、自动扩缩容、维护等功能。</font></p><h2 id="font-stylecolorrgb51-51-51与docker区别font"><a class="markdownIt-Anchor" href="#font-stylecolorrgb51-51-51与docker区别font"></a> <font style="color:rgb(51, 51, 51);">与Docker区别</font></h2><table><thead><tr><th><font style="color:rgb(51, 51, 51);">特性</font></th><th><font style="color:rgb(51, 51, 51);">Docker</font></th><th><font style="color:rgb(51, 51, 51);">Kubernetes</font></th></tr></thead><tbody><tr><td><strong>核心功能</strong></td><td><font style="color:rgb(51, 51, 51);">创建和运行单个容器（容器化）</font></td><td><font style="color:rgb(51, 51, 51);">在集群中管理和调度大量容器（容器编排）</font></td></tr><tr><td><strong>范围</strong></td><td><font style="color:rgb(51, 51, 51);">单个节点/主机</font></td><td><font style="color:rgb(51, 51, 51);">跨越多个节点的集群</font></td></tr><tr><td><strong>规模</strong></td><td><font style="color:rgb(51, 51, 51);">适合开发、测试和简单的单机应用</font></td><td><font style="color:rgb(51, 51, 51);">专为大规模、高可用的生产环境设计</font></td></tr><tr><td><strong>主要工具</strong></td><td><code>Dockerfile</code><font style="color:rgb(51, 51, 51);">, </font><code>docker-compose.yml</code></td><td><code>kubectl</code><font style="color:rgb(51, 51, 51);">, YAML 清单文件 (Deployment, Service 等)</font></td></tr><tr><td><strong>核心单元</strong></td><td><font style="color:rgb(51, 51, 51);">容器 (Container)</font></td><td><font style="color:rgb(51, 51, 51);">Pod (可以包含一个或多个紧密关联的容器)</font></td></tr><tr><td><strong>网络</strong></td><td><font style="color:rgb(51, 51, 51);">提供基础的单机网络（桥接、主机模式等）</font></td><td><font style="color:rgb(51, 51, 51);">提供复杂的跨节点集群网络模型、服务发现和负载均衡</font></td></tr><tr><td><strong>自我修复</strong></td><td><font style="color:rgb(51, 51, 51);">不具备。容器挂了就挂了，需要手动重启。</font></td><td><font style="color:rgb(51, 51, 51);">核心特性。自动重启、替换失败的容器。</font></td></tr><tr><td><strong>自带的编排工具</strong></td><td><font style="color:rgb(51, 51, 51);">Docker Swarm (功能相对简单)</font></td><td><font style="color:rgb(51, 51, 51);">Kubernetes 本身就是最主流的编排工具</font></td></tr></tbody></table><h2 id="组件"><a class="markdownIt-Anchor" href="#组件"></a> 组件</h2><ul><li>Pod：在容器上加了一层抽象，可以将一个或多个容器组合在一起。一般一个pod只运行一个容器</li><li>Deployment：部署无状态应用程序，在pod上加一层抽象，可以将一个或多个pod组合在一起，具有副本控制，滚动更新，自动扩容。</li><li>node:节点，一个服务器或一个虚拟机就是一个节点</li><li>service：将一组pod封装成一个服务，提供一个统一的入口来访问这个服务。主要集群内部或外部暴露<strong>单个服务</strong></li><li>ingress：将外部的请求路由转发到集群内部Service上，是集群外部访问<strong>多个服务</strong>的统一入口</li><li>Config Map:封装配置信息</li><li>Secret:封装敏感信息</li><li>Volumes:将集群中的数据挂载到本地磁盘或远程存储上，实现持久化</li><li>StatefulSet:部署有状态应用程序</li></ul><h2 id="font-stylecolorrgb51-51-51安装font"><a class="markdownIt-Anchor" href="#font-stylecolorrgb51-51-51安装font"></a> <font style="color:rgb(51, 51, 51);">安装</font></h2><h3 id="安装minikube"><a class="markdownIt-Anchor" href="#安装minikube"></a> 安装<a href="https://minikube.sigs.k8s.io/docs/start/?arch=%2Flinux%2Farm64%2Fstable%2Fbinary+download">minikube</a></h3><blockquote><p><code>Minikube</code><font style="color:rgb(51, 51, 51);">是一个工具，用于在单个节点上部署一个本地的Kubernetes集群。这对于开发者在本地开发环境进行Kubernetes应用测试和调试非常有用。它能够在个人计算机上启动一个轻量级的虚拟机或容器，并在这个环境中部署一个完整的Kubernetes集群，包括API服务器、etcd、kubelet等核心组件。</font></p></blockquote><div style="text-align: center;">  <img src="https://img.promefire.top/blog-img/2025/07/913e88d22cd160a600f252651f9b64ed.png" style="      width: 90%;       max-width: 1200px;      height: auto;       display: block;      margin: 0 auto 10px;  /* 底部留出图注空间 */      object-fit: cover;  ">  <p style="      font-size: 0.9em;       color: #666;       margin-top: 0;       font-family: sans-serif;  ">    下载MiniKube  </p></div><p>选择正确版本的MiniKube进行下载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">curl -LO https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;minikube&#x2F;releases&#x2F;latest&#x2F;download&#x2F;minikube-linux-arm64sudo install minikube-linux-arm64 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;minikube &amp;&amp; rm minikube-linux-arm64</code></pre><p>查看版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">minikube version</code></pre><div style="text-align: center;">  <img src="https://img.promefire.top/blog-img/2025/07/1bfa93726bbc8b8a95a308eca4d8dd62.png" style="      width: 90%;       max-width: 1200px;      height: auto;       display: block;      margin: 0 auto 10px;  /* 底部留出图注空间 */      object-fit: cover;  ">  <p style="      font-size: 0.9em;       color: #666;       margin-top: 0;       font-family: sans-serif;  ">    验证安装  </p></div><h2 id="kubernetes-启动"><a class="markdownIt-Anchor" href="#kubernetes-启动"></a> Kubernetes 启动</h2><p>此处要先<strong>创建用户赋予权限</strong>，和<strong>docker通信的权限</strong>，参考文末问题2，3</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">minikube start \--vm-driver&#x3D;docker \--registry-mirror&#x3D;https:&#x2F;&#x2F;registry.docker-cn.com \--image-mirror-country&#x3D;cn \--cni&#x3D;flannel \--kubernetes-version&#x3D;v1.32.2</code></pre><p><font style="color:rgb(51, 51, 51);">该命令能够自动启动一套 Kubernetes 集群（启动一个虚拟机，称为节点），其中的参数是可选的，示例中的参数含义：</font></p><ul><li><code>--kubernetes-version</code><font style="color:rgb(51, 51, 51);">： 指定 Kubernetes 的版本</font></li><li><code>--vm-driver</code><font style="color:rgb(51, 51, 51);">: 指定 VM 驱动类型</font></li><li><code>--registry-mirror</code><font style="color:rgb(51, 51, 51);">: 镜像下载加速的镜像仓库地址</font></li><li><code>--image-mirror-country</code><font style="color:rgb(51, 51, 51);">: 镜像加速的国家，cn 表示中国</font></li><li><code>--cni</code><font style="color:rgb(51, 51, 51);">： 指定集群的网络插件，支持：auto, bridge, calico, cilium, flannel, kindnet, or path to a CNI manifest (default: auto)</font></li></ul><div style="text-align: center;">  <img src="https://img.promefire.top/blog-img/2025/07/88adb6caf03441a2caa498f108318c58.png" style="      width: 90%;       max-width: 1200px;      height: auto;       display: block;      margin: 0 auto 10px;  /* 底部留出图注空间 */      object-fit: cover;  ">  <p style="      font-size: 0.9em;       color: #666;       margin-top: 0;       font-family: sans-serif;  ">    安装成功  </p></div><p><font style="color:rgb(51, 51, 51);">查看节点ip</font></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zj@linux:~&#x2F;k8sLearn$  minikube ip192.168.49.2</code></pre><p><font style="color:rgb(51, 51, 51);">查看安装状态</font></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zj@linux:~$  minikube statusminikubetype: Control Planehost: Runningkubelet: Runningapiserver: Runningkubeconfig: Configured</code></pre><p><font style="color:rgb(51, 51, 51);">清理失败的环境</font></p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">minikube delete --all</code></pre><p><font style="color:rgb(51, 51, 51);">查看安装的插件</font></p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">minikube addons list</code></pre><p><font style="color:rgb(51, 51, 51);">根据需要选择对应的 addon 组件</font></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">minikube addons enable xxxx</code></pre><h3 id="font-stylecolorrgb51-51-51dashboard图形界面font"><a class="markdownIt-Anchor" href="#font-stylecolorrgb51-51-51dashboard图形界面font"></a> <font style="color:rgb(51, 51, 51);">Dashboard图形界面</font></h3><blockquote><p><font style="color:rgb(51, 51, 51);">Dashboard 是一个基 于web 的 Kubernetes 用户界面。你可以用它来:</font></p><ul><li><font style="color:rgb(51, 51, 51);">将容器化的应用程序部署到 Kubernetes 集群</font></li><li><font style="color:rgb(51, 51, 51);">定位排除容器化应用程序的故障</font></li><li><font style="color:rgb(51, 51, 51);">管理集群资源</font></li><li><font style="color:rgb(51, 51, 51);">了解集群中运行的应用程序的概况</font></li><li><font style="color:rgb(51, 51, 51);">创建或修改指定 Kubernetes 资源(如 Deployments, Jobs, DaemonSets 集等)</font></li></ul></blockquote><p>启动服务,得到一个本服务器查看的url</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">minikube dashboard --url</code></pre><p>直接暴露服务（需配置防火墙）</p><ol><li>在服务器上修改代理绑定地址</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl proxy --port&#x3D;38775 --address&#x3D;&#39;0.0.0.0&#39; --accept-hosts&#x3D;&#39;.*&#39; &amp;</code></pre><ul><li>–address=‘0.0.0.0’：允许所有 IP 访问</li><li>–accept-hosts=‘.*’：接受所有主机头</li></ul><ol start="2"><li>配置服务器防火墙</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo ufw allow 38775</code></pre><ol start="3"><li>在本地浏览器访问：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http:&#x2F;&#x2F;服务器公网IP:38775&#x2F;api&#x2F;v1&#x2F;namespaces&#x2F;kubernetes-dashboard&#x2F;services&#x2F;http:kubernetes-dashboard:&#x2F;proxy&#x2F;</code></pre><h2 id="font-stylecolorrgb51-51-51基础使用font"><a class="markdownIt-Anchor" href="#font-stylecolorrgb51-51-51基础使用font"></a> <font style="color:rgb(51, 51, 51);">基础使用</font></h2><blockquote><p>kubectl是minikube的一个命令行工具，与集群进行交互</p></blockquote><p><font style="color:rgb(77, 77, 77);">有时镜像会拉取失败，利用</font><code>Minikube能将本地docker镜像推送到minikube自带的docker容器并离线缓存</code><font style="color:rgb(77, 77, 77);">这个特性迂回处理这个问题</font></p><ul><li>下载hello-minikube docker镜像，并打个tag</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#找个叫hello-minikube的docker镜像 docker search hello-minikube#随便找一个别人做好的docker镜像，如bienbenigno&#x2F;hello-minikubedocker pull computer99&#x2F;hello-minikube#打个叫k8s.gcr.io&#x2F;echoserver:1.4的tag docker tag computer99&#x2F;hello-minikube:4.0 k8s.gcr.io&#x2F;echoserver:1.4</code></pre><ul><li>生成minikube离线镜像</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#将镜像添加到本地镜像minikube image load  k8s.gcr.io&#x2F;echoserver:1.4#查看镜像添加情况minikube image list</code></pre><div style="text-align: center;">  <img src="https://img.promefire.top/blog-img/2025/07/6f074487bbedff6012f0ed6f95c389ca.png" style="      width: 90%;       max-width: 1200px;      height: auto;       display: block;      margin: 0 auto 10px;  /* 底部留出图注空间 */      object-fit: cover;  ">  <p style="      font-size: 0.9em;       color: #666;       margin-top: 0;       font-family: sans-serif;  ">    查看镜像列表  </p></div><h3 id="创建一个pod"><a class="markdownIt-Anchor" href="#创建一个pod"></a> 创建一个pod</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl run hello4 --image&#x3D;k8s.gcr.io&#x2F;echoserver:1.4</code></pre><p>通常情况下，我们不会自己创建一个pod，而是创建上层资源对象（例如deployment），会自动创建pod。</p><h3 id="font-stylecolorrgb51-51-51创建一个deploymentfont"><a class="markdownIt-Anchor" href="#font-stylecolorrgb51-51-51创建一个deploymentfont"></a> <font style="color:rgb(51, 51, 51);">创建一个deployment:</font></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl create deployment hello-minikube --image&#x3D;k8s.gcr.io&#x2F;echoserver:1.4</code></pre><h3 id="font-stylecolorrgb51-51-51查看节点服务deploymentpodfont"><a class="markdownIt-Anchor" href="#font-stylecolorrgb51-51-51查看节点服务deploymentpodfont"></a> <font style="color:rgb(51, 51, 51);">查看节点/服务/deployment/pod</font></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl get nodekubectl get svckubectl get deploymentkubectl get pod#查看各pod的ipkubectl get pod -o wide kubectl describe pod xxxxxxx#在deployment与pod之间还有一个中间层对象replicaset，用来管理pod的副本数量kubectl get replicaset# 查看所有资源对象kubectl get all</code></pre><h3 id="编辑配置文件"><a class="markdownIt-Anchor" href="#编辑配置文件"></a> 编辑配置文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl edit deployment.apps&#x2F;helloworld</code></pre><h3 id="调试命令"><a class="markdownIt-Anchor" href="#调试命令"></a> 调试命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#查看pod日志kubectl logs pod名 #进入容器kubectl exec  -it pod名  -- &#x2F;bin&#x2F;bash</code></pre><h3 id="font-stylecolorrgb51-51-51删除font"><a class="markdownIt-Anchor" href="#font-stylecolorrgb51-51-51删除font"></a> <font style="color:rgb(51, 51, 51);">删除</font></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl delete deployment hello-minikube</code></pre><ul><li>需要注意的是使用<code>kubectl delete pod xxx</code>直接删除一个pod,如果该pod被上层deployment管理，deployment会立即创建一个新的pod，确保pod数量与配置文件中副本数量<code>replicas</code>保持一致.</li></ul><h3 id="font-stylecolorrgb51-51-51暴露一个服务font"><a class="markdownIt-Anchor" href="#font-stylecolorrgb51-51-51暴露一个服务font"></a> <font style="color:rgb(51, 51, 51);">暴露一个服务</font></h3><blockquote><p>创建集群有minikube和k3s两种方式，k3s是登录到节点执行命令，节点属于集群的一部分，所以可以访问到service的ip，而minikube实在宿主机执行命令，要使用<font style="color:rgb(80, 161, 79);">NodePort</font>暴露节点端口给宿主机访问</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl expose deployment hello2 --type&#x3D;NodePort --port&#x3D;8080</code></pre><ul><li>NodePort:在节点上开一个端口用于外部访问service</li></ul><p><font style="color:rgb(51, 51, 51);">查看部署的service</font></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zj@linux:~&#x2F;k8sLearn$ kubectl get services hello2NAME     TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGEhello2   NodePort   10.110.233.228   &lt;none&gt;        81:30310&#x2F;TCP   5m11s</code></pre><ul><li>service服务监听的端口是81，pod暴露的端口是30310</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zj@linux:~&#x2F;k8sLearn$ minikube service hello2 --urlhttp:&#x2F;&#x2F;192.168.49.2:30310zj@linux:~&#x2F;k8sLearn$ curl http:&#x2F;&#x2F;192.168.49.2:30310&#x2F;curl: (7) Failed to connect to 192.168.49.2 port 30310 after 0 ms: Connection refused</code></pre><p>宿主机访问节点服务url失败，<font style="color:rgba(0, 0, 0, 0.9);background-color:rgb(252, 252, 252);">问题核心在于 </font><strong><font style="color:rgba(0, 0, 0, 0.9);background-color:rgb(252, 252, 252);">应用监听端口与服务暴露端口不匹配。见下面问题6。</font></strong></p><p><strong><font style="color:rgba(0, 0, 0, 0.9);background-color:rgb(252, 252, 252);">操作总流程如下：</font></strong></p><div style="text-align: center;">  <img src="https://img.promefire.top/blog-img/2025/07/440b036bdaeeb461128611e772848d58.png" style="      width: 90%;       max-width: 1200px;      height: auto;       display: block;      margin: 0 auto 10px;  /* 底部留出图注空间 */      object-fit: cover;  ">  <p style="      font-size: 0.9em;       color: #666;       margin-top: 0;       font-family: sans-serif;  ">    图示命令  </p></div><h2 id="font-stylecolorrgb51-51-51遇到的问题font"><a class="markdownIt-Anchor" href="#font-stylecolorrgb51-51-51遇到的问题font"></a> <font style="color:rgb(51, 51, 51);">遇到的问题：</font></h2><p><font style="color:rgb(51, 51, 51);">2、root用户不能使用</font><code>minikube start</code><font style="color:rgb(51, 51, 51);">启动，要新建一个用户名并赋予sudo权限</font></p><p><font style="color:rgb(51, 51, 51);">创建用户 </font><code>adduser promefire</code></p><p><font style="color:rgb(51, 51, 51);">授权   centos:</font><code>usermod -aG wheel promefire</code></p><p><font style="color:rgb(51, 51, 51);">   Debian/Ubuntu  :</font><code>usermod -aG sudo promefire</code></p><p><font style="color:rgb(51, 51, 51);">3、赋予新建用户与docker通信权限</font></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo usermod -aG docker promefirenewgrp docker  # 刷新用户组# 验证权限docker ps  # 应无报错</code></pre><p>4、Docker配置代理</p><ul><li>创建 <code>/etc/systemd/system/docker.service.d/http-proxy.conf</code> 文件。</li><li>在文件中填入正确的 Environment 代理配置（HTTP_PROXY, HTTPS_PROXY, NO_PROXY）。</li><li>执行 <code>sudo systemctl daemon-reload </code>刷新配置</li><li>执行<code> sudo systemctl restart docker</code> 重启docker</li></ul><p>5、报错</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">-- &#x2F;stdout --* Suggestion: Using Kubernetes v1.24+ with the Docker runtime requires cri-docker to be installed</code></pre><p>Kubernetes v1.24+ 的版本与docker通信需要 <code>cri-docker</code>,移除了原来直接与Docker通信的功能，</p><ul><li>安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 下载最新的 cri-dockerd deb 包 (适用于 amd64 架构)curl -Lo cri-dockerd.deb https:&#x2F;&#x2F;github.com&#x2F;Mirantis&#x2F;cri-dockerd&#x2F;releases&#x2F;download&#x2F;v0.3.15&#x2F;cri-dockerd_0.3.15.3-0.ubuntu-jammy_amd64.deb# 安装sudo dpkg -i cri-dockerd.deb#启动服务sudo systemctl daemon-reloadsudo systemctl enable --now cri-docker.servicesudo systemctl enable --now cri-docker.socket#验证systemctl status cri-docker.socket</code></pre><p>5、一直下载中断，查看本机v2ray日志，发现因为vpn开了<strong>绕过大陆</strong>而不是<strong>全局</strong>，在访问阿里云镜像站走的是直连，因此下载失败。错误信息[socks -&gt; direct]表示直连。修改成全局解决。</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">from 192.168.1.xxx:39014 accepted &#x2F;&#x2F;registry.cn-hangzhou.aliyuncs.com:443 [socks -&gt; direct]from 192.168.1.xxx:39888 accepted &#x2F;&#x2F;kubernetes.oss-cn-hangzhou.aliyuncs.com:443 [socks -&gt; direct]</code></pre><p>6、宿主机无法通过节点ip+NodePort访问service</p><p>通过<code>kubectl logs hello2-788ffdfd55-p65qz</code>查看日志可以发现，这个pod容器运行在8080端口。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zj@linux:~$ kubectl logs hello2-788ffdfd55-p65qz  .   ____          _            __ _ _ &#x2F;\\ &#x2F; ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \( ( )\___ | &#39;_ | &#39;_| | &#39;_ \&#x2F; _&#96; | \ \ \ \ \\&#x2F;  ___)| |_)| | | | | || (_| |  ) ) ) )  &#39;  |____| .__|_| |_|_| |_\__, | &#x2F; &#x2F; &#x2F; &#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|_|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|___&#x2F;&#x3D;&#x2F;_&#x2F;_&#x2F;_&#x2F; :: Spring Boot ::       (v3.4.0-SNAPSHOT)2025-07-04T06:56:31.816Z  INFO 1 --- [hello-minikube] [           main] c.e.h.HelloMinikubeApplicationKt         : Starting HelloMinikubeApplicationK t v0.0.4-SNAPSHOT using Java 17.0.2 with PID 1 (&#x2F;app.jar started by root in &#x2F;)2025-07-04T06:56:31.820Z  INFO 1 --- [hello-minikube] [           main] c.e.h.HelloMinikubeApplicationKt         : No active profile set, falling bac k to 1 default profile: &quot;default&quot;2025-07-04T06:56:33.115Z  INFO 1 --- [hello-minikube] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080  (http)2025-07-04T06:56:33.135Z  INFO 1 --- [hello-minikube] [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]2025-07-04T06:56:33.136Z  INFO 1 --- [hello-minikube] [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache T omcat&#x2F;10.1.28]2025-07-04T06:56:33.321Z  INFO 1 --- [hello-minikube] [           main] o.a.c.c.C.[Tomcat].[localhost].[&#x2F;]       : Initializing Spring embedded WebAp plicationContext2025-07-04T06:56:33.322Z  INFO 1 --- [hello-minikube] [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initia lization completed in 1421 ms2025-07-04T06:56:34.515Z  INFO 1 --- [hello-minikube] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http)  with context path &#39;&#x2F;&#39;2025-07-04T06:56:34.541Z  INFO 1 --- [hello-minikube] [           main] c.e.h.HelloMinikubeApplicationKt         : Started HelloMinikubeApplicationKt  in 3.306 seconds (process running for 4.08)</code></pre><p>重建服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl delete svc hello2kubectl expose deployment hello2 --type&#x3D;NodePort --port&#x3D;80  --target-port&#x3D;8080</code></pre><p>查看服务信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zj@linux:~$ kubectl describe service hello2Warning: v1 Endpoints is deprecated in v1.33+; use discovery.k8s.io&#x2F;v1 EndpointSliceName:                     hello2Namespace:                defaultLabels:                   app&#x3D;hello2Annotations:              &lt;none&gt;Selector:                 app&#x3D;hello2Type:                     NodePortIP Family Policy:         SingleStackIP Families:              IPv4IP:                       10.99.54.223IPs:                      10.99.54.223Port:                     &lt;unset&gt;  80&#x2F;TCPTargetPort:               8080&#x2F;TCPNodePort:                 &lt;unset&gt;  30367&#x2F;TCPEndpoints:                10.244.0.6:8080Session Affinity:         NoneExternal Traffic Policy:  ClusterEvents:                   &lt;none&gt;</code></pre><p>查看service hello2暴露的url,成功访问</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zj@linux:~$ minikube service hello2 --urlhttp:&#x2F;&#x2F;192.168.49.2:30367zj@linux:~$ curl http:&#x2F;&#x2F;192.168.49.2:30367&#123;healthy: true&#125;</code></pre><p>此处涉及三个端口80,8080和30367。</p><table><thead><tr><th style="text-align:center"><strong><font style="color:rgba(0, 0, 0, 0.9);">端口类型</font></strong></th><th style="text-align:center"><strong><font style="color:rgba(0, 0, 0, 0.9);">示例值</font></strong></th><th style="text-align:center"><strong><font style="color:rgba(0, 0, 0, 0.9);">作用域</font></strong></th><th style="text-align:center"><strong><font style="color:rgba(0, 0, 0, 0.9);">功能</font></strong></th><th style="text-align:center"><strong><font style="color:rgba(0, 0, 0, 0.9);">使用者</font></strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong><font style="color:rgba(0, 0, 0, 0.9);">NodePort</font></strong></td><td style="text-align:center"><code>30367/TCP</code></td><td style="text-align:center"><font style="color:rgba(0, 0, 0, 0.9);">集群外部访问</font></td><td style="text-align:center"><font style="color:rgba(0, 0, 0, 0.9);">节点上开放的端口，允许外部用户通过</font><font style="color:rgba(0, 0, 0, 0.9);"> </font><code>节点IP:NodePort</code><br><font style="color:rgba(0, 0, 0, 0.9);"> </font><font style="color:rgba(0, 0, 0, 0.9);">访问服务</font></td><td style="text-align:center"><font style="color:rgba(0, 0, 0, 0.9);">外部用户（如浏览器、curl）</font></td></tr><tr><td style="text-align:center"><strong><font style="color:rgba(0, 0, 0, 0.9);">Port (Service Port)</font></strong></td><td style="text-align:center"><code>80/TCP</code></td><td style="text-align:center"><font style="color:rgba(0, 0, 0, 0.9);">集群内部访问</font></td><td style="text-align:center"><font style="color:rgba(0, 0, 0, 0.9);">Service 的虚拟端口，集群内其他组件通过</font><font style="color:rgba(0, 0, 0, 0.9);"> </font><code>ClusterIP:Port</code><br><font style="color:rgba(0, 0, 0, 0.9);"> 访问服务</font></td><td style="text-align:center"><font style="color:rgba(0, 0, 0, 0.9);">集群内 Pod、Service 间通信</font></td></tr><tr><td style="text-align:center"><strong><font style="color:rgba(0, 0, 0, 0.9);">TargetPort</font></strong></td><td style="text-align:center"><code>8080/TCP</code></td><td style="text-align:center"><font style="color:rgba(0, 0, 0, 0.9);">Pod 内容器</font></td><td style="text-align:center"><font style="color:rgba(0, 0, 0, 0.9);">容器实际监听的端口，Service 将流量转发到此端口</font></td><td style="text-align:center"><font style="color:rgba(0, 0, 0, 0.9);">容器内应用（如 Spring Boot）</font></td></tr></tbody></table><div style="text-align: center;">  <img src="https://img.promefire.top/blog-img/2025/07/afacb75c4b2e87a77811fe6cec13c851.png" style="      width: 90%;       max-width: 1200px;      height: auto;       display: block;      margin: 0 auto 10px;  /* 底部留出图注空间 */      object-fit: cover;  ">  <p style="      font-size: 0.9em;       color: #666;       margin-top: 0;       font-family: sans-serif;  ">    端口关系  </p></div>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MindSpeed-LLM训练Qwen.2.5-coder流程</title>
      <link href="//post/mindspeed-llm-xun-lian-qwen.2.5-coder-liu-cheng.html"/>
      <url>//post/mindspeed-llm-xun-lian-qwen.2.5-coder-liu-cheng.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、<a href="https://www.hiascend.com/developer/ascendhub/detail/e26da9266559438b93354792f25b2f4a">昇腾镜像仓库</a></p><p>2、<a href="https://gitee.com/ascend/MindSpeed-LLM/blob/1.0.RC3/docs/DOCKER_GUIDE.md">MindSpeed-LLm文档</a></p><p>3、<a href="https://gitee.com/ascend/MindSpeed-LLM/blob/1.0.RC3/examples/README.md">用户指南</a></p><p>4、<a href="https://www.hiascend.com/forum/thread-02115183735165287002-1-1.html">参考流程</a></p><h2 id="拉取镜像创建容器"><a class="markdownIt-Anchor" href="#拉取镜像创建容器"></a> 拉取镜像创建容器</h2><p><img src="https://cdn.nlark.com/yuque/0/2025/png/35766745/1751271574567-ca0c07f8-383b-4f88-a3e3-979358746369.png" alt><br>在镜像仓库搜索mindspeed-llm找到合适版本的镜像点击立即下载</p><div style="text-align: center;">  <img src="https://img.promefire.top/e11ab8d3321bf725a3e69a7c98bdb01a.png" style="      width: 90%;       max-width: 1200px;      height: auto;       display: block;      margin: 0 auto 10px;  /* 底部留出图注空间 */      object-fit: cover;  ">  <p style="      font-size: 0.9em;       color: #666;       margin-top: 0;       font-family: sans-serif;  ">    下载镜像  </p></div><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -itd --privileged  --name&#x3D;LLM-2025-rc1 --net&#x3D;host \   --shm-size 200g \   --device&#x3D;&#x2F;dev&#x2F;davinci4 \   --device&#x3D;&#x2F;dev&#x2F;davinci5 \   --device&#x3D;&#x2F;dev&#x2F;davinci6 \   --device&#x3D;&#x2F;dev&#x2F;davinci7 \   -v &#x2F;usr&#x2F;local&#x2F;Ascend&#x2F;driver:&#x2F;usr&#x2F;local&#x2F;Ascend&#x2F;driver \   -v &#x2F;usr&#x2F;local&#x2F;Ascend&#x2F;firmware:&#x2F;usr&#x2F;local&#x2F;Ascend&#x2F;firmware \   -v &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;npu-smi:&#x2F;usr&#x2F;local&#x2F;sbin&#x2F;npu-smi \   -v &#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;sbin \   -v &#x2F;etc&#x2F;hccn.conf:&#x2F;etc&#x2F;hccn.conf \   -v &#x2F;home&#x2F;zhij:&#x2F;home&#x2F;zhij \   swr.cn-south-1.myhuaweicloud.com&#x2F;ascendhub&#x2F;mindspeed-llm:2025.rc1-arm  \   bash   #进入容器   docker exec -it LLM-2025-rc1  &#x2F;bin&#x2F;bash</code></pre><h2 id="font-stylecolorrgb36-41-46mindspeed-llm及相关依赖安装font"><a class="markdownIt-Anchor" href="#font-stylecolorrgb36-41-46mindspeed-llm及相关依赖安装font"></a> <font style="color:rgb(36, 41, 46);">MindSpeed LLM及相关依赖安装</font></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 设置环境变量source &#x2F;usr&#x2F;local&#x2F;Ascend&#x2F;ascend-toolkit&#x2F;set_env.shsource &#x2F;usr&#x2F;local&#x2F;Ascend&#x2F;nnal&#x2F;atb&#x2F;set_env.sh  # 安装MindSpeed加速库  git clone https:&#x2F;&#x2F;gitee.com&#x2F;ascend&#x2F;MindSpeed.gitcd MindSpeed  git checkout 2.0.0_core_r0.8.0 pip install -r requirements.txt  pip3 install -e .  cd ..  # 准备MindSpeed-LLM及Megatron-LM源码  git clone https:&#x2F;&#x2F;gitee.com&#x2F;ascend&#x2F;MindSpeed-LLM.gitgit clone https:&#x2F;&#x2F;github.com&#x2F;NVIDIA&#x2F;Megatron-LM.git cd Megatron-LM  git checkout core_r0.8.0  cp -r megatron ..&#x2F;MindSpeed-LLM&#x2F;  cd ..&#x2F;MindSpeed-LLM  git checkout 2.0.0  pip install -r requirements.txt # 安装其余依赖库</code></pre><p>使用镜像创建的依赖应该没什么问题，这里服务器无法使用git，我是clone到本地上传到服务器，还挺方便的。建议不要下载zip版本，可能会因版本问题出现错误。在使用<code>git checkout xxx</code>切换分支时，会提示本地有未保存的修改，这是因为更近版本的代码也同时存在，直接丢弃即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git reset --hard HEAD</code></pre><h2 id="下载模型权重"><a class="markdownIt-Anchor" href="#下载模型权重"></a> 下载模型权重</h2><p>从<a href="https://huggingface.co/Qwen/Qwen2.5-Coder-7B/tree/main">huggingface</a>下载<code>Qwen/Qwen2.5-Coder-7B</code>权重，同样是使用git下载到本地上传到服务器</p><p>在MindSpeed-LLM  下新建文件夹↓，将下载的文件放在<code>qwen25-coder-7b-hf</code>下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkdir -p .&#x2F;model_from_hf&#x2F;qwen25-coder-7b-hfcd .&#x2F;model_from_hf&#x2F;qwen25-coder-7b-hf</code></pre><h3 id="验证模型完整性"><a class="markdownIt-Anchor" href="#验证模型完整性"></a> 验证模型完整性</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">import torchimport torch_npuimport numpy as npfrom transformers import AutoTokenizer, AutoModelForCausalLM, AutoConfigdef set_device(device_id):    torch.npu.set_device(torch.device(f&quot;npu:&#123;device_id&#125;&quot;))def load_model(load_dir):    &quot;&quot;&quot;load model&quot;&quot;&quot;    config &#x3D; AutoConfig.from_pretrained(load_dir, trust_remote_code&#x3D;True)    tokenizer &#x3D; AutoTokenizer.from_pretrained(load_dir, trust_remote_code&#x3D;True)    model &#x3D; AutoModelForCausalLM.from_pretrained(load_dir, trust_remote_code&#x3D;True).npu().eval()    return tokenizer, modelif __name__ &#x3D;&#x3D; &quot;__main__&quot;:    set_device(1)    load_dir &#x3D; &quot;.&#x2F;model_from_hf&#x2F;qwen25-coder-7b-hf&quot;    tokenizer, model &#x3D; load_model(load_dir)    print(model)</code></pre><p>可以输出模型配置代表成功</p><h2 id="转换权重"><a class="markdownIt-Anchor" href="#转换权重"></a> 转换权重</h2><blockquote><p><font style="color:rgb(25, 27, 31);">MindSpeed-LLM有两种模式下得大模型训练，分别是Mcore、Legacy。关于两种模式的差异，社区上并未给出任何功能定位解释，不过通过Readme特性解释可以看出，相较于legacy，Mcore模式下得大模型训练做了更多的并行加速特性支持，如长序列并行优化、MOE专家并行优化等高阶优化特性支持，即Mcore模式下的大模型训练性能会由于legacy，至于有了更高性能的mcore模式，为什么还要并行存在legacy，社区给的解释是：legacy为早期出版本模式，很多商用客户基于此模式在做版本维护，不能随意日落。</font></p></blockquote><p>这里选择的是mcore模式，转换权重文件的路径为<code>MindSpeed-LLM/examples/mcore/qwen25_coder/pretrain_qwen25_coder_7b_32k_ptd.sh</code> ,根据自己配置修改参数。</p><ul><li>–target-tensor-parallel-size 2  张量并行度（TP），<font style="color:rgb(64, 64, 64);">将模型的单个层（如注意力头、MLP层）的参数</font><strong><font style="color:rgb(64, 64, 64);">水平拆分</font></strong><font style="color:rgb(64, 64, 64);">到 4 个设备上</font></li><li>–target-pipeline-parallel-size 2  流水线并行度（PP），<font style="color:rgb(64, 64, 64);">将模型</font><strong><font style="color:rgb(64, 64, 64);">垂直拆分</font></strong><font style="color:rgb(64, 64, 64);">成 2 个连续阶段</font></li><li><strong><font style="color:rgb(64, 64, 64);"></font></strong><font style="color:rgb(64, 64, 64);">总卡数 = 张量并行度（</font><strong><font style="color:rgb(64, 64, 64);">TP</font></strong><font style="color:rgb(64, 64, 64);">） × 流水线并行度（</font><strong><font style="color:rgb(64, 64, 64);">PP</font></strong><font style="color:rgb(64, 64, 64);">) × 数据并行度（</font><strong><font style="color:rgb(64, 64, 64);">DP</font></strong><font style="color:rgb(64, 64, 64);">），MindSpeed中没有显示设置DP的地方，通过 总卡数 / (TP × PP）自动计算</font><strong><font style="color:rgb(64, 64, 64);">。</font><strong>后面</strong>训练脚本</strong>中要同步修改 TP和PP。</li></ul><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"># 修改 ascend-toolkit 路径source &#x2F;usr&#x2F;local&#x2F;Ascend&#x2F;ascend-toolkit&#x2F;set_env.sh# 设置需要的权重转换参数python convert_ckpt.py \       --use-mcore-models \       --model-type GPT \       --load-model-type hf \       --save-model-type mg \+       --target-tensor-parallel-size 2 \+       --target-pipeline-parallel-size 2 \       --add-qkv-bias \+       --load-dir .&#x2F;model_from_hf&#x2F;qwen25-coder-7b-hf&#x2F; \+       --save-dir .&#x2F;model_weights&#x2F;qwen25-coder-7b-mcore&#x2F; \+       --tokenizer-model .&#x2F;model_from_hf&#x2F;qwen25-coder-7b-hf&#x2F;tokenizer.json \       --model-type-hf llama2 \       --params-dtype bf16        # --num-layer-list 11, 13, 19, 21  参数根据需要添加</code></pre><p><font style="color:rgb(25, 27, 31);">注：修改脚本尽量使用vim修改，打开记事本修改后python命令可能被当作Shell命令执行 或 window下的换行符\r无法识别</font></p><h2 id="下载数据集"><a class="markdownIt-Anchor" href="#下载数据集"></a> 下载数据集</h2><p>使用了一个自己的<code>EvolInstruct-900.jsonl</code>数据集，形式为：<code>&#123;&quot;instruction&quot;: &quot;xxx&quot;, &quot;output&quot;: &quot;xxxx&quot;&#125;</code>,放在dataset目录下。</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">mkdir dataset</code></pre><h2 id="数据集预处理"><a class="markdownIt-Anchor" href="#数据集预处理"></a> 数据集预处理</h2><blockquote><p><font style="color:rgb(64, 72, 91);">【–input】</font></p><p><font style="color:rgb(64, 72, 91);">可以直接输入到数据集目录或具体文件，如果是目录，则处理全部文件, 支持 .parquet \ .csv \ .json \ .jsonl \ .txt \ .arrow 格式， 同一个文件夹下的数据格式需要保持一致</font></p><p><font style="color:rgb(64, 72, 91);">【–json-keys】</font></p><p><font style="color:rgb(64, 72, 91);">从文件中提取的列名列表，默认为 text，可以为 text, input, title 等多个输入 等多个输入，结合具体需求及数据集内容使用</font></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python .&#x2F;preprocess_data.py \    --input .&#x2F;dataset&#x2F;EvolInstruct-900.jsonl \    --tokenizer-name-or-path .&#x2F;model_from_hf&#x2F;qwen25-coder-7b-hf&#x2F; \    --tokenizer-type PretrainedFromHF \    --output-prefix .&#x2F;dataset&#x2F;EvolInstruct-900 \   #转换后输出文件的文件名前缀    --json-keys instruction output \ #根据数据集中的关键词进行分割    --workers 4 \    --log-interval 1000  </code></pre><p>成功后多了下面四个文件，按不同的<code>json-keys</code>分开，生成<code>.bin</code>和<code>.idx</code>文件</p><blockquote><p><font style="color:rgb(64, 72, 91);">预训练时，数据集路径输入 ./dataset/EvolInstruct-900_instruction_document 即可</font></p></blockquote><div style="text-align: center;">  <img src="https://img.promefire.top/%E8%BD%AC%E6%8D%A2%E6%95%B0%E6%8D%AE%E9%9B%86.png" style="      width: 90%;       max-width: 1200px;      height: auto;       display: block;      margin: 0 auto 10px;  /* 底部留出图注空间 */      object-fit: cover;  ">  <p style="      font-size: 0.9em;       color: #666;       margin-top: 0;       font-family: sans-serif;  ">    转换数据集  </p></div><h2 id="预训练"><a class="markdownIt-Anchor" href="#预训练"></a> 预训练</h2><p>启动脚本为<code>MindSpeed-LLM/examples/mcore/qwen25_coder/pretrain_qwen25_coder_7b_32k_ptd.sh</code>,配置参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">export ASCEND_RT_VISIBLE_DEVICES&#x3D;4,5,6,7NPUS_PER_NODE&#x3D;4# please fill these path configurationsCKPT_LOAD_DIR&#x3D;&quot;.&#x2F;model_weights&#x2F;qwen25-coder-7b-mcore&#x2F;&quot;CKPT_SAVE_DIR&#x3D;&quot;.&#x2F;ckpt&#x2F;qwen25-coder-7b&quot;DATA_PATH&#x3D;&quot;&#x2F;dataset&#x2F;EvolInstruct-900_instruction_document&quot;TOKENIZER_MODEL&#x3D;&quot;.&#x2F;model_from_hf&#x2F;qwen25-coder-7b-hf&#x2F;&quot;TP&#x3D;2PP&#x3D;2SEQ_LEN&#x3D;1638</code></pre><ul><li>1，2设置npu数量及id号</li><li>CKPT_LOAD_DIR：转换后的权重路径</li><li>CKPT_SAVE_DIR：训练后权重保存路径</li><li>DATA_PATH：数据集路径</li><li>TOKENIZER_MODEL：分词器路径</li><li>TP、PP 与前面统一</li><li>SEQ_LEN：默认是31K，基本都会OOM，修改到几千即可</li></ul><p>在<code>MindSpeed-LLM</code>目录下启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bash examples&#x2F;mcore&#x2F;qwen25_coder&#x2F;pretrain_qwen25_coder_7b_32k_ptd.sh</code></pre><div style="text-align: center;">  <img src="https://img.promefire.top/%E8%AE%AD%E7%BB%83%E7%BB%93%E6%9E%9C.png" style="      width: 90%;       max-width: 1200px;      height: auto;       display: block;      margin: 0 auto 10px;  /* 底部留出图注空间 */      object-fit: cover;  ">  <p style="      font-size: 0.9em;       color: #666;       margin-top: 0;       font-family: sans-serif;  ">    训练结果  </p></div><p><strong><font style="color:rgb(64, 64, 64);"></font></strong></p><p><strong><font style="color:rgb(64, 64, 64);"></font></strong></p>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 华为昇腾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>城市点亮-西安</title>
      <link href="//post/cheng-shi-dian-liang-xi-an.html"/>
      <url>//post/cheng-shi-dian-liang-xi-an.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="12fb1385868dd468c076013989639bdb41c39efe5a4c3774e4348af000531a4c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">还是八位</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
          <category> 旅行记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
            <tag> 城市 </tag>
            
            <tag> 摄影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web3-demo</title>
      <link href="//post/web3-demo.html"/>
      <url>//post/web3-demo.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、入门：<a href="https://54web3.cc/blog/induction-tutorial/dapp-dev-learn-course">https://54web3.cc/blog/induction-tutorial/dapp-dev-learn-course</a></p><p>2、ethers教程：<a href="http://wtf.academy/zh/course/ethers101/HelloVitalik">http://wtf.academy/zh/course/ethers101/HelloVitalik</a></p><p>3、web3学习路线：<a href="https://54web3.cc/blog/roadmap/learning-path-web3">https://54web3.cc/blog/roadmap/learning-path-web3</a></p><p>4、remix编译部署工具：<a href="https://remix.ethereum.org/#lang=zh&amp;optimize=false&amp;runs=200&amp;evmVersion=null&amp;version=soljson-v0.8.18+commit.87f61d96.js">https://remix.ethereum.org/</a></p><p>5、MetaMask钱包：<a href="https://metamask.io">https://metamask.io</a></p><p>6、Ganache个人区块链：<a href="https://trufflesuite.com/ganache">https://trufflesuite.com/ganache</a></p><p>7、vscode连接remix<a href="https://blog.csdn.net/weixin_51254600/article/details/140351983">https://blog.csdn.net/weixin_51254600/article/details/140351983</a></p><h2 id="M0rBl">什么是Web3？</h2>> <font style="color:rgb(51, 51, 51);">Web3 是区块链等技术的总称，这些技术可以分散互联网上的数据所有权和控制权。大多数互联网应用程序都由集中式实体控制，这些实体决定如何保存和使用最终用户数据。Web3（也称为 Web 3.0、去中心化 Web 或语义 Web）技术允许社区驱动的项目，而不是集中式管理结构。在这些项目中，最终用户控制数据、确定定价、直接为技术开发做出贡献，并在项目的方向上拥有更重要的发言权。这些技术具有自动调节用户相互交互方式的机制。因此，不需要集中式实体来管理这些交互。</font><font style="color:rgb(33, 33, 36);"> -----维基百科</font><p>455</p><p>对于Web3的定义多种多样，最基本的共识就是可读、可写、可拥有的互联网。</p><p>web1.0就是可读的互联网。网站–&gt;用户是单向的传播途径，用户只能阅读，不能参与</p><p>web2.0就是可读、可交互的互联网，用户可以上传文章、视频，如微博、贴吧。经营者提供平台，内容由用户制作。</p><p>web3.0可拥有的互联网，在web2网络平台上，用户创作的小说版权不属于作者，平台对于作品改变、周边的收益，只有一小部分流入作者的口袋。早期的网易云也拥有上传音乐的版权和大部分收益。web3的数据属于自己。</p><img src="https://img.promefire.top/blog-img/2025/03/d5dcc626a660eac07d425b36cbd0c6a0.png" style=" width: 80%; /* 控制宽度比例（屏幕宽度的80%） */ max-width: 1200px; /* 最大宽度限制（避免过大拉伸模糊） */ height: auto; /* 高度自动适配 */ display: block; /* 转为块级元素 */ margin: 0 auto; /* 水平居中 */ object-fit: cover; /* 保持原始比例裁剪填充 */ "><p>在数据所属权方面，web1用户数据保存在对应网站公司的服务器中；web2阶段存在一些行业巨头，一个账号可以登录多个平台，如微信。web3只需要一个钱包账号就能登录所有的DAPP，数据完全属于用户自己。</p><img src="https://img.promefire.top/blog-img/2025/03/56bcc8ef6c07d51b2c6d85509de97dca.png" style=" width: 80%; /* 控制宽度比例（屏幕宽度的80%） */ max-width: 1200px; /* 最大宽度限制（避免过大拉伸模糊） */ height: auto; /* 高度自动适配 */ display: block; /* 转为块级元素 */ margin: 0 auto; /* 水平居中 */ object-fit: cover; /* 保持原始比例裁剪填充 */ "><img src="https://img.promefire.top/blog-img/2025/03/e260fe74be93d0fd6162d21a59033781.png" style=" width: 80%; /* 控制宽度比例（屏幕宽度的80%） */ max-width: 1200px; /* 最大宽度限制（避免过大拉伸模糊） */ height: auto; /* 高度自动适配 */ display: block; /* 转为块级元素 */ margin: 0 auto; /* 水平居中 */ object-fit: cover; /* 保持原始比例裁剪填充 */ "><h2 id="D8fks">DAPP是什么？</h2>> <font style="color:rgb(33, 33, 36);">去中心化应用程序（</font>**<font style="color:rgb(33, 33, 36);">DApp）</font>**<font style="color:rgb(33, 33, 36);">是可以自主运行的应用程式，通常通过使用智能合约，在去中心化计算区块链系统上执行。与传统应用程式一样，DApp 为其用户提供一些功能或实用程式。但是，与传统应用程式不同，DApp 无需人工干预即可执行，也不属于任何一个实体，而是 DApp 分发代表所有权的代币。这些代币根据程式演算法分配给系统用户，稀释了 DApp 的所有权和控制权。在没有任何一个实体控制系统的情况下，应用程序变得去中心化。 -----维基百科</font><img src="https://img.promefire.top/blog-img/2025/03/2e428bf3be33c55d5b2a08c3847b883b.png" style=" width: 80%; /* 控制宽度比例（屏幕宽度的80%） */ max-width: 1200px; /* 最大宽度限制（避免过大拉伸模糊） */ height: auto; /* 高度自动适配 */ display: block; /* 转为块级元素 */ margin: 0 auto; /* 水平居中 */ object-fit: cover; /* 保持原始比例裁剪填充 */ "><p>DAPP：相当于web前端</p><p>Server：相当于web后端</p><p>智能合约：DAPP相比于传统APP多的就是部分，感觉就是一个个函数，传递参数给部署于区块链上的智能合约，返回结果</p><h2 id="fme2r">Ganache</h2>是一个本机个人区块链，测试开发必不可少！<p>安装后创建新工作空间，填写name，点击start</p><img src="https://img.promefire.top/blog-img/2025/03/12dbbf355508b927c6eeedfa07e82069.png" style=" width: 80%; /* 控制宽度比例（屏幕宽度的80%） */ max-width: 1200px; /* 最大宽度限制（避免过大拉伸模糊） */ height: auto; /* 高度自动适配 */ display: block; /* 转为块级元素 */ margin: 0 auto; /* 水平居中 */ object-fit: cover; /* 保持原始比例裁剪填充 */ "><p>可以看到生成了10个账户，每个账户余额为100ETH，点击右侧钥匙按钮可以看到</p><img src="https://img.promefire.top/blog-img/2025/03/f50fd80e715cf9ff0738c0e2fef55e06.png" style=" width: 80%; /* 控制宽度比例（屏幕宽度的80%） */ max-width: 1200px; /* 最大宽度限制（避免过大拉伸模糊） */ height: auto; /* 高度自动适配 */ display: block; /* 转为块级元素 */ margin: 0 auto; /* 水平居中 */ object-fit: cover; /* 保持原始比例裁剪填充 */ "><ul><li>url：<a href="HTTP://127.0.0.1:7545">HTTP://127.0.0.1:7545</a></li><li>network id：1337</li></ul><h2 id="neXKw">MetaMask</h2>> 是用于与以太坊区块链加密货币钱包。它可以通过浏览器扩充程式或行动应用程式让使用者访问其以太坊钱包，与去中心化应用进行互动。<p>安装小狐狸插件后添加测试网络，即Ganache生成的本地区块链网络，这个地方链ID貌似只能使用1337，建议在Ganache将网络id改为1337</p><p><img src="https://img.promefire.top/blog-img/2025/03/5be67eca6b6152c6d421fbe9ff3149a4.png" alt></p><p>在Ganache中选择一个账户，点击右侧的key，复制账号私钥，</p><p><img src="https://img.promefire.top/blog-img/2025/03/24a29b31deb168254653723a589e37ef.png" style="    width: 80%;       /* 控制宽度比例（屏幕宽度的80%） */    max-width: 1200px; /* 最大宽度限制（避免过大拉伸模糊） */    height: auto;      /* 高度自动适配 */    display: block;    /* 转为块级元素 */    margin: 0 auto;    /* 水平居中 */    object-fit: cover; /* 保持原始比例裁剪填充 */  "></p><p>在小狐狸钱包中导入账号，输入私钥即可</p><p><img src="https://img.promefire.top/blog-img/2025/03/1f82b1de11c24604e2ac21a7f7afd30a.png" alt></p><h2 id="OSnCL">使用Remix创建和部署合约</h2>创建一个`hello.sol`文件<pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity">pragma solidity 0.8.18;&#x2F;&#x2F; SPDX-License-Identifier: MIT contract Hello &#123;    function greet() external pure returns(string memory) &#123;      return &quot;Hello Web3&quot;;    &#125;  &#125;</code></pre><ul><li><code>// SPDX-License-Identifier: MIT</code> 是一个协议，不加过不了</li></ul><p>注意此处的编译器版本要和代码中的版本号保持一致</p><p><img src="https://img.promefire.top/blog-img/2025/03/259427f52a6c0a7c03b12e88c3b33c45.png" style="    width: 80%;       /* 控制宽度比例（屏幕宽度的80%） */    max-width: 1200px; /* 最大宽度限制（避免过大拉伸模糊） */    height: auto;      /* 高度自动适配 */    display: block;    /* 转为块级元素 */    margin: 0 auto;    /* 水平居中 */    object-fit: cover; /* 保持原始比例裁剪填充 */  "></p><p>选择部署到我们之前使用Ganache创建的个人区块链上，部署成功后，点击greet可以返回&quot;Hello Web3&quot;，这不就是个函数方法嘛</p><div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">  <img src="https://img.promefire.top/blog-img/2025/03/d4764a6669bbd9181e07b3c8aff25e0e.png" style="width: 100%; height: 300px; object-fit: contain;">  <img src="https://img.promefire.top/blog-img/2025/03/6ca21383682e2a9dccd7e316afc96bd5.png" style="width: 100%; height: 300px; object-fit: contain;"></div><h2 id="zWJAF">DAPP前端</h2><p>vscode创建一个<code>dapp.html</code>文件，代码如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;html&gt;  &lt;head&gt;    &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;    &lt;title&gt;Dapp Demo&lt;&#x2F;title&gt;  &lt;&#x2F;head&gt;  &lt;body&gt;    &lt;div style&#x3D;&quot;text-align:center;margin-top:30px;&quot;&gt;      &lt;div style&#x3D;&quot;text-align:center&quot;&gt;        &lt;button&gt;连接钱包&lt;&#x2F;button&gt;        &lt;button&gt;调用合约&lt;&#x2F;button&gt;      &lt;&#x2F;div&gt;      &lt;div style&#x3D;&quot;margin-top:10px&quot; id&#x3D;&quot;account&quot;&gt;账户：&lt;&#x2F;div&gt;      &lt;div style&#x3D;&quot;margin-top:10px;&quot; id&#x3D;&quot;contract&quot;&gt;合约：&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p>为了直接在网页上观察，需要安装插件<code>live server</code>,完成后再在html页面右键<code>open with live server</code> 打开浏览器。接着在html代码中引入<code>ethers.js</code>库</p><blockquote><p>从 Ethers.js 版本 6.x 开始，Ethers.js 不再直接支持在<code> &lt;script&gt;</code>  标签中引入的方式，而是需要通过 ES 模块或者构建工具来使用。会遇到 Unexpected token ‘export’ 的错误。这是因为 Ethers.js 6.x 使用了 ES 模块语法，而浏览器中不支持这种直接导入。 解决方法：可以使用 Ethers.js 版本 5.x，它仍然支持通过 <code>&lt;script&gt; </code> 标签引入。</p></blockquote><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">&lt;html&gt;  &lt;head&gt;    &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;    &lt;title&gt;Dapp Demo&lt;&#x2F;title&gt;    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;ethers&#x2F;6.6.2&#x2F;ethers.min.js&quot;&gt;&lt;&#x2F;script&gt;  &lt;&#x2F;head&gt;  &lt;body&gt;    &lt;div style&#x3D;&quot;text-align:center;margin-top:30px;&quot;&gt;      &lt;div style&#x3D;&quot;text-align:center&quot;&gt;        &lt;button&gt;连接钱包&lt;&#x2F;button&gt;        &lt;button&gt;调用合约&lt;&#x2F;button&gt;      &lt;&#x2F;div&gt;      &lt;div style&#x3D;&quot;margin-top:10px&quot; id&#x3D;&quot;account&quot;&gt;账户：&lt;&#x2F;div&gt;      &lt;div style&#x3D;&quot;margin-top:10px;&quot; id&#x3D;&quot;contract&quot;&gt;合约：&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><h3 id="连接钱包"><a class="markdownIt-Anchor" href="#连接钱包"></a> 连接钱包</h3><p>​钱包这两个字总给不知情的人一种劝退感，其实一个钱包就是一个账号，就像各大APP注册账号后也能充钱进去一样，不一样的是除了自己没有平台知道密码，不提供找回密码服务。</p><p>小狐狸钱包NetaMask，是作为浏览器扩展注入到了当前浏览器窗口的window对象中，我们可以在控制台使用<code>window.ethereum</code>访问。</p><p><img src="https://img.promefire.top/blog-img/2025/03/d553ee7a54d2df850213eeceb2f3fbe6.png" alt></p><p>连接钱包的方法如下，需要放在script标签内，且要为连接钱包按钮添加点击事件onclick()</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">async function connectWallet() &#123;  if (typeof window.ethereum &#x3D;&#x3D;&#x3D; &#39;undefined&#39;) &#123;    alert(&#39;请先安装小狐狸钱包&#39;)    return  &#125;  let accounts &#x3D; await window.ethereum.request(&#123; method: &#39;eth_requestAccounts&#39; &#125;)  if (accounts.length &gt; 0) &#123;    document.getElementById(&#39;account&#39;).innerText &#x3D; &#39;账号：&#39; + accounts[0]  &#125;&#125;</code></pre><h3 id="KbuFU">调用合约</h3>首先定义的是provider变量，`ethers.js` 库中的provider是对以太坊网络的抽象，前端的JS通过provider与后面的以太坊网络进行交互。通过provider + 合约地址 contractAddress+ 合约ABI，就可以创建一个只能合约对象，调用其greet方法。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">async function runContract() &#123;        if (typeof window.ethereum &#x3D;&#x3D;&#x3D; &quot;undefined&quot;) &#123;          alert(&quot;请先安装小狐狸钱包&quot;);          return;        &#125;        let provider &#x3D; new ethers.providers.Web3Provider(window.ethereum);        let contract &#x3D; new ethers.Contract(contractAddress, contractAbi, provider.getSigner());        let result &#x3D; await contract.greet();        document.getElementById(&quot;contract&quot;).innerText &#x3D; result;      &#125;</code></pre><p>contractAddress我们在Redmix部署成功界面复制，ABI在编译界面最低部复制</p><div style="display: flex; justify-content: space-between; gap: 10px;">  <img src="https://img.promefire.top/blog-img/2025/03/6048edfc0e28cb0a9427222eace73357.png" style="width: 48%;">  <img src="https://img.promefire.top/blog-img/2025/03/e92e38ae8a6b4ad47229f61bbb2df5f8.png" style="width: 48%;"></div><p>完整代码如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;html&gt;  &lt;head&gt;    &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;    &lt;title&gt;Dapp Demo&lt;&#x2F;title&gt;    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;ethers@5.7.2&#x2F;dist&#x2F;ethers.umd.min.js&quot;&gt;&lt;&#x2F;script&gt;  &lt;&#x2F;head&gt;  &lt;body&gt;    &lt;div style&#x3D;&quot;text-align:center;margin-top:30px;&quot;&gt;      &lt;div style&#x3D;&quot;text-align:center&quot;&gt;        &lt;button onclick&#x3D;&quot;connectWallet()&quot;&gt;连接钱包&lt;&#x2F;button&gt;        &lt;button onclick&#x3D;&quot;runContract()&quot;&gt;调用合约&lt;&#x2F;button&gt;      &lt;&#x2F;div&gt;      &lt;div style&#x3D;&quot;margin-top:10px&quot; id&#x3D;&quot;account&quot;&gt;账户：&lt;&#x2F;div&gt;      &lt;div style&#x3D;&quot;margin-top:10px;&quot; id&#x3D;&quot;contract&quot;&gt;合约：&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        const contractAddress &#x3D; &quot;0xc58482bd1B61fE55aF8F50f75314E6eA5c99a55c&quot;        const contractAbi &#x3D; [            &#123;              &quot;inputs&quot;: [],              &quot;name&quot;: &quot;greet&quot;,              &quot;outputs&quot;: [                &#123;                  &quot;internalType&quot;: &quot;string&quot;,                  &quot;name&quot;: &quot;&quot;,                  &quot;type&quot;: &quot;string&quot;                &#125;              ],              &quot;stateMutability&quot;: &quot;pure&quot;,              &quot;type&quot;: &quot;function&quot;            &#125;          ]        async function connectWallet() &#123;          if (typeof window.ethereum &#x3D;&#x3D;&#x3D; &#39;undefined&#39;) &#123;            alert(&#39;请先安装小狐狸钱包&#39;)            return          &#125;              let accounts &#x3D; await window.ethereum.request(&#123; method: &#39;eth_requestAccounts&#39; &#125;)          if (accounts.length &gt; 0) &#123;            document.getElementById(&#39;account&#39;).innerText &#x3D; &#39;账号：&#39; + accounts[0]          &#125;        &#125;          &#x2F;&#x2F; 调用合约        async function runContract() &#123;        if (typeof window.ethereum &#x3D;&#x3D;&#x3D; &quot;undefined&quot;) &#123;          alert(&quot;请先安装小狐狸钱包&quot;);          return;        &#125;        let provider &#x3D; new ethers.providers.Web3Provider(window.ethereum);        let contract &#x3D; new ethers.Contract(contractAddress, contractAbi, provider.getSigner());        let result &#x3D; await contract.greet();        document.getElementById(&quot;contract&quot;).innerText &#x3D; result;      &#125;      &lt;&#x2F;script&gt;  &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p>最后可以成功在前端连接钱包并调用合约greet方法。</p><p><img src="https://img.promefire.top/blog-img/2025/03/af2e16787de4916d485f462b411e5218.png" alt></p><p>到目前为止，并没有发现和传统后端有什么区别。传统项目 + 区块链账号私钥登录就能等于DAPP吗？</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web3 </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="//post/maven.html"/>
      <url>//post/maven.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="资源"><a class="markdownIt-Anchor" href="#资源"></a> 资源</h2><p>1、<a href="https://www.bilibili.com/video/BV1Ah411S7ZE/?spm_id_from=333.788.comment.all.click&amp;vd_source=2dd1d65546cb5ff3a546b588d0f60270">黑马程序员Maven全套教程</a></p><p>2、<a href="https://mvnrepository.com/">maven仓库</a></p><p><img src="https://img.promefire.top/blog-img/2024/12/0b37e593ec1f33a53c65378f9ff29a1c.png" alt="img"></p><h2 id="命令"><a class="markdownIt-Anchor" href="#命令"></a> 命令</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">mvn complie  #编译mvnclean#清理mvn test#测试mvn package #打包mvn install #安装到本地仓库</code></pre><h2 id="依赖"><a class="markdownIt-Anchor" href="#依赖"></a> 依赖</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&lt;dependency&gt;    &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;    &lt;version&gt;3.5.16&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre><ul><li>groupId : 组织名称</li><li>artifactId：依赖名</li><li>version: 版本号</li></ul><p>依赖传递：项目A引用项目B，会引用项目B的所有依赖。（A、B引用相同依赖不同版本会产生冲突）</p><h3 id="依赖传递冲突问题"><a class="markdownIt-Anchor" href="#依赖传递冲突问题"></a> 依赖传递冲突问题：</h3><p>路径优先：当依赖出现相同资源时，层级越深，优先级越低 。</p><p>声明优先：当资源在相同层级倍依赖时，配置顺序靠前的覆盖顺序靠后的</p><h3 id="可选依赖"><a class="markdownIt-Anchor" href="#可选依赖"></a> 可选依赖</h3><p>对外隐藏当前依赖（B对A隐藏自己的一些依赖）</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">&lt;dependency&gt;    &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;    &lt;version&gt;3.5.16&lt;&#x2F;version&gt;+    &lt;optional&gt;true&lt;optional&gt;&lt;&#x2F;dependency&gt;</code></pre><h3 id="排除依赖"><a class="markdownIt-Anchor" href="#排除依赖"></a> 排除依赖</h3><p>主动断开，A屏蔽B中引用的一些依赖</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">&lt;dependency&gt;    &lt;groupId&gt;com.learn&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;project02&lt;&#x2F;artifactId&gt;+    &lt;exclusions&gt;+        &lt;exclusion&gt;+            &lt;groupId&gt;xx&lt;&#x2F;groupId&gt;+            &lt;artifactId&gt;xx&lt;&#x2F;artifactId&gt;+        &lt;exclusion&gt;+     &lt;&#x2F;exclusions&gt;&lt;&#x2F;dependency&gt;</code></pre><h3 id="依赖范围"><a class="markdownIt-Anchor" href="#依赖范围"></a> 依赖范围</h3><p>依赖的jar默认情况可以在任何地方使用，可以通过scope标签设定其作用范围</p><img src="https://img.promefire.top/blog-img/2024/12/bd99c0bb2039eabc6623345321f26b44.png" alt="scope作用范围" style="zoom: 80%;"><h2 id="生命周期"><a class="markdownIt-Anchor" href="#生命周期"></a> 生命周期</h2><h3 id="1-默认生命周期default-lifecycle"><a class="markdownIt-Anchor" href="#1-默认生命周期default-lifecycle"></a> 1、默认生命周期（Default Lifecycle）</h3><p>默认生命周期用于构建和发布项目。它包含了多个阶段，从清理、编译、测试，到打包、安装和部署等。默认生命周期的主要阶段包括：</p><ul><li><strong>validate</strong>：验证项目是否正确，且所有必要的信息是否存在。</li><li><strong>compile</strong>：编译项目的源代码。</li><li><strong>test</strong>：运行测试代码（使用测试框架，如 JUnit）。</li><li><strong>package</strong>：将编译后的代码打包成可执行的 JAR 或 WAR 文件。</li><li><strong>verify</strong>：验证打包后的文件是否符合质量标准。</li><li><strong>install</strong>：将项目打包后的文件安装到本地 Maven 仓库。</li><li><strong>deploy</strong>：将项目的打包文件发布到远程 Maven 仓库，供其他项目使用。</li></ul><h3 id="2-清理生命周期clean-lifecycle"><a class="markdownIt-Anchor" href="#2-清理生命周期clean-lifecycle"></a> 2、清理生命周期（Clean Lifecycle）</h3><p>清理生命周期用于清理项目，删除以前构建时生成的文件。其阶段包括：</p><ul><li><strong>pre-clean</strong>：在清理之前进行的一些准备工作。</li><li><strong>clean</strong>：删除以前构建生成的文件。</li><li><strong>post-clean</strong>：在清理完成后进行的后处理。</li></ul><h3 id="3-站点生命周期site-lifecycle"><a class="markdownIt-Anchor" href="#3-站点生命周期site-lifecycle"></a> 3、站点生命周期（Site Lifecycle）</h3><p>站点生命周期用于生成项目的文档和站点。其阶段包括：</p><ul><li><strong>pre-site</strong>：在生成站点之前的一些准备工作。</li><li><strong>site</strong>：生成项目的站点。</li><li><strong>post-site</strong>：生成站点之后的一些处理。</li><li><strong>site-deploy</strong>：将生成的站点部署到服务器上。</li></ul><h2 id="聚合"><a class="markdownIt-Anchor" href="#聚合"></a> 聚合</h2><p>作用：聚合用于快速构建maven工程，一次性构建多个项目/模块</p><ul><li>创建一个空模块，打包类型定义为pom,<code>&lt;packaging&gt;pom&lt;/packaging&gt;</code></li><li>定义当前模块进行构建操作时关联的其他模块</li></ul><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">&lt;modules&gt;  &lt;module&gt;xx&lt;&#x2F;module&gt;  &lt;module&gt;xx&lt;&#x2F;module&gt;  &lt;module&gt;xx&lt;&#x2F;module&gt;&lt;moudules&gt;</code></pre><p>也就是根模块，配置文件中包含其他下级模块，模块配置先后顺序对执行顺序没影响</p><h2 id="版本管理"><a class="markdownIt-Anchor" href="#版本管理"></a> 版本管理</h2><p>名称规范：</p><ul><li>SNAPSHOT（快照版本）：项目开发过程中，输出的临时性版本</li><li>RELEASE(发布版本)：发布的较为稳定的版本</li></ul><p>&lt;主版本&gt;.&lt;次版本&gt;.&lt;增量版本&gt;.&lt;里程碑版本&gt;:5.1.9.RELEASE</p><ul><li>主版本：重大变更</li><li>次版本：较大的功能增加和变化</li><li>增量版本：重大漏洞的修复</li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
          <category> 构建工具 </category>
          
          <category> 编程开发 </category>
          
          <category> Java开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CI/CD </tag>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
            <tag> 依赖管理 </tag>
            
            <tag> 项目构建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git相关</title>
      <link href="//post/git-xiang-guan.html"/>
      <url>//post/git-xiang-guan.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>近期有工作的朋友问我git有关的问题，于是顺便系统地学了一下Git。记录一下常用的一些命令。</p><h2 id="配置ssh"><a class="markdownIt-Anchor" href="#配置ssh"></a> 配置ssh</h2><p><img src="https://img.promefire.top/blog-img/20240621-77f6748dcf581320c96dbc42f608639f.png" alt="img"></p><h2 id="工作流程"><a class="markdownIt-Anchor" href="#工作流程"></a> 工作流程</h2><p><img src="https://img.promefire.top/blog-img/20240621-d6b4917de1e088c9212debb0196a6939.png" alt="img"></p><ol><li><p>clone（克隆）: 从远程仓库中克隆代码到本地仓库</p></li><li><p>checkout （检出）:从本地仓库中检出一个仓库分支然后进行修订</p></li><li><p>add（添加）: 在提交前先将代码提交到暂存区</p></li><li><p>commit（提交）: 提交到本地仓库。本地仓库中保存修改的各个历史版本</p></li><li><p>fetch (抓取) ： 从远程库，抓取到本地仓库，<strong>不</strong>进行任何的<strong>合并</strong>动作，一般操作比较少。</p></li><li><p>pull (拉取) ： 从远程库拉到本地库，自动进行<strong>合并</strong>(merge)，然后放到到工作区，相当于<strong>fetch+merge</strong></p></li><li><p>push（推送） : 修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库</p></li></ol><p><img src="https://img.promefire.top/blog-img/20240621-f3cf4e10adf091b00a0a54acf20838e9.png" alt="img"></p><p>git status : 查看修改的状态</p><h3 id="基本配置"><a class="markdownIt-Anchor" href="#基本配置"></a> 基本配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git config --global user.name &quot;xxxx&quot;git config --global user.email &quot;xxxx&quot;</code></pre><h3 id="版本回退"><a class="markdownIt-Anchor" href="#版本回退"></a> 版本回退</h3><p>通过<code>git log </code>查看<strong>commitID</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git reset --hard commitID</code></pre><p>–hard 表示强制将当前分支重置到指定的&quot;commitID&quot;,工作目录和暂存区的所有更改都会背覆盖</p><h3 id="push指定commit"><a class="markdownIt-Anchor" href="#push指定commit"></a> push指定commit</h3><p>有时候使用<code>git commit</code> 提交了多个版本，选择某一个版本提交，而且会把该版本之前未push的commit都提交。</p><pre class="line-numbers language-none"><code class="language-none">git push origin commitId:分支名</code></pre><h2 id="远程仓库"><a class="markdownIt-Anchor" href="#远程仓库"></a> 远程仓库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#添加远程仓库git remote add origin xxxxxxxxx#查看git remote# 推送git push origin master# 拉取远程并合并git pull origin master</code></pre><h2 id="分支"><a class="markdownIt-Anchor" href="#分支"></a> 分支</h2><p><code>git checkout -b xxx</code>:创建并切换分支</p><p><code>git merge xxx</code>:将xxx分支内容合并到当先分支</p><p><code>git branch --list</code>查看分支</p><p><code>git log --all --graph</code>图形化查看分支</p><h3 id="删除分支"><a class="markdownIt-Anchor" href="#删除分支"></a> 删除分支</h3><ul><li>git branch -d b1 删除分支时，需要做各种检查</li><li>git branch -D b1 不做任何检查，强制删除</li></ul><h2 id="存储代码"><a class="markdownIt-Anchor" href="#存储代码"></a> 存储代码</h2><blockquote><p>当前环境下有修改的文件，未进行commit，此时无法切换分支。如有需要，先存储当前分支的更改，然后切换分支</p></blockquote><p><code>git stash</code> ：存储</p><p><code>git stash apply</code>恢复</p><p><code>git stash list</code>查看多次存储</p><p><code>git stash apply stash@&#123;2&#125;</code>h恢复第二次存储的</p><h2 id="撤销提交"><a class="markdownIt-Anchor" href="#撤销提交"></a> 撤销提交</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">使用 git commit --amend 修改最后一次提交。使用 git reset --soft HEAD~1 撤销最后一次提交但保留更改。使用 git revert &lt;commit-hash&gt; 逆转一个特定的提交。使用 git rebase -i HEAD~n 交互式修改提交历史。一般不用</code></pre><ul><li><code>git revert</code>  逆转一个提交,</li></ul><p>例如提交历史<code>A -&gt; B -&gt; C -&gt; D</code> ,其中b提交了一些更改,使用</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git revert &lt;commit-hash-of-B&gt;</code></pre><p>会新生成一个提交,作用是撤销B的所有更改</p><pre class="line-numbers language-none"><code class="language-none">A -&gt; B -&gt; C -&gt; D -&gt; E</code></pre><blockquote><p>感觉工作里用这个冲突会不少</p></blockquote><ul><li>git reset<ul><li>–soft  只重置HEAD指针，不影响<strong>暂存区</strong>和<strong>工作目录</strong></li><li>– mixed  重置HEAD指针和暂存区 ，不影响<strong>工作目录</strong></li><li>–hard   重置HEAD指针、暂存区和工作目录</li></ul></li></ul><blockquote><p>HEAD指针：1、指向当前的分支。2、如果使用了<code>git fetch</code> 只获取远程而不合并，HEAD指向当前的提交</p></blockquote><table><thead><tr><th><code>git reset -- .</code></th><th>取消所有暂存，保留工作区修改</th><th>需要重新选择部分文件提交</th></tr></thead><tbody><tr><td><code>git reset --hard HEAD</code></td><td>彻底删除所有暂存区和工作区修改</td><td>确定要放弃所有修改</td></tr></tbody></table><p>案例：服务器上的博客拉去<code>promefire。github.io</code>的更新展示html页面，因为某次服务器重启导致<a href="https://blog.promefire.top/post/hexo_transfer_aliyun.html">webhook</a></p><p>的监听失效，导致服务器端的博客落后一次更新，自动部署会报错，需要解决冲突，由于并不会在服务器端修改文件，所以直接<code>git fetch origin</code> 拉去最新更新后，使用<code> git reset --hard origin/main</code> 强制与远程分支同步.</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot+vue管理系统</title>
      <link href="//post/cang-ku-guan-li-xi-tong.html"/>
      <url>//post/cang-ku-guan-li-xi-tong.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​一个仓库管理系统，后端实现只有简单的增删查改，主要是前端Vue2页面搭建 + 前后端通信 + 路由。前端页面布局可以照抄element-ui，没什么技术含量，纯属细心。属于是非常入门级别spring boot + Vue了。</p><h2 id="文档"><a class="markdownIt-Anchor" href="#文档"></a> 文档</h2><p>1、Vue Router：<a href="https://v3.router.vuejs.org/zh/guide/">https://v3.router.vuejs.org/zh/guide/</a><br>2、Vuex：<a href="https://v3.vuex.vuejs.org/zh/">https://v3.vuex.vuejs.org/zh/</a><br>3、element-ui:<a href="https://element.eleme.cn/#/zh-CN/">https://element.eleme.cn/#/zh-CN/</a><br>4、Mybatis-plus: <a href="https://baomidou.com/">https://baomidou.com/</a><br><a name="RXFCQ"></a></p><h2 id="后端项目"><a class="markdownIt-Anchor" href="#后端项目"></a> 后端项目</h2><p><a name="m9hsz"></a></p><h3 id="常用注解"><a class="markdownIt-Anchor" href="#常用注解"></a> 常用注解</h3><p><code>@Controller</code>页面与数据</p><p><code>@ResrController</code> 数据</p><blockquote><p>前后端分离项目一般只用RestController，默认情况会将后端返回的对象数据转换为json格式</p></blockquote><p><code>@RequestBody</code> 将http请求得内容绑定到到方法的参数上（一般是封装为Json格式）</p><p><code>@Autowired</code> 自动导入对象到类中，被spring 容器管理</p><p><code>@Configuration</code> 声明配置类</p><p><code>@PathVariable</code>用于获取路径参数</p><p><code>@RequestParam</code>用于获取查询参数。</p><h3 id="参数传递"><a class="markdownIt-Anchor" href="#参数传递"></a> 参数传递</h3><p>访问链接有参数（与变量名一致）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;    &#x2F;hello?nickname&#x3D;promefire&amp;phone&#x3D;12345    @GetMapping(&quot;&#x2F;hello&quot;)    public String hello(String nickname,String phone)&#123;        return &quot;hello &quot; + nickname + phone;    &#125;</code></pre><p>访问链接有参数（与变量名<strong>不一致</strong>）<br>使用<code>@RequestParam(&quot;nickname&quot;)</code>注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;    &#x2F;hello?nickname&#x3D;promefire&amp;phone&#x3D;12345    @RequestMapping(value &#x3D; &quot;&#x2F;hello&quot;,method &#x3D; RequestMethod.GET)    public String hello(@RequestParam(&quot;nickname&quot;) String name, String phone)&#123;        return &quot;hello &quot; + name + phone;    &#125;</code></pre><p><a name="uYVbv"></a></p><h3 id="访问静态资源"><a class="markdownIt-Anchor" href="#访问静态资源"></a> 访问静态资源</h3><ul><li>在<code>resources</code>下新建<code>static</code>文件夹，导入图片<code>2.png</code>，直接访问<code>localhost:8090/2.png</code>即可，</li></ul><p>定义过滤规则表示访问时路径需要加上<code>/images</code>即访问<code>localhost:8090/images/2.png</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring.mvc.static-path-pattern&#x3D;&#x2F;images&#x2F;**</code></pre><p>默认静态资源目录为<code>classpath:/static/</code>，自定义静态目录</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring.web.resources.static-locations&#x3D;classpath:&#x2F;static&#x2F;</code></pre><blockquote><p>classpath表示类路径，java文件编译后会放在类路径下，即target目录下的classes</p></blockquote><p><a name="BwJzr"></a></p><h3 id="文件上传"><a class="markdownIt-Anchor" href="#文件上传"></a> 文件上传</h3><p>默认设置限制了上传文件的大小，更改设置在配置文件加入如下两行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">#单个文件大小spring.servlet.multipart.max-file-size&#x3D;10MB#每次请求所有文件大小spring.servlet.multipart.max-request-size&#x3D;10MB</code></pre><p>用户上传的图片也属于静态文件，也要遵循上面的过滤规则，前加/images<br><a name="bKvHE"></a></p><h3 id="拦截器"><a class="markdownIt-Anchor" href="#拦截器"></a> 拦截器</h3><p>配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class WebConfig implements WebMvcConfigurer &#123;    @Override    public void addInterceptors(InterceptorRegistry registry) &#123;&#x2F;&#x2F;        创建一个自定义的拦截器，增加拦截的的路径        registry.addInterceptor(new LogonInterceptor()).addPathPatterns(&quot;&#x2F;user&#x2F;**&quot;);    &#125;&#125;</code></pre><p><a name="iI8ws"></a></p><h3 id="多表查询"><a class="markdownIt-Anchor" href="#多表查询"></a> 多表查询</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Select(&quot;select * from user&quot;)   @Results(           &#123;                   @Result(column &#x3D; &quot;id&quot;, property &#x3D; &quot;id&quot;),                   @Result(column &#x3D; &quot;no&quot;, property &#x3D; &quot;no&quot;),                   @Result(column &#x3D; &quot;name&quot;, property &#x3D; &quot;name&quot;),                   @Result(column &#x3D; &quot;password&quot;, property &#x3D; &quot;password&quot;),                   @Result(column &#x3D; &quot;age&quot;, property &#x3D; &quot;age&quot;),                   @Result(column &#x3D; &quot;sex&quot;, property &#x3D; &quot;sex&quot;),                   @Result(column &#x3D; &quot;phone&quot;, property &#x3D; &quot;phone&quot;),                   @Result(column &#x3D; &quot;role_id&quot;, property &#x3D; &quot;roleId&quot;),                   @Result(column &#x3D; &quot;isValid&quot;, property &#x3D; &quot;isvalid&quot;),                   @Result(column &#x3D; &quot;id&quot;, property &#x3D; &quot;records&quot;, javaType &#x3D; List.class,                           many &#x3D; @Many(select &#x3D; &quot;com.warehouse.mapper.RecordMapper.selectByUid&quot;))           &#125;   )   List&lt;User&gt; selectUserAndRecord();</code></pre><ul><li>实体类User新增变量records后，要加上getter和setter方法，要不然结果会不显示</li><li>@Result中column表示查到的表中的字段，property表示实体类中的字段。此处表示映射关系，所有的映射都要写</li><li><code>@Result(column = &quot;id&quot;, property = &quot;records&quot;, javaType = List.class, many = @Many(select = &quot;com.warehouse.mapper.RecordMapper.selectByUid&quot;))</code>需用 <code>javaType</code>指明records类型为集合List，使用<code>many@many(select = )</code>因为一个用户有多个订单。订单查用户则用<code>one@one(select = )</code></li></ul><p><a name="V0X09"></a></p><h3 id="条件查询"><a class="markdownIt-Anchor" href="#条件查询"></a> 条件查询</h3><p>使用QueryWrapper在Service层使用 <a href="https://baomidou.com/pages/10c804/">https://baomidou.com/pages/10c804/</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public List&lt;User&gt; selectList() &#123;        QueryWrapper&lt;User&gt; queryWrapper &#x3D; new QueryWrapper&lt;&gt;();        queryWrapper.ge(&quot;age&quot;,20);        return userMapper.selectList(queryWrapper);    &#125;</code></pre><p><a name="QYWlM"></a></p><h3 id="分页查询"><a class="markdownIt-Anchor" href="#分页查询"></a> 分页查询</h3><p>配置类-一个分页拦截器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class MybatisPlusConfig &#123;    @Bean    public MybatisPlusInterceptor mybatisPlusInterceptor() &#123;        MybatisPlusInterceptor interceptor &#x3D; new MybatisPlusInterceptor();        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));        return interceptor;    &#125;&#125;</code></pre><p>查询</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    @GetMapping(&quot;&#x2F;user&#x2F;findByPage&quot;)    public IPage findByPage()&#123;&#x2F;&#x2F;        User:查询的是那张表，   0：起始值 从第几条开始取     2:每页条数  取几条        Page&lt;User&gt; page &#x3D; new Page&lt;User&gt;(0,2);        IPage iPage &#x3D; userMapper.selectPage(page,null);        return iPage;    &#125;</code></pre><ul><li>更简单的方法使用<code>PageHepler</code></li></ul><p><a name="ofM7O"></a></p><h3 id="代码生成器"><a class="markdownIt-Anchor" href="#代码生成器"></a> 代码生成器</h3><p>根据数据库中表来生成controller、mapper、service、entity层代码，虽然只是新建了类，省去手动的麻烦，<br>需要注意的时生成后要在service实现类和mapper类顶端加入@Service @Mapper注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.warehouse.common;import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;import com.baomidou.mybatisplus.core.toolkit.StringPool;import com.baomidou.mybatisplus.core.toolkit.StringUtils;import com.baomidou.mybatisplus.generator.AutoGenerator;import com.baomidou.mybatisplus.generator.InjectionConfig;import com.baomidou.mybatisplus.generator.config.*;import com.baomidou.mybatisplus.generator.config.po.TableInfo;import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;import com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;import java.util.ArrayList;import java.util.List;import java.util.Scanner;public class CodeGenerator &#123;    &#x2F;**     * &lt;p&gt;     * 读取控制台内容     * &lt;&#x2F;p&gt;     *&#x2F;    public static String scanner(String tip) &#123;        Scanner scanner &#x3D; new Scanner(System.in);        StringBuilder help &#x3D; new StringBuilder();        help.append(&quot;请输入&quot; + tip + &quot;：&quot;);        System.out.println(help.toString());        if (scanner.hasNext()) &#123;            String ipt &#x3D; scanner.next();            if (StringUtils.isNotBlank(ipt)) &#123;                return ipt;            &#125;        &#125;        throw new MybatisPlusException(&quot;请输入正确的&quot; + tip + &quot;！&quot;);    &#125;    &#x2F;**     * 操作步骤：     *  1.修改数据源包括地址密码信息，对应代码标记：一、 下同     *  2.模块配置，可以修改包名     *  3.修改模板（这步可忽略）     * @param args     *&#x2F;    public static void main(String[] args) &#123;        &#x2F;&#x2F; 代码生成器        AutoGenerator mpg &#x3D; new AutoGenerator();        &#x2F;&#x2F; 全局配置        GlobalConfig gc &#x3D; new GlobalConfig();        String projectPath &#x3D; System.getProperty(&quot;user.dir&quot;)+&quot;&#x2F;warehouse&quot;;        gc.setOutputDir(projectPath + &quot;&#x2F;src&#x2F;main&#x2F;java&quot;);        gc.setAuthor(&quot;promefire&quot;);        gc.setOpen(false);        gc.setSwagger2(true); &#x2F;&#x2F;实体属性 Swagger2 注解        gc.setBaseResultMap(true);&#x2F;&#x2F; XML ResultMap        gc.setBaseColumnList(true);&#x2F;&#x2F; XML columList        &#x2F;&#x2F;去掉service接口首字母的I, 如DO为User则叫UserService        gc.setServiceName(&quot;%sService&quot;);        mpg.setGlobalConfig(gc);        &#x2F;&#x2F; 数据源配置        DataSourceConfig dsc &#x3D; new DataSourceConfig();        &#x2F;&#x2F; 一、修改数据源        dsc.setUrl(&quot;jdbc:mysql:&#x2F;&#x2F;101.200.228.42:3306&#x2F;warehouse?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;useSSL&#x3D;false&amp;serverTimezone&#x3D;GMT%2B8&quot;);        &#x2F;&#x2F; dsc.setSchemaName(&quot;public&quot;);        dsc.setDriverName(&quot;com.mysql.jdbc.Driver&quot;);        dsc.setUsername(&quot;root&quot;);        dsc.setPassword(&quot;zhijie311&quot;);        mpg.setDataSource(dsc);        &#x2F;&#x2F; 包配置        PackageConfig pc &#x3D; new PackageConfig();        &#x2F;&#x2F;pc.setModuleName(scanner(&quot;模块名&quot;));        &#x2F;&#x2F; 二、模块配置        pc.setParent(&quot;com.warehouse&quot;)                .setEntity(&quot;entity&quot;)                .setMapper(&quot;mapper&quot;)                .setService(&quot;service&quot;)                .setServiceImpl(&quot;service.impl&quot;)                .setController(&quot;controller&quot;);        mpg.setPackageInfo(pc);        &#x2F;&#x2F; 自定义配置        InjectionConfig cfg &#x3D; new InjectionConfig() &#123;            @Override            public void initMap() &#123;                &#x2F;&#x2F; to do nothing            &#125;        &#125;;        &#x2F;&#x2F; 如果模板引擎是 freemarker        String templatePath &#x3D; &quot;templates&#x2F;mapper.xml.ftl&quot;;        &#x2F;&#x2F; 如果模板引擎是 velocity        &#x2F;&#x2F; String templatePath &#x3D; &quot;&#x2F;templates&#x2F;mapper.xml.vm&quot;;        &#x2F;&#x2F; 自定义输出配置        List&lt;FileOutConfig&gt; focList &#x3D; new ArrayList&lt;&gt;();        &#x2F;&#x2F; 自定义配置会被优先输出        focList.add(new FileOutConfig(templatePath) &#123;            @Override            public String outputFile(TableInfo tableInfo) &#123;                &#x2F;&#x2F; 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！                return projectPath + &quot;&#x2F;src&#x2F;main&#x2F;resources&#x2F;mapper&#x2F;&quot; + pc.getModuleName()                        + &quot;&#x2F;&quot; + tableInfo.getEntityName() + &quot;Mapper&quot; + StringPool.DOT_XML;            &#125;        &#125;);        cfg.setFileOutConfigList(focList);        mpg.setCfg(cfg);        &#x2F;&#x2F; 配置模板        TemplateConfig templateConfig &#x3D; new TemplateConfig();        templateConfig.setXml(null);        mpg.setTemplate(templateConfig);        &#x2F;&#x2F; 策略配置        StrategyConfig strategy &#x3D; new StrategyConfig();        strategy.setNaming(NamingStrategy.underline_to_camel);        strategy.setColumnNaming(NamingStrategy.underline_to_camel);        strategy.setEntityLombokModel(true);        strategy.setRestControllerStyle(true);        strategy.setInclude(scanner(&quot;表名，多个英文逗号分割&quot;).split(&quot;,&quot;));        strategy.setControllerMappingHyphenStyle(true);        mpg.setStrategy(strategy);        mpg.setTemplateEngine(new FreemarkerTemplateEngine());        mpg.execute();    &#125;&#125;</code></pre><p><a name="g1jMp"></a></p><h2 id="前端vue"><a class="markdownIt-Anchor" href="#前端vue"></a> 前端Vue</h2><p><a name="gqopA"></a></p><h3 id="前端项目导入到idea"><a class="markdownIt-Anchor" href="#前端项目导入到idea"></a> 前端项目导入到IDEA</h3><p>直接拷贝进项目目录下<br>1、在terminal中cd进前端文件夹，<code>npm run serve</code>启动<br>2、新建运行配置<br><img src="https://img.promefire.top/blog-img/20240621-0db31889c489ab64ae8de4aee2aea926.png" alt="image.png"><br><a name="PNsHK"></a></p><h4 id="导入element-plus适配vue3"><a class="markdownIt-Anchor" href="#导入element-plus适配vue3"></a> 导入Element Plus(适配Vue3)</h4><p>官网教程<a href="https://element-plus.org/zh-CN/guide/quickstart.html#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE">https://element-plus.org/zh-CN/guide/</a><br>1、安装</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">npm install element-plus --save</code></pre><p>2、全局导入<br>在<code>main.js</code>中加入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import &#123; createApp &#125; from &#39;vue&#39;import ElementPlus from &#39;element-plus&#39;import &#39;element-plus&#x2F;dist&#x2F;index.css&#39;import App from &#39;.&#x2F;App.vue&#39;const app &#x3D; createApp(App)app.use(ElementPlus)app.mount(&#39;#app&#39;)</code></pre><p><a name="DCUo5"></a></p><h4 id="导入element-ui适配vue2"><a class="markdownIt-Anchor" href="#导入element-ui适配vue2"></a> 导入Element UI（适配Vue2）</h4><p>文档：<a href="https://element-plus.org/zh-CN/">https://element-plus.org/zh-CN/</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">npm i element-ui -S</code></pre><p>在<code>main.js</code>中导入</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">import Vue from &#39;vue&#39;;+ import ElementUI from &#39;element-ui&#39;;+ import &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;;import App from &#39;.&#x2F;App.vue&#39;;+ Vue.use(ElementUI);new Vue(&#123;    el: &#39;#app&#39;,    render: h &#x3D;&gt; h(App)&#125;);</code></pre><p><a name="ZtBoH"></a></p><h3 id="搭建页面布局"><a class="markdownIt-Anchor" href="#搭建页面布局"></a> 搭建页面布局</h3><blockquote><p>使用containter容器</p></blockquote><p><a href="https://element-plus.org/zh-CN/component/container.html#%E4%BE%8B%E5%AD%90">https://element-plus.org/zh-CN/component/container.html#%E4%BE%8B%E5%AD%90</a></p><p><a name="anjNg"></a></p><h3 id="页面布局的拆分"><a class="markdownIt-Anchor" href="#页面布局的拆分"></a> 页面布局的拆分</h3><p>例如将<code>index</code>页拆分成 Header、Main、Aside 。将<Header></Header>前后行保留在index.vue文件中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;el-header style&#x3D;&quot;text-align: right; font-size: 12px; height: 100%&quot;&gt;        &lt;Header&gt;&lt;&#x2F;Header&gt;      &lt;&#x2F;el-header&gt;</code></pre><ul><li>数据记得要同步转移</li><li>记得要在index页面中导入组件<br><a name="qTx28"></a></li></ul><h3 id="header页面编写"><a class="markdownIt-Anchor" href="#header页面编写"></a> Header页面编写</h3><p>1、下拉菜单<br>2、导航栏伸缩</p><ul><li>使用图标时要先导入</li></ul><p><code> &lt;el-icon &gt;&lt;Memo /&gt;&lt;/el-icon&gt;</code>前要导入<code>import &#123;Memo,&#125; from '@element-plus/icons-vue'</code></p><p><a name="HPV5Y"></a></p><h3 id="菜单导航页面编写"><a class="markdownIt-Anchor" href="#菜单导航页面编写"></a> 菜单导航页面编写</h3><p><a name="Rp8e7"></a></p><h4 id="导航页伸缩实现"><a class="markdownIt-Anchor" href="#导航页伸缩实现"></a> 导航页伸缩实现</h4><p>思路：header点击图标–&gt;提交到父组件—&gt;改变aside组件<br></p><p>涉及到两次通信，第一次： header向父组件通信（子-&gt;父）。第二次：父组件向侧边栏组件通信（父-&gt;子）</p><p><a name="XDo80"></a></p><h4 id="组件间通信"><a class="markdownIt-Anchor" href="#组件间通信"></a> 组件间通信</h4><p><a name="zLZ8v"></a></p><h5 id="父子props"><a class="markdownIt-Anchor" href="#父子props"></a> 父–&gt;子（props）：</h5><p>父组件</p><ul><li><code>:propIsCollapse=&quot;isCollapse&quot;</code>前要加冒号</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;Aside :propIsCollapse&#x3D;&quot;isCollapse&quot;&gt;&lt;&#x2F;Aside&gt;&lt;&#x2F;template&gt;</code></pre><p>子组件</p><ul><li>要声明父组件传来的数据类型</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;export default &#123;  name: &quot;Aside&quot;,  props:&#123;    propIsCollapse:Boolean,  &#125;&#125;&lt;&#x2F;script&gt;</code></pre><p><a name="MGzBC"></a></p><h5 id="子父emit"><a class="markdownIt-Anchor" href="#子父emit"></a> 子—&gt;父（$emit）</h5><p>子组件 在方法sendMessage函数中emit了一个自定义事件，名为<code>emitCollapse</code><br>也可以传递参数<code>this.$emit(&quot;emitCollapse&quot;,1111)</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;export default &#123;    sendMessage()&#123;      this.$emit(&quot;emitCollapse&quot;)      &#x2F;&#x2F; this.$emit(&quot;emitCollapse&quot;,1111)    &#125;  &#125;,&lt;&#x2F;script&gt;</code></pre><p>父组件<br><code>@emitCollapse</code>表示事件名，与上面子组件emit的事件名称一致，<code>doCollapse</code>表示接收到子组件信息时运行这个函数，</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;export default &#123;  name: &quot;index&quot;,  components: &#123;Main, Header, Aside&#125;,  methods:&#123;    doCollapse(data)&#123;      console.log(data)      &#x2F;&#x2F; 将子组件传递的参数输出到控制台    &#125;  &#125;&#125;  &lt;&#x2F;script&gt;&lt;template&gt;  &lt;Header @emitCollapse&#x3D;&quot;doCollapse&quot; &gt;&lt;&#x2F;Header&gt;&lt;&#x2F;template&gt;</code></pre><p><a name="nzL0Q"></a></p><h3 id="axios网络请求"><a class="markdownIt-Anchor" href="#axios网络请求"></a> Axios网络请求</h3><p><img src="https://img.promefire.top/blog-img/20240606-deaadc2dff6f2a62c84f7ad057d174c0.png" alt="image.png"><br>文档地址：<a href="https://www.axios-http.cn/docs/intro">https://www.axios-http.cn/docs/intro</a><br>在前端项目<code>main.js</code>文件中加入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">import axios from &#39;axios&#39;Vue.prototype.$axios &#x3D; axios</code></pre><p>后端<br>1、全局<br>在后端项目新增配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class CorsConfig implements WebMvcConfigurer &#123;    @Override    public void addCorsMappings(CorsRegistry registry) &#123;        registry.addMapping(&quot;&#x2F;**&quot;) &#x2F;&#x2F;允许跨域访问的路径                &#x2F;&#x2F;是否发送Cookie                .allowCredentials(true)                &#x2F;&#x2F;允许跨域访问的源                .allowedOriginPatterns(&quot;*&quot;)                .allowedMethods(new String[]&#123;&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;&#125;) &#x2F;&#x2F;允许请求方法                .allowedHeaders(&quot;*&quot;) &#x2F;&#x2F;允许头部设置                .exposedHeaders(&quot;*&quot;);    &#125;&#125;</code></pre><p>2、单独Controller<br>单独一个控制器可以通过加``@CrossOrigin `注解实现，该controller下所有方法都可以跨域</p><p>在组件创建时运行获取后端数据，赋值给变量tableData</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">created:function () &#123;    this.$axios.get(&quot;http:&#x2F;&#x2F;localhost:8090&#x2F;&#x2F;user&#x2F;findAll&quot;).then(response&#x3D;&gt;&#123;      this.tableData &#x3D; response.data      console.log(response.data)    &#125;)  &#125;</code></pre><blockquote><p>在main.js中配置<code>axios.defaults.baseURL = &quot;http://localhost:8090&quot;</code>后，可简写成<code>this.$axios.get(&quot;user/findAll&quot;)</code></p></blockquote><p>将<code>tableData</code>数据显示在表格中，需要创建初始的id、no等字段</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue"> &lt;el-table :data&#x3D;&quot;tableData&quot;  :header-cell-style&#x3D;&quot;&#123;background: &#39;#d9d8d8&#39;,color: &#39;#000000&#39;&#125;&quot;  &gt;    &lt;el-table-column prop&#x3D;&quot;id&quot; label&#x3D;&quot;日期&quot; width&#x3D;&quot;140&quot;&gt;    &lt;&#x2F;el-table-column&gt;    &lt;el-table-column prop&#x3D;&quot;no&quot; label&#x3D;&quot;账号&quot; width&#x3D;&quot;120&quot;&gt;    &lt;&#x2F;el-table-column&gt;    &lt;el-table-column prop&#x3D;&quot;name&quot; label&#x3D;&quot;姓名&quot; width&#x3D;&quot;120&quot;&gt;    &lt;&#x2F;el-table-column&gt;&lt;&#x2F;el-table&gt;</code></pre><blockquote><p>其中id、no、name要与实体类中的变量名称对应</p></blockquote><p><a name="v1xqb"></a></p><h3 id="vue-router路由-组件切换"><a class="markdownIt-Anchor" href="#vue-router路由-组件切换"></a> vue Router路由-组件切换</h3><p>安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install vue-router@3</code></pre><blockquote><p>@3表示安装版本</p></blockquote><p>三个组件<code>Friends.vue</code>、<code>My.vue</code> <code>Discover.vue</code></p><p>Friends.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt; &lt;div&gt;   &lt;h1&gt;关注&lt;&#x2F;h1&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;</code></pre><p>My.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div&gt;  &lt;h1&gt;我的音乐&lt;&#x2F;h1&gt;&lt;&#x2F;div&gt;&lt;&#x2F;template&gt;</code></pre><p>Discover.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div&gt;  &lt;h1&gt;发现音乐&lt;&#x2F;h1&gt;&lt;&#x2F;div&gt;&lt;&#x2F;template&gt;</code></pre><p>在App.vue中</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id&#x3D;&quot;app&quot;&gt;  &lt;router-link to&#x3D;&quot;&#x2F;discover&quot;&gt;发现音乐&lt;&#x2F;router-link&gt;  &lt;router-link to&#x3D;&quot;&#x2F;my&quot;&gt;我的&lt;&#x2F;router-link&gt;  &lt;router-link to&#x3D;&quot;&#x2F;friends&quot;&gt;关注&lt;&#x2F;router-link&gt;&lt;!--占位符  --&gt;  &lt;router-view&gt;&lt;&#x2F;router-view&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import My from &quot;@&#x2F;components&#x2F;My.vue&quot;;import Discover from &quot;@&#x2F;components&#x2F;Discover.vue&quot;;import Friends from &quot;@&#x2F;components&#x2F;Friends.vue&quot;;export default &#123;  name: &#39;App&#39;,  components: &#123;    My,    Discover,    Friends,  &#125;&#125;&lt;&#x2F;script&gt;</code></pre><blockquote><p>此时只有链接，还需要配置路径和组件之间的对应关系</p></blockquote><ul><li>注意占位符<code>  &lt;router-view&gt;&lt;/router-view&gt;</code>不能丢</li><li><code>router.push(...)</code>等同于<code>&lt;router-link : to=&quot;...&quot;&gt;</code></li></ul><p>新建文件夹router,存放 路由–组件映射文件。新建index.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">import VueRouter from &quot;vue-router&quot;;import Vue  from &quot;vue&quot;;import My from &#39;..&#x2F;components&#x2F;My.vue&#39;import Friends from &quot;@&#x2F;components&#x2F;Friends.vue&quot;;import Discover from &quot;@&#x2F;components&#x2F;Discover.vue&quot;;Vue.use(VueRouter)const  router &#x3D; new VueRouter(&#123;    routes: [        &#x2F;&#x2F; 指定hash属性与组件之间的对应关系        &#123;path: &#39;&#x2F;discover&#39;, component: Discover&#125;,        &#123;path: &#39;&#x2F;friends&#39;, component: Friends&#125;,        &#123;path: &#39;&#x2F;my&#39;, component: My&#125;,      &#x2F;&#x2F; 重定向      &#x2F;&#x2F; 将首页重定向到discover页        &#123;path:&#39;&#39;, redirect:&#39;&#x2F;discover&#39;&#125;，    ]&#125;)export default router</code></pre><blockquote><p>需要修改的只有<code>routes</code>中路径与组件的对应关系</p></blockquote><p>之后在<code>main.js</code>中引入</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">import Vue from &#39;vue&#39;;import ElementUI from &#39;element-ui&#39;;import &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;;import axios from &#39;axios&#39;axios.defaults.baseURL &#x3D; &quot;http:&#x2F;&#x2F;localhost:8090&quot;Vue.prototype.$axios &#x3D; axios+ import router from &quot;.&#x2F;router&#x2F;index&quot;;import App from &#39;.&#x2F;App.vue&#39;;Vue.use(ElementUI);new Vue(&#123;    el: &#39;#app&#39;,+     router:router,    render: h &#x3D;&gt; h(App)&#125;);</code></pre><p><a name="uXZQS"></a></p><h4 id="子路由"><a class="markdownIt-Anchor" href="#子路由"></a> 子路由</h4><p>1、直接按之前的格式写，path路径写二级路径</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">const  router &#x3D; new VueRouter(&#123;    routes: [        &#x2F;&#x2F; 指定hash属性与组件之间的对应关系        &#123;path: &#39;&#x2F;discover&#39;, component: Discover&#125;,          .          .          .+        &#123;path:&#39;&#x2F;discover&#x2F;today&#39;,component: today&#125;    ]&#125;)</code></pre><p>2、使用chidren属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">&#123;path: &#39;&#x2F;discover&#39;, component: Discover,        children:[            &#123;path:&#39;today&#39;,component:today&#125;,        ]&#125;,</code></pre><p><a name="UdIHh"></a></p><h4 id="动态路由"><a class="markdownIt-Anchor" href="#动态路由"></a> 动态路由</h4><p>文档：<a href="https://v3.router.vuejs.org/zh/guide/">https://v3.router.vuejs.org/zh/guide/</a></p><blockquote><p>每一个商品都有一个详情页，不可能为每一个详情页写一个组件，这时就需要动态路由</p></blockquote><p>将多个链接跳转到一个组件,使用<code>:id</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">const  router &#x3D; new VueRouter(&#123;    routes: [        &#x2F;&#x2F; 指定hash属性与组件之间的对应关系        &#123;path: &#39;&#x2F;my&#39;, component: My,        children:[            &#123;path: &#39;:id&#39;,component: Product&#125;        ]        &#125;,    ]&#125;)</code></pre><p><a name="n4uok"></a></p><h4 id="导航守卫"><a class="markdownIt-Anchor" href="#导航守卫"></a> 导航守卫</h4><p><a href="https://v3.router.vuejs.org/zh/guide/advanced/navigation-guards.html">https://v3.router.vuejs.org/zh/guide/advanced/navigation-guards.html</a></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">router.beforeEach((to, from, next) &#x3D;&gt; &#123;  if (to.name !&#x3D;&#x3D; &#39;Login&#39; &amp;&amp; !isAuthenticated) next(&#123; name: &#39;Login&#39; &#125;)  else next()&#125;)</code></pre><ul><li><strong>to: Route</strong>: 即将要进入的目标 <a href="https://v3.router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1">路由对象</a></li><li><strong>from: Route</strong>: 当前导航正要离开的路由</li><li>守卫方法中如果声明了next形参，则必须调用next()函数，否则不允许用户访问任何一个路由<ul><li>直接放行：next()</li><li>强制停留在当前页面：next(false)</li><li>强制跳转到登录页面：next(‘/login’)<br><a name="AwX9Q"></a></li></ul></li></ul><h3 id="vuex状态管理"><a class="markdownIt-Anchor" href="#vuex状态管理"></a> VUEX状态管理</h3><p>文档：<a href="https://v3.vuex.vuejs.org/zh/">https://v3.vuex.vuejs.org/zh/</a><br>相当于把所用的值放在一起，谁用谁取，省去了组件之间的繁琐通信<br>安装：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install vuex@3</code></pre><p>创建一个state在 <code>/store/indes.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">import vue from &#39;vue&#39;import Vuex from &#39;vuex&#39;vue.use(Vuex)export default new Vuex.Store(&#123;    state:&#123;        menu:[]    &#125;,    mutations:&#123;        setMenu(state,menu)&#123;            state.menu &#x3D; menu        &#125;,        getMenu(state)&#123;            return state.menu        &#125;    &#125;&#125;)</code></pre><p>在main.js中导入</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">+ import store from &#39;.&#x2F;store&#39;new Vue(&#123;    el: &#39;#app&#39;,    router:router,+     store,    render: h &#x3D;&gt; h(App)&#125;);</code></pre><p>通过<code> store.state</code> 来获取状态对象，以及通过 <code>store.commit(&quot;xxx&quot;)</code>  方法触发状态变更：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">this.$store.commit(&quot;setMenu&quot;,res.data.menu)</code></pre><p><a name="ZNU4m"></a></p><h4 id="动态显示菜单和添加路由"><a class="markdownIt-Anchor" href="#动态显示菜单和添加路由"></a> 动态显示菜单和添加路由</h4><p>登录时根据用户权限类型取出用户可以访问的菜单，存到store中，侧边栏Aside读取store中menu显示菜单。同时根据menu将路由跳转信息动态添加到<code>router</code>中，</p><p>组件Aside中取store中的菜单数据,使用computed</p><blockquote><p>在 Vue.js 中，computed 属性用于计算属性的值，其值根据其他属性的值动态计算得出。在你的示例中，computed 属性 “menu” 用于从 Vuex 的状态中获取菜单数据<br>使用 computed 的主要优势在于：</p><ol><li><strong>响应式更新</strong>：computed 属性的值会根据其依赖的状态的变化而动态更新。当依赖的状态发生变化时，computed 属性会自动重新计算其值，并在视图中进行更新。</li><li><strong>缓存</strong>：computed 属性的值会被缓存，只有在其依赖的状态发生变化时才会重新计算。这样可以提高性能，避免不必要的计算。</li><li><strong>简洁性</strong>：computed 属性能够简化模板中的逻辑，使代码更加清晰和易读。通过在模板中直接使用 computed 属性，可以减少重复的计算和逻辑。</li></ol></blockquote><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">computed:&#123;  &quot;menu&quot;:&#123;    get()&#123;      return this.$store.state.menu    &#125;  &#125;&#125;,</code></pre><p>根据menu显示菜单</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;el-menu-item :index&#x3D;&quot;&#39;&#x2F;&#39; + item.menuclick &quot;  v-for&#x3D;&quot;(item,i) in menu&quot; :key&#x3D;&quot;i&quot;&gt;      &lt;i :class&#x3D;&quot;item.menuicon&quot;&gt;&lt;&#x2F;i&gt;      &lt;span slot&#x3D;&quot;title&quot; &gt;&#123;&#123; item.menuname &#125;&#125;&lt;&#x2F;span&gt;    &lt;&#x2F;el-menu-item&gt;</code></pre><p>根据menu信息添加路由<br>在<code>/store/index.js</code>中新建一个方法addNewRouter，在setMenu中调用。登录时保存菜单信息的同时添加路由</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">function addNewRouter(menulist)&#123;    let routes &#x3D; router.options.routes    console.log(routes)    routes.forEach(routerItem&#x3D;&gt;&#123;        if(routerItem.path &#x3D;&#x3D; &#39;&#x2F;Index&#39;)&#123;            menulist.forEach(menuitem&#x3D;&gt;&#123;                let childRoute &#x3D; &#123;                    path:&quot;&#x2F;&quot; + menuitem.menuclick,                    &#x2F;&#x2F; component: menuitem.menucomponent,                    name: menuitem.menuname,                    meta:&#123;                        title: menuitem.menuname                    &#125;,                    component:()&#x3D;&gt;import(&#39;..&#x2F;components&#x2F;&#39; + menuitem.menucomponent)                &#125;                routerItem.children.push(childRoute)            &#125;)        &#125;    &#125;)    router.addRoutes(routes)&#125;s</code></pre><p><a name="gN2qn"></a></p><h3 id="登录页面"><a class="markdownIt-Anchor" href="#登录页面"></a> 登录页面</h3><p>sessionStorage 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。存储的是 key/value <br>保存数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">sessionStorage.setItem(&quot;CurUser&quot;,JSON.stringify(res.data.user))</code></pre><p>获取数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">sessionStorage.getItem(&quot;CurUser&quot;)</code></pre><ul><li>获取到的数据是字符串格式，要使用<code>JSON.parse(&quot;xxx&quot;)</code>转换为json格式</li></ul><p><a name="CdHvY"></a></p><h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h3><p><a name="FuM17"></a></p><h4 id="报错navigationduplicated-avoided-redundant-navigation-to-current-location-home"><a class="markdownIt-Anchor" href="#报错navigationduplicated-avoided-redundant-navigation-to-current-location-home"></a> 报错：NavigationDuplicated: Avoided redundant navigation to current location: “/Home”</h4><p>这个警告通常在Vue Router中出现，它表示尝试导航到当前位置的冗余导航。这可能是因为你正在尝试导航到一个路由，而该路由已经是当前活动的路由。<br>解决：<a href="https://stackoverflow.com/questions/62462276/how-to-solve-avoided-redundant-navigation-to-current-location-error-in-vue">https://stackoverflow.com/questions/62462276/how-to-solve-avoided-redundant-navigation-to-current-location-error-in-vue</a></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">this.$router.push(&quot;&#x2F;Home&quot;).catch(()&#x3D;&gt;&#123;&#125;);</code></pre><p>避免错误显示，让浏览器以为错误被处理了。</p><p><a name="WpPAl"></a></p><h4 id="vue启动项目卡在24"><a class="markdownIt-Anchor" href="#vue启动项目卡在24"></a> Vue启动项目卡在24%</h4><p>解决：<a href="https://blog.csdn.net/m0_60967241/article/details/124308389">https://blog.csdn.net/m0_60967241/article/details/124308389</a><br>原因是某个vue组件中<code>&lt;template&gt;&lt;/template&gt;</code> 出现了未用<code>&lt;div&gt;</code> 包装起来的东西</p><p><a name="PLmUp"></a></p><h3 id="菜单跳转"><a class="markdownIt-Anchor" href="#菜单跳转"></a> 菜单跳转</h3><ul><li>主要要加router！！！！！！！！！！！！！！！！！！！！！！！</li></ul><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">&lt;el-menu      default-active&#x3D;&quot;&#x2F;Home&quot;      background-color&#x3D;&quot;#545c64&quot;      text-color&#x3D;&quot;#fff&quot;      active-text-color&#x3D;&quot;#ffd04b&quot;      :collapse&#x3D;&quot;propIsCollapse&quot;      :collapse-transition&#x3D;&quot;false&quot;      style&#x3D;&quot;height: 100vh&quot;+      router        &gt;    &lt;el-menu-item index&#x3D;&quot;&#x2F;Home&quot;&gt;      &lt;i class&#x3D;&quot;el-icon-s-home&quot;&gt;&lt;&#x2F;i&gt;      &lt;span slot&#x3D;&quot;title&quot; &gt;主页&lt;&#x2F;span&gt;    &lt;&#x2F;el-menu-item&gt;    &lt;el-menu-item index&#x3D;&quot;&#x2F;User&quot;&gt;      &lt;i class&#x3D;&quot;el-icon-s-home&quot;&gt;&lt;&#x2F;i&gt;      &lt;span slot&#x3D;&quot;title&quot; &gt;导航一&lt;&#x2F;span&gt;    &lt;&#x2F;el-menu-item&gt;    &lt;el-menu-item index&#x3D;&quot;&#x2F;Record&quot;&gt;      &lt;i class&#x3D;&quot;el-icon-s-home&quot;&gt;&lt;&#x2F;i&gt;      &lt;span slot&#x3D;&quot;title&quot; &gt;导航一&lt;&#x2F;span&gt;    &lt;&#x2F;el-menu-item&gt;  &lt;&#x2F;el-menu&gt;</code></pre><p><a name="bFCJ0"></a></p><h3 id="form表单重置"><a class="markdownIt-Anchor" href="#form表单重置"></a> Form表单重置</h3><p>表单重置：<a href="https://www.cnblogs.com/ggsddu/p/12297980.html">https://www.cnblogs.com/ggsddu/p/12297980.html</a></p><p>表格中选中的物品某一栏，点击入库，自动填充物品名不变化，去掉<code>prop=&quot;name&quot;</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;el-form-item label&#x3D;&quot;物品名&quot; -         prop&#x3D;&quot;name&quot;  &gt;          &lt;el-col :span&#x3D;&quot;20&quot;&gt;            &lt;el-input v-model&#x3D;&quot;form1.name&quot;&gt;&lt;&#x2F;el-input&gt;          &lt;&#x2F;el-col&gt;        &lt;&#x2F;el-form-item&gt;</code></pre><p><a name="io79P"></a></p><h2 id="部署"><a class="markdownIt-Anchor" href="#部署"></a> 部署</h2><p>服务器：centos<br>前端：Vue<br>后端：Spring boot <br>数据库：Mysql</p><p>JDK8 linux安装<br><a href="https://repo.huaweicloud.com/java/jdk/8u151-b12/">https://repo.huaweicloud.com/java/jdk/8u151-b12/</a></p><p><a name="qqudx"></a></p><h3 id="前端项目部署"><a class="markdownIt-Anchor" href="#前端项目部署"></a> 前端项目部署</h3><p>1、cd进前端项目目录，执行<code>npm run build</code>打包，运行后会生成<code>dist</code>文件夹，打包上传到服务器<br>2、服务器端<br>查看nginx配置文件路径</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx -t</code></pre><p>修改配置文件，新增一个server如下</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">...server    &#123;        listen 888;        server_name phpmyadmin;        index index.html index.htm index.php;        root  &#x2F;www&#x2F;server&#x2F;phpmyadmin;        #error_page   404   &#x2F;404.html;        include enable-php.conf;        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$        &#123;            expires      30d;        &#125;        location ~ .*\.(js|css)?$        &#123;            expires      12h;        &#125;        location ~ &#x2F;\.        &#123;            deny all;        &#125;        access_log  &#x2F;www&#x2F;wwwlogs&#x2F;access.log;    &#125;+server &#123;+    listen 8091;+    server_name 101.200.228.42;  # 替换为你的域名或 IP 地址++    root &#x2F;usr&#x2F;server&#x2F;Vue&#x2F;dist&#x2F;;+    index index.html;+    location &#x2F; &#123;+        try_files $uri $uri&#x2F; &#x2F;index.html;+    &#125;+&#125;</code></pre><ul><li>路径修改为存放dist的目录<br><a name="C2h2v"></a></li></ul><h3 id="后端项目部署"><a class="markdownIt-Anchor" href="#后端项目部署"></a> 后端项目部署</h3><p>0：安装maven环境<br>下载地址：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a><br>1、项目打包（jar包）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn package</code></pre><blockquote><p>jar包自带tomcat服务器，打包成war包的话需要自己配置服务器</p></blockquote><p>2、后台运行jar包<br>上传到服务器后指定端口运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -jar -Dserver.port&#x3D;8090 warehouse.jar</code></pre><p>使用<code>screen -U</code>后台运行</p><ul><li>如果之前用的本地数据库要修改为服务器数据库</li><li>vue项目中从后端取数据的路径要修改为服务器ip或域名</li><li>端口<strong>安全组</strong>、<strong>防火墙</strong>放行</li></ul><p><a name="rQF52"></a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 项目记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo部署到服务器</title>
      <link href="//post/hexo-transfer-aliyun.html"/>
      <url>//post/hexo-transfer-aliyun.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​偶然发现租的阿里云服务器还可以低价续费一年，既然这样，还是把hexo博客迁移到服务器上吧。几年前迁移到服务器一次，当时是本机直接推送Github Page与服务器。但现在我用的是Github Action ，推送到Github Page无需在本机进行编译，如果用原来的方法推送服务器还得多一步本机编译过程。于是想能不能服务器监听Github仓库更新来自动部署hexo，整起！</p><h2 id="服务器端"><a class="markdownIt-Anchor" href="#服务器端"></a> 服务器端</h2><p>前置工作：1、git环境 2、Nginx</p><p>新建目录<code>/www/hexo/public</code> ,将github仓库中的<strong>main</strong>分支pull到该目录</p><blockquote><p>后面宝塔建站不能放在其他敏感目录…</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkdir &#x2F;www&#x2F;hexomkdir publiccd publicgit initgit remote add origin https:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;xxx.github.io.gitgit pull origin main</code></pre><p>安装<code>github-webhook-handler</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd &#x2F;www&#x2F;hexonpm install github-webhook-handler</code></pre><h3 id="创建hook"><a class="markdownIt-Anchor" href="#创建hook"></a> 创建hook</h3><p>创建一个hook，作用是监听 <code>GitHub Webhook </code> 事件并在收到 push 事件时执行一个 Shell 脚本进行部署</p><h4 id="监听脚本"><a class="markdownIt-Anchor" href="#监听脚本"></a> 监听脚本</h4><p>新建<code>webhook.js</code>文件，如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">var http &#x3D; require(&#39;http&#39;)var createHandler &#x3D; require(&#39;github-webhook-handler&#39;)var handler &#x3D; createHandler(&#123; path: &#39;&#x2F;&#39;, secret: &#39;yoursecret&#39; &#125;)function run_cmd(cmd, args, callback) &#123;  var spawn &#x3D; require(&#39;child_process&#39;).spawn;  var child &#x3D; spawn(cmd, args);  var resp &#x3D; &quot;&quot;;  child.stdout.on(&#39;data&#39;, function(buffer) &#123; resp +&#x3D; buffer.toString(); &#125;);  child.stdout.on(&#39;end&#39;, function() &#123; callback (resp) &#125;);&#125;http.createServer(function (req, res) &#123;  handler(req, res, function (err) &#123;    res.statusCode &#x3D; 404    res.end(&#39;no such location&#39;)  &#125;)&#125;).listen(7777)handler.on(&#39;error&#39;, function (err) &#123;  console.error(&#39;Error:&#39;, err.message)&#125;)handler.on(&#39;push&#39;, function (event) &#123;  console.log(&#39;Received a push event for %s to %s&#39;,    event.payload.repository.name,    event.payload.ref);    run_cmd(&#39;sh&#39;, [&#39;.&#x2F;deploy.sh&#39;,event.payload.repository.name], function(text)&#123; console.log(text) &#125;);&#125;)</code></pre><ul><li><code>var handler = createHandler(&#123; path: '/', secret: 'yoursecret' &#125;)</code> 中screct自己设置，后面在Github配置webhook会用到</li><li>listen(7777)   监听端口要在安全组中打开</li></ul><h4 id="执行脚本"><a class="markdownIt-Anchor" href="#执行脚本"></a> 执行脚本</h4><p>新建脚本文件<code>deploy.sh</code> ,运行是执行pull操作，拉取main分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#!&#x2F;bin&#x2F;bashWEB_PATH&#x3D;&#39;&#x2F;www&#x2F;hexo&#x2F;public&#39;echo &quot;Start deployment&quot;cd $WEB_PATHecho &quot;pulling source code...&quot;git reset --hard origin&#x2F;maingit clean -fgit pullgit checkout mainecho &quot;Finished.&quot;</code></pre><ul><li>要注意分支是<code>master</code>还是<code>main</code></li></ul><h4 id="后台运行"><a class="markdownIt-Anchor" href="#后台运行"></a> 后台运行</h4><p>1、使用<code>nohup</code>命令后台执行<code>webhook.js</code>,输出日志到当前目录下<code>deploy.log</code></p><blockquote><p><strong>nohup</strong> 英文全称 no hang up（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nohup node webhook.js &gt; deploy.log &amp;</code></pre><p>2、使用screen</p><p>启动一个新的<code>screen</code>会话</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">screen -S webhook  #webhook是会话名称</code></pre><p>执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">node webhook.js &gt; deploy.log &amp;</code></pre><h3 id="web显示"><a class="markdownIt-Anchor" href="#web显示"></a> Web显示</h3><p>使用宝塔添加站点，网站根目录为<code>/www/hexo/public</code>,与上面保持一致，没有域名使用<code>IP:port</code></p><img src="https://img.promefire.top/blog-img/20240417-222381e5aecc3b06365c99d2fe89641a.png" alt="image-20240417165820866" style="zoom:50%;"><h2 id="github配置webhook"><a class="markdownIt-Anchor" href="#github配置webhook"></a> Github配置webhook</h2><p>​在仓库<code>xxx.github.io</code> ----&gt;setting------&gt;Webhooks-----&gt;Add webhook</p><img src="https://img.promefire.top/blog-img/20240417-b9d11ae064dfed4cb4f154f6e8c966cf.png" alt="image-20240417170516949" style="zoom:50%;"><ul><li>Url 填<code>http://域名：监听端口</code> 或<code>http://IP:监听端口</code></li><li>第二行选Json</li><li>Secret在<code>webhook</code> 设置</li></ul><h2 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h2><p>​配置结束后，本机Git三件套推送至hexo_source(源码仓库)，Github Action编译更新静态文件仓库<code>xxxx.github.io</code>，静态文件仓库更新后使用webhook 配合nodejs自动进行服务器端页面更新。</p><p>Github Action：</p><img src="https://img.promefire.top/blog-img/20240417-8b72a72c467e2acfed2087e24360f966.png" alt="image-20240417172520348" style="zoom:50%;"><p>Webhook执行结果</p><p><img src="https://img.promefire.top/blog-img/20240417-f852239f41cecb25789e7f7d9cf53067.png" alt="image-20240417181230749"></p><p>服务器端日志</p><img src="https://img.promefire.top/blog-img/20240417-463ef7007f2de935326283ddaaa8eaf7.png" alt="image-20240417172622858" style="zoom:50%;"><p>参考：</p><p><a href="https://blog.mutoe.com/2017/deploy-hexo-website-to-self-server">https://blog.mutoe.com/2017/deploy-hexo-website-to-self-server</a></p><p><a href="https://www.jianshu.com/p/e4cacd775e5b">https://www.jianshu.com/p/e4cacd775e5b</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 优化 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客分类与标签使用规范</title>
      <link href="//post/blog-category-tag-guide.html"/>
      <url>//post/blog-category-tag-guide.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="分类系统categories"><a class="markdownIt-Anchor" href="#分类系统categories"></a> 分类系统(Categories)</h2><p>分类采用层级式管理，每篇文章建议只选择一个主分类。</p><h3 id="技术分类"><a class="markdownIt-Anchor" href="#技术分类"></a> 技术分类</h3><ul><li>前端开发<ul><li>HTML/CSS</li><li>JavaScript</li><li>前端框架</li></ul></li><li>后端开发<ul><li>Java</li><li>Python</li><li>数据库</li></ul></li><li>算法与数据结构<ul><li>基础算法</li><li>高级算法</li><li>力扣题解</li></ul></li><li>开发工具<ul><li>IDE</li><li>版本控制</li><li>构建工具</li></ul></li><li>系统运维<ul><li>Linux</li><li>Docker</li><li>服务器</li></ul></li></ul><h3 id="学习笔记"><a class="markdownIt-Anchor" href="#学习笔记"></a> 学习笔记</h3><ul><li>读书笔记</li><li>课程笔记</li><li>实验记录</li></ul><h3 id="生活随笔"><a class="markdownIt-Anchor" href="#生活随笔"></a> 生活随笔</h3><ul><li>日常感悟</li><li>兴趣爱好</li><li>旅行记录</li></ul><h2 id="标签系统tags"><a class="markdownIt-Anchor" href="#标签系统tags"></a> 标签系统(Tags)</h2><p>标签用于更细致地描述文章内容，一篇文章可以有多个标签。</p><h3 id="编程语言标签"><a class="markdownIt-Anchor" href="#编程语言标签"></a> 编程语言标签</h3><ul><li>JavaScript</li><li>Python</li><li>Java</li><li>C++</li><li>Go</li></ul><h3 id="框架标签"><a class="markdownIt-Anchor" href="#框架标签"></a> 框架标签</h3><ul><li>Vue</li><li>React</li><li>Angular</li><li>Spring Boot</li><li>Django</li><li>Flask</li></ul><h3 id="工具标签"><a class="markdownIt-Anchor" href="#工具标签"></a> 工具标签</h3><ul><li>Git</li><li>Docker</li><li>VS Code</li><li>IDEA</li><li>Vim</li></ul><h3 id="主题标签"><a class="markdownIt-Anchor" href="#主题标签"></a> 主题标签</h3><ul><li>算法</li><li>设计模式</li><li>网络</li><li>数据库</li><li>安全</li><li>性能优化</li></ul><h3 id="状态标签"><a class="markdownIt-Anchor" href="#状态标签"></a> 状态标签</h3><ul><li>原创</li><li>转载</li><li>翻译</li></ul><h2 id="使用规范"><a class="markdownIt-Anchor" href="#使用规范"></a> 使用规范</h2><ol><li><p>分类使用规范：</p><ul><li>每篇文章必须选择一个主分类</li><li>分类使用层级结构，最多两级</li><li>分类名称使用中文</li></ul></li><li><p>标签使用规范：</p><ul><li>每篇文章建议使用3-5个标签</li><li>标签优先使用已有标签</li><li>技术类标签使用英文</li><li>描述类标签使用中文</li></ul></li><li><p>Front-matter示例：</p></li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">---title: Vue3 组件开发最佳实践date: 2024-03-21categories:   - [技术, 前端开发]tags:   - Vue  - JavaScript  - 组件开发  - 最佳实践  - 原创description: 本文介绍Vue3组件开发中的一些最佳实践和经验总结。---</code></pre><h2 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h2><ol><li>创建新分类前，请先查看现有分类是否适用</li><li>创建新标签前，请先查看是否有类似标签存在</li><li>分类和标签都应该具有实际意义，避免过于宽泛或者过于具体</li><li>定期检查和整理分类与标签系统，保持其条理性和实用性</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给博客提提速！</title>
      <link href="//post/blogspeedup.html"/>
      <url>//post/blogspeedup.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>​部署在Github 的博客墙内访问很糟糕，博客提速刻不容缓！</p><h2 id="使用cloudflare加速github-pages"><a class="markdownIt-Anchor" href="#使用cloudflare加速github-pages"></a> 使用cloudflare加速Github pages</h2><h3 id="设置域名解析"><a class="markdownIt-Anchor" href="#设置域名解析"></a> 设置域名解析</h3><p>首先要有一个域名，添加解析记录 ,记录类型选择<code>CNAME</code> ,记录值写<code>username.github.io</code> ,如图</p><p><img src="https://img.promefire.top/blog-img/20240115-f9f3f702a64c4980d943f5d8f13b7f17.png" alt="image-20240109191314520"></p><h3 id="设置github-page"><a class="markdownIt-Anchor" href="#设置github-page"></a> 设置Github Page</h3><p>Github Page 提供了<code>Custom domain</code> 服务，</p><p>在<code>username.github.io</code> 仓库下 <code>setting</code> -&gt;  <code>Pages</code> -&gt;<code>Custom domain</code>  填入域名<code>blog.promefire.top</code> 。保存后会在根目录生成<code>CNAME</code> 文件，里面保存域名配置信息</p><p><img src="https://img.promefire.top/blog-img/20240110-1aa5949d2b207f4e00efe905bb1789ee.png" alt></p><h2 id="使用-clouddlare-cdn"><a class="markdownIt-Anchor" href="#使用-clouddlare-cdn"></a> 使用 Clouddlare CDN</h2><p>1、点击<a href="https://dash.cloudflare.com/sign-up">这里</a>注册，选择免费套餐</p><p>2、添加站点</p><p>这要要填二级域名，不是前加<code>blog</code> 的子域名</p><p><img src="https://img.promefire.top/blog-img/20240115-2f50787d20441ebb0c8059fa1952492e.png" alt="image-20240109193609504"></p><p>3、提交之后会自动扫描域名的解析,</p><p>4、在域名注册机构（我的是阿里云）处添加DNS解析</p><p><img src="https://img.promefire.top/blog-img/20240116-5d6393328a89c2ab8f95bc961af73ac0.png" alt="image-20240109194118591"></p><p>在域名控制台选择 DNS修改—&gt;修改DNS服务器，将上图<strong>已分配的Cloudflare名称服务器</strong> 的两行输入。需要等待一段时间才会更改</p><p><img src="https://img.promefire.top/blog-img/20240116-a1205f96b6a8fe94e81b9fd833be45a1.png" alt="image-20240109194308296"></p><p>浏览器输入<code>chrome://net-internals/?#dns</code> 清空DNS缓存，再次访问<code>blog.promefire.top</code> 。F12查看<code>Sever</code> 是 <code>cloudflare</code> 了</p><p><img src="https://img.promefire.top/blog-img/20240115-d36689dff2d5c7bb12df2440ef494507.png" alt="image-20240109195046681"></p><h3 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h3><div class="admonition note"><p class="admonition-title">什么是CDN？</p><p>CDN（Content Delivery Network, 内容分发网络）是为加快网络访问速度而建立在现有网络之上的分布式网络，它依靠部署在全球各地边缘节点的服务器群，通过负载均衡，内容发布，内容管理和内容存储的功能，由CDN服务器集群分担源站点服务器集群的压力，使用户可以就近获取已缓存的访问资源，避免网络拥堵，加快访问速度。与此同时，CDN是基于DNS解析进行管理的，其利用DNS技术和HTTPS协议确保了传输内容的安全性，保障用户的访问内容的安全性。</p></div><p>​CDN的基本原理是依靠部署在各个区域大量缓存服务器的响应。当用户访问网站时，不需要访问站点的DNS服务器，而是利用全局负载技术将用户的请求直接指向最近的缓存服务器上，且保证服务器是正常工作的，访问的路径和内容是传输安全的，由此缓存服务器直接响应客户的请求。访问缓存服务器可以尽可能地避免网络拥堵状况，使传输的内容更加迅速和稳定。</p><p>​</p><h3 id="问题1-重定向次数太多无法访问"><a class="markdownIt-Anchor" href="#问题1-重定向次数太多无法访问"></a> 问题1、重定向次数太多无法访问</h3><p>解决：将Cloudflare中的<strong>SSL/TLS加密模式</strong>  修改为<strong>完全(严格)</strong></p><p>原因：当网站开启了 CloudFlare 服务，用户访问我们的网站时，其实访问的离用户比较近的 Cloudflare 服务器，Cloudflare 再代理用户请求我们的源服务器，以达到加速和保护源服务器的目的。Cloudflare 代理用户请求我们源服务器获取网页资源的过程叫回源。</p><p>Cloudflare 造成循环重定向的错误就出在了回源的过程中，造成这种错误的原因就是 http 和 https 之间的重定向。</p><h3 id="问题2-部署一次后custom-domain-失效"><a class="markdownIt-Anchor" href="#问题2-部署一次后custom-domain-失效"></a> 问题2、部署一次后<code>custom domain</code> 失效</h3><p>在<code>source</code> 目录下新建文件<code>CNAME</code> ，写入解析的域名<code>blog.promfire.top</code></p><h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考：</h3><p>网站性能分析工具：<a href="https://pagespeed.web.dev/">PageSpeed Insights</a></p><p><a href="https://monkeywie.cn/2020/08/20/fast-github-page-with-cloudflare/">fast-github-page-with-cloudflare</a></p><p><a href="https://sumygg.com/2023/11/13/use-cloudflare-speed-up-github-pages/index.html">use-cloudflare-speed-up-github-pages</a></p><p><a href="https://www.cloudflare.com/zh-cn/learning/cdn/cdn-benefits/">CDN的好处</a></p><h2 id="使用cloudflare-r2做博客图床"><a class="markdownIt-Anchor" href="#使用cloudflare-r2做博客图床"></a> 使用cloudflare R2做博客图床</h2><p>之前地Github 图床因为墙内访问不友好，弃之。</p><p>为什么选择R2图床? <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">免费！且墙内可访问</span></span></p><p>跟着<a href="https://blog.huacai.one/post/3">参考教程</a> 走没什么问题。</p><h2 id="图片懒加载"><a class="markdownIt-Anchor" href="#图片懒加载"></a> 图片懒加载</h2><p>butterfly自带图片懒加载 。 比<code>hexo-lazy-image</code> 好用多了  😭  感谢 <a href="https://blog.gz-metal-cell.top/">Metal-Cell</a></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Lazyload (圖片懶加載)# https:&#x2F;&#x2F;github.com&#x2F;verlok&#x2F;vanilla-lazyloadlazyload:  enable: true  field: site # site&#x2F;post  placeholder:  blur: false  #使用模糊效果作为占位符</code></pre><h2 id="图片压缩"><a class="markdownIt-Anchor" href="#图片压缩"></a> 图片压缩</h2><p>调整分辨率并转格式</p><ul><li>将图像调整为原图的70%，直到图像分辨率小于 <code>1280 × 1280</code>。</li><li>使用<code>webp</code>格式保存图像</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding: utf-8 -import cv2from PIL import Imageimport sysimport osimport numpy as npdef GetArgs():    args &#x3D; sys.argv    if(len(args) &gt; 1):        arg1 &#x3D; args[1]  # 文件加路径    return arg1.replace(&#39;\\&#39;,&#39;\\\\&#39;)def list_files_in_folder(folder_path):    # 获取文件夹中的所有文件和子文件夹    files_and_folders &#x3D; os.listdir(folder_path)    # 遍历文件和子文件夹    for item in files_and_folders:        # 获取完整路径        img_path &#x3D; os.path.join(folder_path, item)        CompressImg(img_path, img_path, 70)    print(f&quot;Image resized and saved&quot;)def CompressImg(inImg, outImg, scale_percent):    min_width &#x3D; 1280    min_height &#x3D; 1280    # img &#x3D; cv2.imread(inImg)    img &#x3D; cv2.imdecode(np.fromfile(inImg,dtype&#x3D;np.uint8),-1)    if img is None:        print(f&quot;无法读取图像: &#123;inImg&#125;&quot;)        return    # 检查图像大小是否为空    if img.size &#x3D;&#x3D; 0:        print(f&quot;图像大小为空: &#123;inImg&#125;&quot;)        return    # 等比例缩小图像直到图像宽&#x2F;高小于设定的值    while img.shape[1] &gt; min_width and img.shape[0] &gt; min_height:        # 计算调整后的大小 等比例缩小        new_width &#x3D; int(img.shape[1] * scale_percent &#x2F; 100)        new_height &#x3D; int(img.shape[0] * scale_percent &#x2F; 100)        # 调整图像大小        resized_img &#x3D; cv2.resize(img, (new_width, new_height))        pil_img &#x3D; Image.fromarray(cv2.cvtColor(resized_img, cv2.COLOR_BGR2RGB))        pil_img.save(outImg, &#39;webp&#39;)        print(outImg)        img &#x3D; resized_imgif __name__ &#x3D;&#x3D; &quot;__main__&quot;:    dir_path &#x3D; GetArgs()    print(&quot;dir_path &#x3D; &quot; + str(dir_path))    list_files_in_folder(dir_path)</code></pre><ul><li>终端运行<code> python CompressImg.py xxx</code> ,<code>xxx</code>为文件夹路径，用<code>“\\”</code>隔开</li><li>最后格式还是jpg是因为中途失误使用<code>  pil_img.save(outImg, 'webp')</code>  转换为<code>webp</code>格式但后缀没改，发现好像没什么影响，图片还是压缩了,就不改了</li><li><code>cv2.imread</code> 无法读取中文路径问题：将<code> img = cv2.imread(inImg)</code> 修改为<code>img = cv2.imdecode(np.fromfile(inImg,dtype=np.uint8),-1)</code></li></ul><p>效果很显著！</p><blockquote><p>在线<a href="https://www.adobe.com/cn/express/feature/video/convert/video-to-gif">视频转Gif</a></p></blockquote><p><img src="https://img.promefire.top/blog-img/20240116-39b24fa18e875075e70a01120dd915ec.gif" alt="compressImg"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 优化 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker相关</title>
      <link href="//post/docker.html"/>
      <url>//post/docker.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img.promefire.top/blog-img/20240116-b4bbb869224799d59326ffa6f48b3949.png" alt="img"></p><h2 id="centos下安装"><a class="markdownIt-Anchor" href="#centos下安装"></a> CentOS下安装</h2><p>1、下载docker-ce的yum源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</code></pre><p>2、安装Docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo yum -y install docker-ce</code></pre><p>3、检查是否安装成功</p><pre class="line-numbers language-none"><code class="language-none">sudo docker -v</code></pre><p><img src="https://img.promefire.top/blog-img/20240116-262d8f65031ff1f77a30c1d11147f7ed.png" alt="image-20240105185232095"></p><hr><p>4、启动Docker服务，并设置开机自启</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo systemctl start dockersudo systemctl enable docker</code></pre><p>5、检查是否启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo systemctl status docker</code></pre><p><img src="https://img.promefire.top/blog-img/20240116-5d742c3d284c9587400c349badca43f8.png" alt="image-20240105185408621"></p><h2 id="docker是什么"><a class="markdownIt-Anchor" href="#docker是什么"></a> Docker是什么</h2><blockquote><p><strong>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口</strong></p><p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p></blockquote><p>简而言之就是 代码 + 环境 。可以方便地运行、迁移。</p><h2 id="image文件"><a class="markdownIt-Anchor" href="#image文件"></a> image文件</h2><p>**Docker 把应用程序及其依赖，打包在 image 文件里面。**只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p><h2 id="容器文件"><a class="markdownIt-Anchor" href="#容器文件"></a> 容器文件</h2><p>**image 文件生成的容器实例，本身也是一个文件，称为容器文件。**也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。</p><h2 id="实例"><a class="markdownIt-Anchor" href="#实例"></a> 实例</h2><p>从<a href="https://hub.docker.com/u/library">镜像仓库</a>拉取镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker image pull library&#x2F;hello-world</code></pre><p><code>docker image pull</code>是抓取 image 文件的命令。<code>library/hello-world</code>是 image 文件在仓库里面的位置，其中<code>library</code>是 image 文件所在的组，<code>hello-world</code>是 image 文件的名字。</p><p>查看image文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker image ls</code></pre><p>运行image文件</p><pre class="line-numbers language-none"><code class="language-none">docker container run hello-world</code></pre><p><code>docker container run</code>命令会从 image 文件，生成一个正在运行的容器实例。</p><p>注意，<code>docker container run</code>命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的<code>docker image pull</code>命令并不是必需的步骤。</p><h2 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h2><p><img src="https://img.promefire.top/blog-img/20240607-fe718107f6acdd72587af484303c4d96.png" alt="image-20240607102112516"></p><p>运行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -v &#x2F;root&#x2F;redis&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \-v &#x2F;root&#x2F;redis&#x2F;data:&#x2F;data \-d --name redis-server \-p 6379:6379 \redis:latest </code></pre><ul><li>-d :容器后台运行</li><li>-p：宿主机端口映射到容器内端口</li><li>–name 起名字</li><li>-v： 数据卷挂载</li></ul><blockquote><p>数据卷：是一个虚拟目录，是容器内目录和宿主机目录之间映射的桥梁。双向映射</p></blockquote><p>挂载不指定，会自动创建</p><p><img src="https://img.promefire.top/blog-img/20240607-5b5242507a7a76410c8daf080633f71d.png" alt="image-20240607105222350"></p><p>进入容器内部</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker exec -it redis-server bash</code></pre><ul><li>-it 添加一个可输入的终端</li><li>bash 表示使用命令行交互</li></ul><blockquote><p>有个特别需要注意的点：开启多个docker容器会造成很大的性能消耗，我在阿里云学生机启动三个docker就会直接死机/(ㄒoㄒ)/~~</p></blockquote><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考：</h2><p><a href="https://ruanyifeng.com/blog/2018/02/docker-tutorial.html">Docker 入门教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 容器化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium多线程简单应用</title>
      <link href="//post/selenium-shua-bo-ke-fang-wen-liang.html"/>
      <url>//post/selenium-shua-bo-ke-fang-wen-liang.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>​<a href="https://gz-metal-cell.github.io/">关哥</a>博客新增了浏览量，个位数的浏览量怎么配得上关哥身份，给Metal-Cell刷点浏览量。</p><h2 id="初始代码"><a class="markdownIt-Anchor" href="#初始代码"></a> 初始代码</h2><p>发现只要刷新就会计入访问量，所以只需调用<code>selenium</code> 刷新网页的功能就行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from selenium import webdriverimport threading#浏览器请求头headers &#x3D; &#123;    &quot;Cookie&quot; : &quot;XXXXXX&quot;,    &quot;user-agent&quot;: &quot;xxxxx&quot;    &#125;# 浏览器相关设置chrome_path &#x3D; r&#39;path\to\chromedriver.exe&#39;chrome_options &#x3D; webdriver.ChromeOptions()#忽略ssl验证chrome_options.add_argument(&#39;--ignore-certificate-errors&#39;)# 无窗口运行# chrome_options.add_argument(&quot;--headless&quot;)driver &#x3D; webdriver.Chrome(executable_path&#x3D;chrome_path, options&#x3D;chrome_options)# 博客链接url &#x3D; &quot;xxxxxx&quot;driver.get(url)#刷新网页driver.refresh()</code></pre><h3 id="设置代理"><a class="markdownIt-Anchor" href="#设置代理"></a> 设置代理</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 创建 webdriver 并设置代理IPproxy &#x3D; &#39;127.0.0.1:10808&#39;chrome_options.add_argument(&#39;--proxy-server&#x3D;http:&#x2F;&#x2F;&#39; + proxy)driver &#x3D; webdriver.Chrome(executable_path&#x3D;chrome_path, options&#x3D;chrome_options)</code></pre><h3 id="加入多线程"><a class="markdownIt-Anchor" href="#加入多线程"></a> 加入多线程</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">import threadingdef start_brower():    headers &#x3D; &#123;        &quot;Cookie&quot; : &quot;xxx&quot;,        &quot;user-agent&quot; : &quot;xxx&quot;    &#125;    chrome_path &#x3D; r&#39;path\to\chromedriver.exe&#39;    chrome_options &#x3D; webdriver.ChromeOptions()    chrome_options.add_argument(&#39;--ignore-certificate-errors&#39;)    driver &#x3D; webdriver.Chrome(executable_path&#x3D;chrome_path, options&#x3D;chrome_options)    return driverdef brower_thread(driver: webdriver.Chrome, idx: int:):    url_list &#x3D; [&#39;https:&#x2F;&#x2F;www.baidu.com&#39;,&#39;https:&#x2F;&#x2F;music.163.com&#x2F;&#39;, &#39;https:&#x2F;&#x2F;y.qq.com&#x2F;&#39;]    try:        #lock.acquire()                #driver.execute_script(f&quot;window.open(&#39;&#123;url_list[idx]&#125;&#39;)&quot;) # 打开浏览器标签页        driver.get(url_list[idx])        return True    except Exception:        return False    #finally:    #   lock.release()    def main():     # 多线程与多浏览器    #driver &#x3D; start_browser()    for idx in range(5):        driver &#x3D; start_browser()        threading.Thread(target&#x3D;browser_thread, args&#x3D;(driver, idx)).start()    # 等待所有线程执行完毕    for thread in threading.enumerate():        if thread is not threading.current_thread():            thread.join()    </code></pre><ul><li><p>如果是 <strong>多线程</strong> 和 <strong>多浏览器</strong> ,则不需要线程锁，每一个线程都有一个webdriver</p></li><li><p>如果是 <strong>多线程</strong> 和 <strong>多标签页</strong> ，共用一个浏览器，会出现资源争夺的情况，需要在线程的首位加上<code>lock.acquire()</code> 和 <code>lock.release()</code>  ，确保线程安全</p></li></ul><h3 id="线程池"><a class="markdownIt-Anchor" href="#线程池"></a> 线程池</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">from concurrent.futures import ThreadPoolExecutor, as_completedmax_workers&#x3D;MAX_WORKERS &#x3D; 5def main():    #创建线程池    executor &#x3D; ThreadPoolExecutor(max_workers&#x3D;MAX_WORKERS)    ths &#x3D; list()    driver &#x3D; start_browser()    for idx in range(5):        # driver &#x3D; start_browser()        #启动        th &#x3D; executor.submit(browser_thread, driver, idx&#x3D;idx)        ths.append(th)    # 获取线程执行结果    for future in as_completed(ths):        print(future.result())</code></pre><h3 id="区别"><a class="markdownIt-Anchor" href="#区别"></a> 区别</h3><ol><li><strong>创建和维护线程的方式</strong>:<ul><li><strong>多线程</strong>：在需要并发执行任务时，直接创建并启动多个线程。你手动管理线程的创建、启动、终止和资源释放。</li><li><strong>线程池</strong>：创建一个线程池，它会在程序启动时预先创建一组线程，并在需要时重用这些线程。线程池负责管理线程的生命周期，包括创建、启动、终止和回收。</li></ul></li><li><strong>资源管理</strong>:<ul><li><strong>多线程</strong>：需要手动管理线程的数量和资源，可能会导致系统资源的浪费或线程过多的问题。</li><li><strong>线程池</strong>：通过线程池管理，可以更有效地控制线程的数量，避免资源过度占用。</li></ul></li><li><strong>任务调度</strong>:<ul><li><strong>多线程</strong>：需要手动分配任务给不同的线程，可能需要考虑同步和互斥机制来避免竞争条件。</li><li><strong>线程池</strong>：线程池会自动分配任务给可用线程，并处理任务队列，简化了任务调度的工作。</li></ul></li><li><strong>性能和效率</strong>:<ul><li><strong>多线程</strong>：如果线程的创建和销毁频繁，可能会导致性能开销增加。</li><li><strong>线程池</strong>：通过线程的重用，可以减少线程的创建和销毁开销，提高性能和效率。</li></ul></li></ol><h2 id="更新"><a class="markdownIt-Anchor" href="#更新"></a> 更新：</h2><p>在4.10.0的<code>selenium</code> 中，设置浏览器需要这样<a href="https://stackoverflow.com/questions/76550506/typeerror-webdriver-init-got-an-unexpected-keyword-argument-executable-p">写</a>:</p><p>删除了<code>exectable_path</code> 改用<code>service</code> 传参</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from selenium import webdriverfrom selenium.webdriver.chrome.service import Serviceservice &#x3D; Service(executable_path&#x3D;&#39;.&#x2F;chromedriver.exe&#39;)options &#x3D; webdriver.ChromeOptions()driver &#x3D; webdriver.Chrome(service&#x3D;service, options&#x3D;options)# ...driver.quit()</code></pre><p>参考：<a href="https://blog.suysker.xyz/archives/365">设置ip池</a></p><p>​<a href="https://juejin.cn/post/7122095457752481828">selenium操纵浏览器</a></p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年度总结</title>
      <link href="//post/2023-nian-du-zong-jie.html"/>
      <url>//post/2023-nian-du-zong-jie.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="94a19abdc804f5ae69b32fc18810b6737408f397596bf281f3c53dc7cbc904a1">a12d143d61e43de5669527613d318b6f6ef44fc50a9be6b56ea42c6d6c46c476d9977c513b871c3c5c59ef13ba077cd8052f36fbe9ca51bf63af0bcb9d4633a177d444897ac85ee7f8a139777b697a5ce6410589bad075133e923501d95938f03034e55a522e88845fef1a99f61341f2d36eb90fae1f7899fcae738a37e4d35e71d6bc5d97998aef56d6a3d9307b08f8820735e8c7588a37fe04b39eb63af2d68948ac08007adfda77139fb79f1ceb30c6f028e29bc542aaddb113ecd6e5be5b07f5ce1f4e80014e4814a2d2f3ab428a27a19e2419aeb8e7d900999f6240bc496924bf35c2157077279c7e4dc362eb50bba0385cd7811e5613cd29497f98174d675ce761deb3ac7f593b333e1108b937ee7df9a61ede501c78994004ef08143da91f2cfbb1f6612c4226365c95ac969134bdbe1b581f81fd057c2a0adeb41550d33f4d1e06142913c9f5c8adce15ae84c766094e4adaf22d2b416ee18acc1975cfb0dca108dcbd5fcea0ecf4aa5608ccfccaa7979b4bff55384dbefafbaa5fcc6b79442e7d109aa7515eeba711f7b8d7c2d7bd0848e0c851959bc7ef8a2e3085b00f2ebe2966c572fc677e617a231a26c257cc1d19bd2a909bf8b0019f81f5242b5997ddaefa55c6e09ac54ecdd3a4157786b776161281fa532ed3471bee2e8edecad87615965c193f74081a7e8596ec8263643fac9ecaabf8e6e27c2154d29db67324779f8791e920425a9f09f4ffe985dedf11982c83a02504032c7eb79cbb08b3bd0450a61dfbab5613477106727ac8a9ac5bfb65d335606416b19ba679511ff08b23a33a7c636e215bccb8d92adf8c366dfbcc874d7e3795cc3c7fc48143c210917c0982bd41b82c80c9bc70fd7fd3c68fb9599d21ac5f9d35ad0ee50738e1c6924da9f6b38526860e5e2ffdd63fe5e8a0e73a2378e7315e0a70a7b26c605b18f1596eb8084dcaa403efad966ff000897bd1fcf3f20f30455b4c5d3a806328fa8d522d9971c51d640d1c01c4e8cbd7df190f392201cdecdd9ad445d7aa3a5d01fd441b78b0d78ec534c02ebf8cb951bd494dd0e933d78b145783db1cf3470aafbe53b5450e6c9c74874603fdc285af14f4c1436d09563595d3c6d773d0949e04c414be317882cbd9cc7786fba678c5b5322acb70f911d052b4f02bf984d0bf240729d3fd472714d51591e88529ec3509d6cf400879895460a9807c31563082870270212b3d63a9d029947c0500f2bb2ce13b0925f870459b411260cfeadeb5f34f710d3607c48f738d4563ee9650eaa5fad56442962e801756577cc64740a78e245eb30c21ffcc6a8ff1761ef81fb230b0f2b7f0380e334f073da26b30da5980f3e38a00b20e46177aa684d640dc2352c67114206eb73809cbd5d7e40773d9be95073b1197b5eba7b777b7bf85a5f03badc4710168eccb025e9022737e00d49bffffb1451b69c1d243f11e84a3999312f5b0f07ad0a8cc0b9d99fc70937f05b315ae5f68dcf4a5e8ec564f8baf8c8fc51efb21a63befdde36a29ff311ecca5f6da304faabce9e3ae4f63c3e9b77d732fa1d220d8113ab2297fe0333c5476a11078e0939567917bf2095c9ead725c57bb5d646e5773a7379083cd6ec901caaed205dfabd198f0841bcf801a30d850c51a661c4ef95af7b8d78fc826dc5a03afbfb0b232285455cd1744c18b0cd1f28b8e2778749851c9896294bbbf40aba6f24e1628833a04e90853f473ed262bcc9c3298a817930f5013d6e1264408f70fdf1b58e852fb46a32f8c7cbcb2d8052c37386b6b4e271368988fb9d693555bead9cc8cdadb837c54448d356daa11c70c5193ba9eb10e1c22e326f085c879b3df3b2d845a8641a24eb23052a1310d92dea710adcb70c09fe7d2297c1277c61ccfb264cf48cb79e08569d186435bd79b964a1a5e6ea9a98603cd12a472c26ba6e8f62334a02c0490bbf3f7a035a9f32c110692b7aa893e6fbd2bf2d466ee2028950cc475f6b4dc8408f8d186294933a968f44fa61dad4956c3529680eb03d28c05a38e64998c8d332247aa470a795242376e5c97355ea5b2ebd1872cd34c2c2f05e13e3d96522fda719e0f6d11d49592517506cdfff576d17bb7f19ab1ba45af5230616d4001fd6ff1f3d23ba4b0d1d41c938cb55b164606a1748a48886684cb2c9023418a72c40c312438d0c9a9e2b796b640fa0d92fd13d6b0fc8ff897d460dd8e1f19b5c55ae1a00477593ab9639102eb66fb8dcdaad4cc790c2194112b8213f24cef881bcc5980c08c5eb7c3a55b50967e8411e2dd5c7a08887a452b16cf614f302daea43d5f1f02be6189d8eb0389fcfa71e0094e9bd9405911a142095fbaa0b0dc47edc42c9124d868b78a5ebf198aa7dcb729cc284cd7a18efa82eb1f051800c65b81a11aa7425ebc5daa815471f5a1093b8be5a8e2c395e367a5465c70d16f7200218ad18868d91b396b3bd59e7d111efa5cf056ce7ae9676b21bada011217ec7e8c742ae3441f57a8f58e338fe52a47ecddad98e0056fa225adbf080ece01568fbaa7e3d08ea7c676772a44f316830c62981abacfc82e356994219c3d0076cab0e7b8327eaa1c9fdaa1e977df104f74feb4456aa2ddb0dda695520bfdf31619ff74907de36b6f9b0f3d580550998cde07b562c4f98367025e7b2848ebadc2438235f57ca4eb624908bf567bcaa3797f099640789f1ebf1200f1193cf0b075188591f5717705766b8937454321b1edfc9dbbefabc43e0bf134add0b2142970956cfb0867bc11cfd9aee2c5d34817c8732a1b931d744d705a6435f6cdb176754f1ad551eba6c8611e5ff0ce96c909c122a7e62986cbd217258a67eda8737122da17cd64ac5c57ed7c747ec71ab614f1cf6210e2ada0ab9d801996254c58faa602a0cd5e0b21da3bde32fa4361ffd48758e87dcf66990ed6cf66a0aeb67492d3dc801977afaef23e6372d42e06f0dad78a51725935247f860b6bbe1706680bc42618056f55d66af4034569d19f767e3872058f6edb14571639123431abba941ff8037ffc11b76052504f71f2bbd51109aac1d499c627223cafa7e0fea5a8fe1e58f0886e2faa02dd044fd001cf714671d9ae860b539ddd26b8b41af2f9734bc99320bde2955b0cb21666843218dd039fc9def3eaf71913924ef0a4b4a1957b4234259d4844fc1c6b70ffe1a56c421320915a95f59b1588f868a5b4e4681ff911f357b8d6aded1da9d0817a510ef724f38c55e1f1871fde3978025ce8819e60057390e564eec2dcb8b4a4bbd4e3b55297669e0c78429062e4d4b38419456321c624f5bde5d41df335636015d5c4be63491843cd5756d44fd340b2a7f9bb87732d92ddba09db3b19e38a7a032b2b7b17fe172a7760f93e2c5973bd2d851a333478b189334263e2d1587107a8e7b4a667b420e065cd35fb92f204b40d633fbd1bd4b3e0a5fc8a4f4dde41bc3fcc65dd2478ea6c424ea13f201654f47c77d8db3a9dc8ab17dfa85c8786c5c95a2863b288c189a647ad7155cab4b670da9c6a065ee2a67464aeaf1669b20a503981728579ff7eb12144ffd218df86a6d3e255b74eb35b559e8675379dd0c867b405505b9680e9ae026f272ecd43c2668413153788d9d0c8a31c6a0e59f560655dca0535cca759b9ed9b65e51b9e8331715304e0570c87c32201f16134b1d247d79f10c12000c02de77145536489a41d721ba2d149f390090322d673c0c6e2edfd18badfb217cf5f4ce8c51020bba9b71738635862102949247360f8c7de0f10ba1d6e31b356db015acdb36929b6aa910cb5f45e2479fc51290ccab134612b80316ad073cee7f2d8e011369fb045879f25a071b7304c248630d6f51e805e8baf51d7c6f5002f076df881a5c85713fa45425e882435d0a024a10d26734554f8f05c2ef86cfc9883c5e0be85f995bba440159a2e73ed313341bc72be22aafd04ba7bb56e7a11e374734ecb83d8b228ee70d865dc8bbaedf6f1f9b9b6a27be800e06e34f386781ec132235d66ba750a9796de2b2b2e66bd43f4cec66f15e9e51ebdef12f400b675ee962231f7bddfb916b7cb69b70f540771f873d7ed9ffb397f037c6fa6ccb9f3196aa8c2dee02f9a47642d674650ceaa1ea638d8becb379314d2844fd5552807ba4263c6ad0a184dc110ef4b460a19c9044454fc481ba74ead01f39e8689b2b427aec38dbe44d1ceaba56f737be18910230c59cb58b7d4c79867257a608809e69254cd7de7fa2f40b23de30dcdbe173bddee448d342087cd453a069710c0a567b2c2e737127bb7281ee4b914b58ea3a082a50b70ffb62e733c81153fab0243f8d83f297fb61e962661d43f3c44877a3467cc35c48b58717580ab9ce61b9a4a4fbc8495c83f075b2436f9366f0aa6932492929d041aaff749f0c4bb8a4f2f7f83b36c5a7cc74b9b6545d9602f01cc9fac33da3cb049610af94ec5a3dd8cef7fc4a5d3cf6efb4713555417501a54005f19dd10220bc6ca2713e12f66958bdd7a2236633a217d16b93a75dea53027aaea8a0592d6da3eb663b1b182eaa44ef07a16b2b1590a1984735c7936cec5dc9ed4ee47e3aab95259e80bc253a669470d534c20902bc3dfa5f19bc67987757c4a426ecf7cf6bd222cacf473e9dce33345da97d22fd513ed1fb729f62423a3cba7241e51e289569cc31bac63954f6dcd4279a669ea5365ec8d1a6c74314ce5a20c3af7a75d067864bb96ec548eb670a923db998cee1083ca80052134c77f8556d0ba02d94a63c6a868d86409ac86e3006a4738a4c2960ceb98ef98aa6b75a47c702bbef1fe475b42d4659ca3d6ae990d4735b468e77c6836a4f3e6474a3dfa6a8b2dd5b76033847be5255fb0a96225c258e55decdfaa2258cb8a6fa359d240b68575dd1e4ff9a24178a469ef4004752d2c15061bf4f43368cb3a0267d132870ae9f70f445ef7b678b39cf63fced439b7b94b129868e87655f8150892ca836bc4475722d040093b585b0db295c7ba8dbd4fbaa016c2bb8560f19dfa53b9048909c31ce494dcf36441d61fb0437138b67fe794634ff0bb4c3f65808d593019af3b65aa469a2cd2c9f1492c4bf44edcc34c817e6000bdf9e568f9a16fe4ce13c725217db973ce12e75f4b196ce8d44dbe377867f0bfbdbdbbde31b0e2582e1b1ea0e297cdfd87f548922a63da568eaa124b7687b2a32c9e73f95ca7ec5147fc9d1ac067dd19adb357310825c83743cbc98220c6a05306f8a48151cf6e54845b6c657e02801d1f2114ad627868890d5f575a165cf0c6729d6c481d0ea1ba2a34c0adca2918107f93747647131ad15f73da18876cfbbc65534eb685e1d5e9d7bbbfc689e54210e7e66ab37adb4b54be885278ee5f964fd2b73d5ef2b443d31b7e25d090ee3615e62e436cd164c1c811ed75f59b9aa481f846ff4918d3fff8676184e865dd792b5502c80890ee940dd9fc3d063a6f750baee1c56912556c622f809a8948d7dc82d6e1a02dac776077e0237e8a60667af1f850c1c5c85b6368c0c6be7a45a85d9ad7c279fbcc8142ee029bb35273f99ffded9ca4981bea5bfdc4a8447f2faf01d2e96297d6ca8fe14184f11a9ed1223265986cd8f024b44661fb109c962110c0c326fa33376bf7e9dd7a2cbf92bdd877c17fe90bbdfdf3b69f72da3f7acb397420932c771aa67773be51888375a94e51e4a05d590eec66db149ec36458199bdf8e21059d734a7c0f7b0b80b84bf8545c8338f815678b3a7fe5bcc9577f0fefe3be639cf428726d8defc586d22b795f9ecdb80e7505bbf89c0825b82d8a604f0b695e72ed47285619ffc100dfa5cc75bd9db7f0349ed984e6eaeced2b9e86165b2fefcdf456c669ff43cca005a6e25f5db23ad4c8f99c0b7edd7d7b3319098d0ce2e6ccbdde75f4235cffcb2ecffe31d50e509900ab3bdf68f5d2b122b9050250d139ad6e00b941002f329b8b1ec84a796340efc1272ef01be9cee0cbfb2a48035ca72eeecca83ca6e24bd0521ed037b02a7394fe79b793ea0e73b4d0a06fc663efd35eb4457de2df39d0efed8a083e6263d6baebe32214338f158af65b4a372b2ab1412fe7542fc54be8dd4dd212daac76bace3f11742a80f94a44e2bf3d777099c84f1f4a15f8c4196d9a916ebd3cb7c72efaec325ad2017050dddbed87bd4217cae171c0e007d05a07908d779c49b9534584053882895b8c61319a1720dfb4ec4d882b5f12eaa06828099a4b04d0fc61905c0d3ccbd51b133bc27ae9c989c600bcd5c9faaa339dea89c83692c52006b1a0778617f9e0ea8c38c739827e49259644e790743480895c7099fd4d87d05aed08bca100b9643d1316b99b80e4f8210802573397de31778ba9cf14a6b05f838d63eec6669a010cb28d6755e14712e7256ae05de073a584a3a94286617e11d9a8272c035b8101dec9c734af25e6b39a8c780f09ee6c728a26448c469ed95874a2997ff207f10122058291806cb853998f91e8e75620eec65e8032a30f54337b3f86a2bfd3368edd710f3537f820764090f70afae8fb2430d02c33c9fa5c2771489cf0169e3e1a73663a45903bfb66598365abe9869b46c4a1b60c8475ecac0a31a8d16abce2e085c95aa63725bae1b31fb26862988127875e46b505e0df6bd9a37d240f2c61f8c1d0e8498f7bce234b5edfa9d2505a9c27dc341196d4de18465024a73f0e276db741a8e4d0b5c441504336773996dc71015160f46c411c30caf347aea8df6ae339aac0df7ea8f8e9de9fb01dac36df56eac9499e0b228ce7fa7d746c540366d4d8169e12110d0267ca1d30312612ab40d5ffce8248268cef75bd2473abc1117933e5cfa30160b9ea45634fcb235841cd779c12bbe9566672b12166469ff6148bfc80d9017784ea9ac15d60549aeb18f1d14b5733070c8560765b35ca299f0f57c401948316571c7d9366b3caeed17250d581510a72164ce93245342d2d1ecabc7ce9b1b545fb881521430b0b19fe1c19f834daf421f0877ecf21303cb4a12cb29ba31abe57923cd10ae212ab8106c28375e3672a991682622e5f0a5e11721ad0a2ca6723a073608fd9de40afbd3779d55a332bd761726e34c23cd15f517af64236b5a6e736a86bdee8f821507b7dc01b458b9cccde997a0756a14fc4b9e4505fb35dfec3deaf60d1b2fa038fb74f41e5671011da7b47d3658ac274f509722bf9b2a6cfbd9bd610a4d3d93c9ed8544d44b0e2e387d365cec61ccbc796fb6c79b357acf74de8ba07e747f9cba9f048511e8f92f2caaac110cbe7acf0923212241ff13fe8130c926c789f5cceea8e2ff97f9e481308f7964f385105aa314d8535ee8e321b13172b672d1eb624b8664081fbae3be6b63a4bdf0960b362110432ace4efa184f18722d15a152b760567d9e126f984f812ae1322e61cb485388e8f704a678ab408fa5a3bd105d1a23f8503aa82ead9f70b71140448ebd5b283ac81c04b39048a9b9c81df</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
            <tag> 生活记录 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高效添加导航站点</title>
      <link href="//post/gao-xiao-tian-jia-dao-hang-zhan-dian.html"/>
      <url>//post/gao-xiao-tian-jia-dao-hang-zhan-dian.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​hexo + buttterfly中自带一个友联页，我用它来记录一些神奇的小网站。因为是静态的，无后台，想要添加一个网址链接，就要在<code>links.yml</code>文件中修改如下四项。先复制粘贴前面的格式，然后获取网址图标保存在<code>source/img</code>文件夹下，再写入该文件中。添加友联一次性并不会添加太多。而导航链接长久不更新积攒了好多，一个一个写太麻烦了。于是写一个程序，输入网址链接与对该网站的简介，自动在博客目录下生成添加后的<code>link.yml</code>文件，覆盖原先的</p><p><img src="https://img.promefire.top/blog-img/20240110-9beb179660298374bce8b5e1a86eb779.png" alt></p><h2 id="读取txt"><a class="markdownIt-Anchor" href="#读取txt"></a> 读取TXT</h2><p>将要添加的站点信息写入txt文件，每一行分别为网址链接，简介， 要加入的分组，用空格隔开。例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">http:&#x2F;&#x2F;www.baidu.com 百度一下，你就知道 友情链接http:&#x2F;&#x2F;www.google.com 谷歌啥都能搜 神秘学</code></pre><p>读入信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list_website &#x3D; []list_descri &#x3D; []list_class &#x3D; [] #放在那个分组下def getTxT(txt_path):  with open(txt_path, &quot;rb&quot;) as w:    lines &#x3D; w.readlines()  for line in lines:    # parts &#x3D; line.strip().split(&#39; &#39;)    line_str &#x3D; line.decode(&#39;utf-8&#39;).strip()    parts &#x3D; line_str.split(&#39; &#39;)    list_website.append(parts[0])    list_descri.append(parts[1])    list_class.append(parts[2])</code></pre><h2 id="获取网址信息"><a class="markdownIt-Anchor" href="#获取网址信息"></a> 获取网址信息</h2><h3 id="获取网站图标"><a class="markdownIt-Anchor" href="#获取网站图标"></a> 获取网站图标</h3><p>使用的是现成的api，在后面加上网址即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">https:&#x2F;&#x2F;api.xinac.net&#x2F;icon&#x2F;?url&#x3D;https:&#x2F;&#x2F;api.qqsuu.cn&#x2F;api&#x2F;get?url&#x3D;https:&#x2F;&#x2F;f.ydr.me&#x2F;https:&#x2F;&#x2F;api.byi.pw&#x2F;favicon&#x2F;?url&#x3D;https:&#x2F;&#x2F;favicon.link&#x2F;https:&#x2F;&#x2F;favicon.yandex.net&#x2F;favicon&#x2F;http:&#x2F;&#x2F;favicon.cccyun.cc&#x2F;https:&#x2F;&#x2F;statics.dnspod.cn&#x2F;proxy_favicon&#x2F;_&#x2F;favicon?domain&#x3D;</code></pre><p>将获取到的网站图标保存到<code>source/img</code>文件夹下，用来给<code>links.yml</code>调用。保存图片函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">urllib.request.urlretrieve(getImg,localfileName)</code></pre><p>getImg: 图标链接</p><p>localfileName:保存到本地的链接名称</p><h3 id="获取网站标题"><a class="markdownIt-Anchor" href="#获取网站标题"></a> 获取网站标题</h3><p>使用requests与BeautifulSoup</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">res &#x3D; requests.get(url)res.enconding &#x3D; &#39;utf-8&#39;soup &#x3D; BeautifulSoup(res.text,&#39;lxml&#39;)title &#x3D; soup.title.text</code></pre><p>完整代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add_new_link &#x3D; &quot;&quot;&quot;      name: &#123;name&#125;      link: &#123;link&#125;      avatar: &#123;avatar&#125;      descr: &#123;descr&#125;&quot;&quot;&quot;def getUrlMessange(link, descr, saveSource):  # 返回yaml格式的新增站点  function &#x3D; &quot;https:&#x2F;&#x2F;api.xinac.net&#x2F;icon&#x2F;?url&#x3D;&quot;  getImg &#x3D; function + link  res &#x3D; requests.get(link)  res.enconding &#x3D; &#39;utf-8&#39;  soup &#x3D; BeautifulSoup(res.text,&#39;lxml&#39;)  title &#x3D; soup.title.text  urllib.request.urlretrieve(getImg, saveSource + title + &#39;.png&#39;)  avatar &#x3D; &#39;&#x2F;img&#x2F;&#39; + title + &#39;.png&#39;  lianjie &#x3D; add_new_link.format(name &#x3D; title,link &#x3D; link,avatar &#x3D; avatar, descr &#x3D; descr)  lianjie &#x3D; yaml.safe_load(lianjie)  return lianjie</code></pre><blockquote><p>yaml.safe_load（）将字符串转换为yaml格式字典</p></blockquote><h2 id="写入yaml文件"><a class="markdownIt-Anchor" href="#写入yaml文件"></a> 写入Yaml文件</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">def writeYaml(lianjie_yaml, add_class_name, ayml):  # yaml格式的新增站点， 放入组的名称， 要写入的文件  for n in range(len(ayml)):      class_name &#x3D; ayml[n][&#39;class_name&#39;]      if(class_name &#x3D;&#x3D; add_class_name):         ayml[n][&quot;link_list&quot;].append(lianjie_yaml)</code></pre><p>这个地方要注意写入信息的有重复的话，会自动生成键<code>&amp;-id001</code>，要注意去重，去重代码。加一个判断是否已经存在：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def is_link_exits(link, ayml):  for entry in ayml:        for link_list in entry.get(&#39;link_list&#39;, []):            if link_list.get(&#39;link&#39;) &#x3D;&#x3D; link:                return True  return False</code></pre><h2 id="主函数"><a class="markdownIt-Anchor" href="#主函数"></a> 主函数：</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">def main():  getTxT(website)    # r+表示读写  with open(targetFile, &#39;r+&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:      ayml &#x3D; yaml.load(f, Loader&#x3D;yaml.Loader)      for k in range(len(list_website)):          link &#x3D; list_website[k]          descr &#x3D; list_descri[k]          class_name &#x3D; list_class[k]          if is_link_exits(link, ayml):            print(link + &quot;已存在&quot;)            continue          lianjie &#x3D; getUrlMessange(link, descr, saveSource)          writeYaml(lianjie, class_name, ayml)      # 文件清空，将光表移动至开始      f.seek(0)      f.truncate()      yaml.dump(ayml, f, allow_unicode&#x3D;True, sort_keys&#x3D;False)</code></pre><h2 id="规范文件名"><a class="markdownIt-Anchor" href="#规范文件名"></a> 规范文件名</h2><p>由于图片是按照网站title命名的，难免会出现不符合文件名规范的标题，需要处理</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def normalize_filename(filename):    # 去除非法字符    filename &#x3D; re.sub(r&#39;[\\&#x2F;*?:&quot;&lt;&gt;|]&#39;, &#39;&#39;, filename)    # 将空格替换为下划线    filename &#x3D; re.sub(r&#39;\s+&#39;, &#39;_&#39;, filename)    # 将所有字母转换为小写    filename &#x3D; filename.lower()    return filename</code></pre><h2 id="附"><a class="markdownIt-Anchor" href="#附"></a> 附：</h2><p>1、写入yaml文件是，键值对默认是按照’键’ 的首字母顺序排序，使用<code> yaml.dump(ayml, f, sort_keys=False</code>按原先顺序写入</p><p>2、编码问题,都加上准没错</p><ul><li><code># coding:utf-8</code></li><li>getTXT()中<code>line_str = line.decode('utf-8').strip()</code></li><li>写入yaml时 <code>yaml.dump(ayml, f, allow_unicode=True, sort_keys=False)</code></li><li>request解析网页 <code> res.encoding = &quot;utf-8&quot;</code></li></ul><hr><h2 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h2><ul><li>使用时将py文件和存放信息的<code>website.txt</code>文件放在博客根目录下，运行即可。图标文件保存在<code>\source\img</code>下</li><li>写入分组目前只能加入已有分组，创建新的分组（TODO）</li><li>每个网站图标的爬取方式不一定一样，用别人的API更保险</li></ul><p><img src="https://img.promefire.top/blog-img/20240110-b2fccccb0c7a3e960257fd014dc966de.png" alt="img"></p><p>成功截图</p><p><img src="https://img.promefire.top/blog-img/20240110-0b75ec6b8a47b95e1527d59b93f81a7c.png" alt></p><p>全部代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#!&#x2F;usr&#x2F;bin&#x2F;python# coding:utf-8import requestsimport urllibfrom bs4 import BeautifulSoup import yamlimport oscreate_new_class &#x3D;  &quot;&quot;&quot;- class_name: &#123;class_name&#125;  class_desc:   link_list:      name: &#123;name&#125;      link: &#123;link&#125;      avatar: &#123;avatar&#125;      descr: &#123;descr&#125;&quot;&quot;&quot;add_new_link &#x3D; &quot;&quot;&quot;      name: &#123;name&#125;      link: &#123;link&#125;      avatar: &#123;avatar&#125;      descr: &#123;descr&#125;&quot;&quot;&quot;current_directory &#x3D; os.path.dirname(os.path.abspath(__file__))website &#x3D; current_directory + &#39;\website.txt&#39;targetFile &#x3D;current_directory +&#39;\source\_data\link.yml&#39;saveSource &#x3D; current_directory +  &#39;\source\img\\&#39;list_website &#x3D; []list_descri &#x3D; []list_class &#x3D; [] #放在那个分组下import redef normalize_filename(filename):    # 去除非法字符    filename &#x3D; re.sub(r&#39;[\\&#x2F;*?:&quot;&lt;&gt;|]&#39;, &#39;&#39;, filename)    # 将空格替换为下划线    filename &#x3D; re.sub(r&#39;\s+&#39;, &#39;_&#39;, filename)    # 将所有字母转换为小写    filename &#x3D; filename.lower()    return filenamedef getUrl(url, descr, saveSource):  function &#x3D; &quot;https:&#x2F;&#x2F;api.xinac.net&#x2F;icon&#x2F;?url&#x3D;&quot;  getImg &#x3D; function + url  headers &#x3D; &#123;      &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;120.0.0.0 Safari&#x2F;537.36&#39;  &#125;  res &#x3D; requests.get(url, headers&#x3D;headers, verify&#x3D;False)  res.encoding &#x3D; &quot;utf-8&quot;  # res.enconding &#x3D; res.apparent_encoding  # print(res.text)  soup &#x3D; BeautifulSoup(res.text,&#39;lxml&#39;)  title &#x3D; soup.title.text.replace(&quot; &quot;,&quot;&quot;)  title &#x3D; normalize_filename(title)  # print(title)  urllib.request.urlretrieve(getImg, saveSource + title + &#39;.png&#39;)  avatar &#x3D; &#39;&#x2F;img&#x2F;&#39; + title + &#39;.png&#39;  lianjie &#x3D; add_new_link.format(name &#x3D; title,link &#x3D; url,avatar &#x3D; avatar, descr &#x3D; descr)  lianjie &#x3D; yaml.safe_load(lianjie)  return lianjiedef getTxT(txt_path):  with open(txt_path, &quot;rb&quot;) as w:    lines &#x3D; w.readlines()  for line in lines:    # parts &#x3D; line.strip().split(&#39; &#39;)    line_str &#x3D; line.decode(&#39;utf-8&#39;).strip()    parts &#x3D; line_str.split(&#39; &#39;)    print(parts)    if len(parts) &gt;&#x3D; 3:      list_website.append(parts[0])      list_descri.append(parts[1])      list_class.append(parts[2])def is_link_exits(link, ayml):  for entry in ayml:        for link_list in entry.get(&#39;link_list&#39;, []):            if link_list.get(&#39;link&#39;) &#x3D;&#x3D; link:                return True  return Falsedef writeYaml(lianjie_yaml, add_class_name, ayml):  # yaml格式的新增站点， 放入组的名称， 要写入的文件  for n in range(len(ayml)):      class_name &#x3D; ayml[n][&#39;class_name&#39;]      if(class_name &#x3D;&#x3D; add_class_name):         ayml[n][&quot;link_list&quot;].append(lianjie_yaml)# def getClassNames():#   class_names &#x3D; []#   with open(targetFile, &#39;r+&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:#       ayml &#x3D; yaml.load(f, Loader&#x3D;yaml.Loader)#       for n in range(len(ayml)):#         class_name &#x3D; ayml[n][&#39;class_name&#39;]#         class_names.append(class_name)#   return class_namesdef main():  getTxT(website)  if not os.path.exists(saveSource):    os.makedirs(saveSource)  # classNames &#x3D; getClassNames()  with open(targetFile, &#39;r+&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:      ayml &#x3D; yaml.load(f, Loader&#x3D;yaml.Loader)      print(ayml)      for k in range(len(list_website)):          link &#x3D; list_website[k]          descr &#x3D; list_descri[k]          class_name &#x3D; list_class[k]          if is_link_exits(link, ayml):            print(link + &quot;已存在&quot;)            continue          # lianjie &#x3D; getUrlMessange(link, descr, saveSource)          lianjie &#x3D; getUrl(link, descr, saveSource)          writeYaml(lianjie, class_name, ayml)          print(link + &quot;添加成功&quot;)      f.seek(0)      f.truncate()      yaml.dump(ayml, f, allow_unicode&#x3D;True, sort_keys&#x3D;False,  default_style&#x3D;&#39;&#39;)main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo + Github Action自动部署</title>
      <link href="//post/hexo-github-action-auto-deploy.html"/>
      <url>//post/hexo-github-action-auto-deploy.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>​为什么要用github action实现全自动部署呢，每次<code>hexo d</code>在本机编译太麻烦了。而使用Github Action，我们只需要完成博客得遍写和修改后，将改动推送到远程仓库，之后得工作交给CI完成即可。</p><blockquote><p>Github Action是一种CI\CD服务</p><p>CI\CD 其实说的是三件事情：「持续集成（Continuous Integration）」、「持续交付（Continuous Delivery）」、「持续部署（Continuous Deployment）」。</p><p>因为「持续交付」和「持续部署」的英文缩写是一样的，所以这三件事情缩写成了 CI\CD 。</p></blockquote><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><p>参考教程：<a href="https://akilar.top/posts/f752c86d/">使用Github Action实现全自动部署</a> 已经很详细了，跟着操作就能成功。有两点需要注意</p><ul><li>2020年10月后github新建仓库默认分支改为main。在<code>autodeploy.yml</code> 最后一行要写成master:main表示从本地的master分支推送到远程的main</li></ul><ul><li>主题 themes/butterfly 文件夹下有<code>.git</code> 文件夹存在，推送至github会识别成子文件夹，导致生成静态文件时缺少主题文件，博客白屏。先将<code>.git</code> 文件删除后再上传</li></ul><h3 id="查看部署情况"><a class="markdownIt-Anchor" href="#查看部署情况"></a> 查看部署情况</h3><p>1、打开GIthub存放源码的私有仓库，找到action。</p><p>2、根据刚刚的Commit记录找到相应的任务</p><p>3、点击Deploy查看部署情况</p><p><img src="https://raw.githubusercontent.com/promefire/Myblog/main/image-20231224123219614.png" alt="Action"></p><p>在博客根目录下添加一个<code>back.sh</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git add .git commit -m &quot;$1&quot; git push origin master</code></pre><p>写完博客后运行<code>sh back.sh xxxx</code> 交给Github Action部署。“xxxx” 记录一下commit内容,方便出问题回滚代码版本</p><p>参考：<a href="https://akilar.top/posts/f752c86d/">使用Github Action实现全自动部署</a></p><p>​<a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule">Github Action 文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
            <tag> CI/CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客全局黑白特效</title>
      <link href="//post/bo-ke-quan-ju-hei-bai-te-xiao.html"/>
      <url>//post/bo-ke-quan-ju-hei-bai-te-xiao.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>没错！我又在实验室摸鱼了，无心科研，想来想去干点什么好呢？突然想到早上吃饭时候凡哥和我说今天是国家公祭日，想着给博客整个黑白特效，整起！</p><h2 id="全局黑白效果"><a class="markdownIt-Anchor" href="#全局黑白效果"></a> 全局黑白效果</h2><h3 id="hexo-butterfly-全局黑白代码"><a class="markdownIt-Anchor" href="#hexo-butterfly-全局黑白代码"></a> hexo + butterfly 全局黑白代码</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">html  body    &#x2F;&#x2F; 黑白色    style.      html&#123;      filter: grayscale( 100%);      -webkit-filter: grayscale( 100%);      -moz-filter: grayscale( 100%);      -ms-filter: grayscale( 100%);      -o-filter: grayscale( 100%);      filter: url( &quot;data:image&#x2F;svg+xml;utf8,&lt;svg xmlns&#x3D;\&#39;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg\&#39;&gt;&lt;filter id&#x3D;\&#39;grayscale\&#39;&gt;&lt;feColorMatrix type&#x3D;\&#39;matrix\&#39; values&#x3D;\&#39;0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\&#39;&#x2F;&gt;&lt;&#x2F;filter&gt;&lt;&#x2F;svg&gt;#grayscale&quot;);      filter:progid:DXImageTransform.Microsoft.BasicImage(grayscale&#x3D;1);      -webkit-filter: grayscale( 1);      &#125;</code></pre><p>然后把这一串代码存到一个名为<code>blackandwhite.pug</code>的文件，将它放在主题目录下的<code>layout/includes/addons</code>里面，然后就要在<code>layout.pug</code> 里面引入文件。在原文件的<code>include ./head.pug</code>下面加入一行来引入我们的文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">if theme.blackandwhite  include .&#x2F;addons&#x2F;blackandwhite.pug</code></pre><p>在主题配置文件中加一行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">blackandwhite: true</code></pre><p>效果图：</p><p><img src="https://img.promefire.top/blog-img/20240110-71598728eff277b5a5967772d8ac6534.png" alt></p><p>实现了这一步后可以手动开关全局黑白特效，但能不能在清明和国家公祭日自动开启全局黑呢？理论上是可行的，在主题配置文件中设置日期，在上面<code>if theme.blackandwhite</code>加入读取当前日期与设定日期判断的逻辑，就可以实现特定日期自动全局黑白。理论可行，实践开始！</p><p>对于前端来说，可谓是一窍不通，第一步得知道<code>layout.pug</code>代码是什么语言/(ㄒoㄒ)/~~,直接问ChatGPT。</p><p><img src="https://img.promefire.top/blog-img/20240110-29001b6512f0657b6cbf081d2d3b24cd.png" alt></p><p>先用js实现一下日期判等</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">var d &#x3D; new Date()var current &#x3D; d.toLocaleDateString()var date1 &#x3D; &quot;12-13&quot;var date2 &#x3D; &quot;04-04&quot;var currentDate &#x3D; current.slice(5)var result &#x3D; date1.replace(&#x2F;\-&#x2F;g,&#39;&#x2F;&#39;) &#x3D;&#x3D;&#x3D;currentDate;console.log(currentDate);console.log(date1.replace(&#x2F;\-&#x2F;g,&#39;&#x2F;&#39;));console.log(result);</code></pre><p><img src="https://img.promefire.top/blog-img/20240110-f4470ae6a8f3aac0b6d4492863235209.png" alt></p><h3 id="pug文件中加入js"><a class="markdownIt-Anchor" href="#pug文件中加入js"></a> pug文件中加入JS</h3><p>在pug文件中，js代码前面要加一个 “ - ”</p><p><img src="https://img.promefire.top/blog-img/20240110-312ff1c3003d4533c6f707b0c346d85a.png" alt></p><ul><li>踩了一个小坑</li></ul><p>hexo的pug文件里日期的输出是反过来的，所以上面截取后5个字符串的代码输出为“/2023”报错,改成截取字符串前五个</p><p>在<code>layout.pug</code>文件中<code>include ./head.pug</code>后加入一下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">- var currentDate &#x3D; new Date().toLocaleDateString().slice(0,5)- var date1 &#x3D; &quot;12&#x2F;13&quot; &#x3D;&#x3D;&#x3D; currentDate- var date2 &#x3D; &quot;04&#x2F;04&quot; &#x3D;&#x3D;&#x3D; currentDate   if theme.blackandwhite  if date1 || date2    include .&#x2F;addons&#x2F;blackandwhite.pug</code></pre><p>会自动判断当前日期是否为“12/13”、“04/04”，自动开启全局黑白特效。</p><h2 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h2><ul><li><p>本来打算日期是写在主题配置文件里的，但是传参时候出了问题，干脆直接把日期写在代码里了。有空再解决这个问题</p></li><li><p>日期判等的时候有个疑问，hexo是静态的，是否能知道当前日期是几号。最后发现是想多了，因为博客就有一个“最后更新日期”，能获得当前日期时间</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo恢复及使用hexon实现在线编辑同步</title>
      <link href="//post/hexo-online-editing-synchronization.html"/>
      <url>//post/hexo-online-editing-synchronization.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>hexo是一个轻量级的博客主题框架，挂载GitHub上不用太操心，但是有一点不方便的是hexo没有后台，每次发博都要本地写好然后hexo三件套，最近发现了一个<a href="https://github.com/gethexon/hexon">hexon</a>的GUI，可以实现hexo的在线编辑部署。ps-需要一台服务器</p><h2 id="博客恢复"><a class="markdownIt-Anchor" href="#博客恢复"></a> 博客恢复</h2><h3 id="安装npm-hexo-pnpm-git"><a class="markdownIt-Anchor" href="#安装npm-hexo-pnpm-git"></a> 安装npm、hexo、pnpm、git</h3><ul><li>npm</li></ul><p>在<a href="https://registry.npmmirror.com/binary.html?path=node/latest-v10.x/">这里</a> 下载npm，可以离线下载，也可以使用wget下载<br>解压<code>tar -zxvf node-v10.24.1-linux-x64.tar.gz</code><br>将npm写入环境变量文件<br>①<code>vi /etc/profile</code><br>②在末尾添加 <code>export PATH=&quot;/root/node-v17.3.0-linux-x64/bin&quot;</code><br>③<code>source /etc/profile</code> 激活</p><ul><li>hexo</li></ul><p>使用npm安装<code>npm install -g hexo-cli</code></p><ul><li>pnpm</li></ul><p><code>npm install pnpm -g</code> 注意要加-g表示全局</p><ul><li>git</li></ul><p>centos 下<code>yum install git  </code></p><h3 id="github添加密钥"><a class="markdownIt-Anchor" href="#github添加密钥"></a> github添加密钥</h3><pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;xxxxxxx&quot;git config --global user.email &quot;xxxxxx@qq.com&quot;ssh-keygen -t rsa -C &quot;xxxxxxx@qq.com&quot;</code></pre><p>完成后会在提示的路径下生成两个文件<code>id_rsa</code>和<code>id_rsa.pub</code>前者是私钥，后者公钥，<br>查看公钥内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cat &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub</code></pre><p>复制内容，在github中点击右上角头像，依次打开&quot;Setting&quot;–“SSH and GPG keys”–“New SSH Key” 粘贴</p><h3 id="拷贝源码"><a class="markdownIt-Anchor" href="#拷贝源码"></a> 拷贝源码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git clone https:&#x2F;&#x2F;github.com&#x2F;XXXXX&#x2F;hexo_source.gitnpm install #还原项目依赖</code></pre><h3 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h3><p>确保基本的操作可以成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo generatehexo deploy</code></pre><h2 id="部署hexon"><a class="markdownIt-Anchor" href="#部署hexon"></a> 部署hexon</h2><h3 id="拉取hexon项目并还原依赖-初始化博客配置"><a class="markdownIt-Anchor" href="#拉取hexon项目并还原依赖-初始化博客配置"></a> 拉取hexon项目并还原依赖, 初始化博客配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git clone https:&#x2F;&#x2F;github.com&#x2F;gethexon&#x2F;hexon pnpm install pnpm run setup</code></pre><h3 id="启动hexon"><a class="markdownIt-Anchor" href="#启动hexon"></a> 启动hexon</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pnpm start</code></pre><p><strong>注意</strong>：第一次启动时需要指定启动端口，这里需要注意事先在阿里云安全组/腾讯云防火墙打开端口</p><h3 id="本地访问云服务器上打开的-localhost4000"><a class="markdownIt-Anchor" href="#本地访问云服务器上打开的-localhost4000"></a> 本地访问云服务器上打开的  <code>localhost:4000</code></h3><p>众所周知，除非用的云服务器是带界面的，否则ctrl + 点击 打开的是本地的4000端口。这里我们用用本地电脑连接上服务器，从而把本地的localhost作为服务器的localhost来使用<br>，在本地输入命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh -L 4000:127.0.0.1:4000 username@xx.xx.xx.xx</code></pre><p>其中4000是hexon端口，username指登录云服务器用户名，xx.xx.xx.xx指公网ip<br>完成后，即可在本地浏览器输入<code>localhost:4000</code>访问服务器的4000端口，如图所示：<br><img src="https://img.promefire.top/blog-img/20240110-2e990d6e7860c95f607084cd84862c82.png" alt><br>ps:使用相对路径的图片在这里打不开，不过也没有关系，先用github图床，有空用服务器作图床，github做备份</p><h2 id="systemd守护进程"><a class="markdownIt-Anchor" href="#systemd守护进程"></a> Systemd守护进程</h2><blockquote><p>上面完成后服务器端的hexon服务需要手动启动，且shell断开后结束，使用systemd加入守护进程</p></blockquote><h3 id="新增服务"><a class="markdownIt-Anchor" href="#新增服务"></a> 新增服务</h3><p>在<code>/etc/systemd/system/</code>下创建一个文件命名为<code>hexon.service</code>表示新增一个名为hexon的进程<br><code>hexon.service</code>内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[Unit]Description&#x3D;Hexon ServiceAfter&#x3D;network.target[Service]Environment&#x3D;PATH&#x3D;&#x2F;root&#x2F;node-v17.3.0-linux-x64&#x2F;bin&#x2F;pnpm:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;binWorkingDirectory&#x3D;&#x2F;root&#x2F;hexon-master&#x2F;serverType&#x3D;simpleUser&#x3D;rootGroup&#x3D;rootRestart&#x3D;on-failureRestartSec&#x3D;5sExecStart&#x3D;&#x2F;root&#x2F;node-v17.3.0-linux-x64&#x2F;bin&#x2F;pnpm cross-env NODE_ENV&#x3D;production node &#x2F;root&#x2F;hexon-master&#x2F;server&#x2F;dist&#x2F;index.jsLimitNOFILE&#x3D;1048576[Install]WantedBy&#x3D;multi-user.target</code></pre><ul><li><code>Environment=PATH=</code>代表环境变量</li><li><code>WorkingDirectory</code>代表工作目录</li><li><code>ExecStart=</code>指定服务启动时执行的命令</li></ul><p>我们可以找一下上面使用<code>pnpm start</code>启动hexon的入口文件写在这里。查看<code>package.json</code>文件中<code>start</code>一行，如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;  &quot;private&quot;: true,  &quot;scripts&quot;: &#123;    &quot;setup&quot;: &quot;node .&#x2F;bin&#x2F;index.js install&quot;,    &quot;resetpwd&quot;: &quot;node .&#x2F;bin&#x2F;index.js resetpwd&quot;,    &quot;script&quot;: &quot;node .&#x2F;bin&#x2F;index.js script&quot;,    &quot;start&quot;: &quot;cross-env DEBUG&#x3D;null NODE_ENV&#x3D;production &amp;&amp; node dist&#x2F;index.js&quot;,    &quot;prd&quot;: &quot;pm2 start dist&#x2F;index.js --name hexon -o log&#x2F;pm2-log.log -e log&#x2F;pm2-err.log&quot;,    &quot;dev&quot;: &quot;pnpm run build &amp;&amp; nodemon .&#x2F;dist&#x2F;index.js&quot;,    &quot;build&quot;: &quot;rimraf dist &amp;&amp; node .&#x2F;scripts&#x2F;build.mjs&quot;,    &quot;test&quot;: &quot;jest&quot;  &#125;,  .......</code></pre><h3 id="启动服务"><a class="markdownIt-Anchor" href="#启动服务"></a> 启动服务</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json">systemctl enable hexon     # 添加自启systemctl start hexon      # 启动服务</code></pre><p>如果修改配置文件重新启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reloadsystemctl restart hexon</code></pre><p>查看服务状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status hexon</code></pre><p>查看服务日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo journalctl -u hexon -f</code></pre><hr><p>原本想着每次都要输入端口用户名ip太麻烦了，想改成直接公网ip访问，监听代码如下，但没有成功，再一想，也确实不能把这个相当于管理后台的界面暴露在公网，要ip访问也得是<strong>内网</strong>ip访问，有空再说。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">server.on(&quot;listening&quot;, () &#x3D;&gt; &#123;  const addr &#x3D; server.address();  &#x2F;&#x2F;const bind &#x3D; typeof addr &#x3D;&#x3D;&#x3D; &quot;string&quot; ? &quot;pipe &quot; + addr : &quot;http:&#x2F;&#x2F;localhost:&quot; + addr.port;  const bind &#x3D; typeof addr &#x3D;&#x3D;&#x3D; &quot;string&quot; ? &quot;pipe &quot; + addr : &quot;http:&#x2F;&#x2F;124.221.201.197:&quot; + addr.port;  console.log(&quot;Server running on &quot; + bind);  const his &#x3D; import_tsyringe19.container.resolve(HexoInstanceService);  his.init().catch(console.error);&#125;);</code></pre><hr><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>​hexon只是提供了一个界面，这就是为什么要先确保博客部署流程正确，作为一个伪后台，还是有些不足：</p><p>1、在博客的编辑页面是纯纯源代码格式，需要加一个可选择的markdown分屏预览效果<br>2、<sub>缺少博客备份的选项，毕竟服务器只租一年，还是github备份不易丢失。</sub>这个人家已经实现了，即“同步到git”选项，在服务器上测试好git push成功就能用了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 优化 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂记</title>
      <link href="//post/za-ji.html"/>
      <url>//post/za-ji.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7dfa7008821d9646147ad7bc9e0bc9bb815752c09cb618752c9157c750ae6461">9c452b28a2613fc50ac215b3a4e027f249a26a1fafea8a00e9098246f86258faeef805b7aaa316c9e86782784016bf6a2ebc604c202821f8ac7d7ff2c405e6d0fccad04b24deaa6e2649c0ece6a4b0bcd600cb56c25c95b56ed2fe91f0273f736720ef2a9d61f8bd004ee01939ef263504523e30d25ee2d93088e6acf0fa4daeda7de3f089ce43d7a015015d976396095cff35163473db98bf33d3a72f41195d3442a4d6ec74a11fe09bdd52414bb036c662a834c3cd70c516648de278c8e8fe033af4bd59c316c59ca904f574ad12306991e450874fbcca6cc1738c9d951a2f75bc987b1322cda6c03e4a4d525f5997c2a9e031fd4581722125d1d77fb0375fee3e0816c3f24a41e5859701dad3d0b25256b02f64e9c7ac7071b53c7475537a340e70cff7c348fcc210ce2eaf1821813d4d1c990d2efde0f405dc0715531fc0bd16a1d7691c49dad512bfca52adb43959ea47483af3650666116cf83f36654fc4377eb2521cd62bcecb663034a09d32b24d5071b71f4d635c9cd4b02c5a3ce59de6d8b5d03aadc71fe8322f63e78b857760ac7d8e78e9ac938f0126ecfaf6fe3cf4b5b0ec75660c1955857f3c1252ab455177ee386fa834b428572fd35222234f99c3565b00f5a90a44504c0d509e88dc6d1d269cbc600016fa9df3c33f94b63cfa6680f41562d66cdae08468c028fb85945c5d3f1d5b6219f6633abab736b36318785fa58f158799a7fabc69c08b37bfa19d4b54f70aa4c7ae86433c66bd206029dfd648f52acd10ebfca3ef6aea706a167306c996997965f0a75ecaf02af9cba4b6a498631c3bf5e469defb536576dbdc135d88146730d89be363ad847a719512a2b77b21b494a86b5b95a12fe6ffae48e1cfc814267fabd276a2e3ecb98a4b767bd962fd70510146af05a0db1724fb6bfbf6ec54105e42457945d4d8be0fbbfa26e2b4071183abcbee06263eae0c8373f4b44c70c8fa0009d46e1fed9e794167fc13598961a46f31cce284ef9d012136828456770901d39ff6dcef23c144173cc11af9525da70b8e90ed5fa65774d14a77dd1cddbd8a71b1e2e2f101e6c824fabdd78b76ebaf3eb17e251ad6ec7667f81cd019db523d787ef4a991de6bec8f54e26703a76043025c0b12e8d0ff86285361220d4093eade54abef0f527f203676df62d26d0fb875486cba2b4506c5efe2ec572c9d736696de177514b0f06af5ca862300c617efbc1f2dbdf991163a1f9a5db7a27a27bcb4ce16f8424f6ffe9b1077e87e64a34cf35007893d7e6130cbf97dba8dd3d0fd23e11fb9d696d31bfc508ae04117ac4bca63722942391073f74644d8f3f157627b369cb7a25c99f4c476ddc135b63e8eb8f824980ab87c86044c418ae487ba3e1eb2b083cef9ea8a9249f2d2d95e5f2200118be20c62511316d2d196f96ea5df3794a179299431369e82a213cf2a8897935b16ccd5220a22cc659329ec7b75d30d3d0e0188d311b1318790ab443c1cb5e356d3647f834eda334a57c1a792930c0941d24ebb17fe06a1ed03b8556bb772d8fd98fb965b9be7b162306e8c722d0f5c4e92be869a76404f823c9f45bd93fdcb0a35b0f7fba0d9e4fef452ab76d30cac08460a933dd81a98638f3d714682500060db672defad0655a51dc36d576bdb7a1e43f07a7656bbb7bf272c4dc6ac331740b394bed6541c05bcd0f9768f812876a02f995601ca6397cb4ab633852ab48c8f44dfa0f2a58c546d35462329cf60fafe65267de1468f83118059ceb7d4cd47f526ccfc02838f1ee55464a4b2f727b9054b8c48b4de0e6d0298ec1add295dfb8064a2a1d6db272e7c879083e23033b4c01df17bb332682229dfdff4b59f76b409c6767c63cd70f2ca1674431bdc80ddb03f606e689ca2908528c842f1fc11171e7be293b9936182bbd8cfd160f322108d97faeb29fb85115dafa5addf2e2a40399e8959fd03392ce37c77bb98886b23ae749138b93a3288a3e6b210c897c0227bce98bbd0ae5c731484832d1c2273f6f5968207bf600fb959512c6c5f13a097599754a3338187ea1f4d502b985efbacfbcb6bafab5d786b13d6cb0df991495e7a615da1f41481ccb1256666f0ffe9d34b6fe7c8ace36a65f0715fadc7d7a02c7f451f1c61b07358e408d32ce8f41b51853222247d34f6f8d0a1d139fa24b413d74d6023a8d8ce7d33e882ecd7dd577c6199d0ffff30747a12b6115b27b881802a9eb895b109bd8d68ae256962ea366606b8616669c89dc37398612a5b942964b47079b7e823ff603ed74c3a909eb0c75189d1d7698c0f9acd441345c4d743eb6976d034fa4094aacd8913020ddbd186db120a36ea30839d53d75163540bf8b1730ea5cc4b7e2ce2de317700904a027599bac5ad9fa6270a4b0497b7d1debd8cef421b49ed6ef841250784549e36b63deaaa5cf7c5c89200838dd3f3077ea6c8f9496061170721eeac7feee1c23647d37463d6556bda8c3f7f73c1eacb55ef90b30461f39cbf1a8db3a3a9910d3a2497dbde63499e0369cc1b1788d67d11a69e8e654d6458b45cf8f6b4fe2dc5e63b96c7b27d02b60773014d5fedab733fc70e0e44d5a8de5987782cf74664b1c6d3f742c8b79560cfdc05b179b47c2679ab5576085d1822d8e871b76893ad14fc925b90c9be1b45b63d94bc88d314ab3cfdde42dc0fe61ff43aeae9b41f077f4b5160f9224d30bda62f5093135425faa603aed33ea0a4480ccfc93772279676776e44551ab49c68a114a0448c88420e1f887ebcf895d2262f8cfaa17eec4939ab35d6eeb3c0f2c1bc000e64a567b46287a24c993869fdb9dd7881208445121c09542eda3e8670e8cd1d826c458d566f6ffb890f15ed2169a2e9d398699dc8c8c3f5b87dbd7ff7d5b810fbc64c8501d327dc87106d46924ba406b7f1d7a2fd847ce77883c69a636eba731f2586a1ac3a07c72ee5488bc55655e3b902df833e2ec42d347b1f556f554c470d64eb0c4556be59879ebaf32b491c45be41e174b6b9a181e79e27213cccfe54dd453eef9b6e1dfcbccbd609ab001923dace7af9b92b2d360ea24d00f7b4c90417ea9c9db685e9d541a89fb21f455c68b232400e2bbda5895a6d08bb4d0bfe6469d8b6e790d684c615827cbc314f5dd1104fff888c114e9c8c4853a019bbb34d30befa30cb556a7c1d7f562ca480c54efddbba4398b2aa19bc24eaf9e12770556e807a40da7e5fd6c0e76c48d19e4594ed4f284f82fbf9fa8d86481aa463c3933c2a8ddf1001d3f1b7235b150aeea444f40366752168439402183c5d11782845d98f3c2304d2bcd4e9c2fffb5aa6e41783f3b91461c4ff1a2a54b40fcbd0f1a4c6273b3af222038c93db5b8b85ed4cc5d45fa6bd1df84cca8450404e45782f43a61d1ccae6fff8913ad5b0b98054c37b04dbf3c6ff164efba54e1213e2f46b1b8b102be4c6fdcb25806190441177d6d57ffdf1e135bb14e6e3c085d5b85675f08320d6e51bf75127e700834a4692d4c46a4b903ce7a807fdd12372191acef4ecd38679ba839b98a8212abb7dbcfcff9a0619e2730ceec00f1c0489024b7751d0444f894cb9acf0741fa1de271a25c4913b2038e774370891e1cd2326c3f78d068556002e53a1633f2fcc94d17be7ea6a8394ae6e15f02a727175ac7c4f89e1764db812d648211047e75e1037929838cbe7e3e304d65e363ead4b47bb7f5c863373cbbb6794015f9e7d92bf90d0c8ef73a27b69a103aca5ad1b74201d0ca2b58625fe1199ce04f2f05cf46a0bfd77ff39bedec1b4f4097979809cc8429ad6fd32</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记暴雨天</title>
      <link href="//post/ji-bao-yu-tian.html"/>
      <url>//post/ji-bao-yu-tian.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 今日8月2号，因为台风暴雨天+懒，理所当然的躺了好几天。早上去了趟实验室，门没开，因为之前每次去实验室门已经开了，没有带钥匙的习惯，所以还是回宿舍了，打开电脑，趁这个空闲记录一下。<html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 上一次台风过境是在21年的暑假，那年考研留校正好遇到狂风暴雨，可惜的是当时和老王和祥仔苟在宿舍打王者了，没有出门感受一下，深感遗憾，直到几天以后出门只看到地下车库灌了满满当当的水。<html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 上周日，也就是7月31号，正是七月最后一天，终于在台风杜佳芮过境的最后一天，出了趟门，和凡哥解哥跋山涉水去吃了顿火锅，值得一提的是，我的伞在一周前去建行存钱，放在哈罗车篮子里不见了，大抵是从车篮子里掉路上了或是被人顺走了，先去菜鸟取了伞还有一盒鱼饵。说到鱼饵，宿舍里有解哥买的钓鱼竿，这次下大雨鱼上岸全被人们提桶捞走了，么得钓了/(ㄒoㄒ)/~~<html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 外面路上的积水有的地方到半个小腿，路上有车驶过溅起两边水幕还是蛮帅的。万达门口的低洼地聚了差不多小腿深的水，夹带着淤泥，妥妥的“黄”河。到了万达内部，空调还开着冷风，浑身上下都湿透了，再吹点冷风，这要是回去不洗个热水澡，真的要感冒。跋山涉水就为了这一顿火锅！！<p><img src="https://img.promefire.top/blog-img/20240110-3838dafbda207db008a2e2ddcca76358.png" alt></p><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 吃完火锅，已经是六点多了，天色渐暗、日星隐曜、浊浪排空。踩在水里凉得慌，更加一点狂风，打伞根本护不了一点点，装小蛋糕的纸袋子都被浸透泡烂了。路上突闻噩耗，宿舍楼内洗浴暂停一天，淋了一路雨、淌了一路水，热水澡必不能少，遂决定去对面的卓正泡澡，奢侈一把！！之前闻老大还推荐来着，择日不如撞日。回宿舍路过图书馆前，池塘里的水已经溢出来，漫过了外面的一个低平台，池中锦鲤也顺着游上来了，有好几个正徒手捉鱼，试着抓了一下没抓到，鱼游太快了。<p><img src="https://img.promefire.top/blog-img/20240110-d452d5e7caabb7a4931c018534838a8e.png" alt></p><p><img src="https://img.promefire.top/blog-img/20240110-5fdb3c9c0ec7f87f95a2e66f1842354c.png" alt></p><p><img src="https://img.promefire.top/blog-img/20240110-6087893669d5b1f944f35fe6aa5e5112.png" alt></p><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 宿舍先行泡了脚，暖和一下先，收拾了一身干净衣服，背了健身包出发，着不知道的人还以为我和凡哥冒雨去健身，笑死。凡哥惊讶我这个北方人竟然是第一次泡澡，泡澡的地竟然不让穿鞋，都是光脚走来走去，咯得我脚疼。泡澡确实舒坦，就是有点小贵，泡一次96。不过环境还是不错的。该说不说这大雨天，前来避难的人是真不少，都没个睡的地方，租了一盘棋，和凡哥对弈到一半，丫的停电了，大暴雨冲倒设施停电可以理解，但是没有一点预案也太不讲究了吧，发电机呢？最后打着手电下完了这一局，惨败，呜呜呜。右下角那一块黑棋没有注意到只有一个眼，第二个是个假眼，血亏十几目，当然加上也赢不了，以后下可得仔细点。<p><img src="https://img.promefire.top/blog-img/20240110-8636f4d923f5aed679afea6610ed6f4a.png" alt></p><p><img src="https://img.promefire.top/blog-img/20240110-0e4c98f1a29ac6d3d9f8eec913a72e13.png" alt></p><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 最后在大厅里找了个抱枕躺了，停电没空调是真tmd热，凡哥说我们本是来奢侈一把来享福的。晚上十点多的时候有服务员来叫让下去吃饭，没电饭做不出来，应该是中午剩下的，一块排骨、一块寿司、一块蛋挞。睡觉时候大概十二点过到一点间，隔壁有一家三口大半夜不睡觉在那聊天，聊什么“南韩北韩”、什么”徒增笑耳“云云，烦的一批，我大概两点多时候水的，凌晨4：50时候来电了，明晃晃的大灯就那么突然亮了，直接晃醒，心累啊，7点过下去吃早饭，炒饭、包子、油条、黑米粥 。吃完以后人走了不少，找了一张床直接睡了一上午，舒坦啊。<p><img src="https://img.promefire.top/blog-img/20240110-0eb09becc811ede94d80cbea116e897d.png" alt></p><p><img src="https://img.promefire.top/blog-img/20240110-aef28122acef7eccd6539774360cb86e.png" alt></p><p>出来已经不下雨了，地上积水三三两两，比之昨日，少了许多，路上车来车往，回！</p><p><img src="https://img.promefire.top/blog-img/20240110-3b447bff32483bd2506c90f3a66ed785.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号推送天气预报</title>
      <link href="//post/wei-xin-gong-zhong-hao-tui-song-tian-qi-yu-bao.html"/>
      <url>//post/wei-xin-gong-zhong-hao-tui-song-tian-qi-yu-bao.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="天气api"><a class="markdownIt-Anchor" href="#天气api"></a> 天气API</h2><p>使用<a href="https://dashboard.juhe.cn/home">聚合网</a>的天气API，每天免费50次</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">接口地址： http:&#x2F;&#x2F;apis.juhe.cn&#x2F;simpleWeather&#x2F;query请求方式： GET请求参数； city拼接方式： http:&#x2F;&#x2F;apis.juhe.cn&#x2F;simpleWeather&#x2F;query?city&#x3D;&#123;city&#125;&amp;key&#x3D;&#123;key&#125;请求Key: 实名认证后会有</code></pre><p><img src="https://img.promefire.top/blog-img/20240110-7e685edb3d067addac2f592c1e1d8a82.png" alt="img"></p><h2 id="测试账号"><a class="markdownIt-Anchor" href="#测试账号"></a> 测试账号</h2><p><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login">微信公众平台接口测试账号</a>,注册一个测试账号,记下appid和secret，扫码后产生的用户ID、模板ID，填入<code>config.txt</code>文件中</p><p>自己的公众号不记得密码了，擦，先用测试的吧</p><img src="https://img.promefire.top/blog-img/20240110-570643158aec68e617bdb8dd6facd98e.png" alt="img" style="zoom: 67%;"><pre class="line-numbers language-python" data-language="python"><code class="language-python">&#123;&#123;date.DATA&#125;&#125;城市:&#123;&#123;city.DATA&#125;&#125;天气:&#123;&#123;weather.DATA&#125;&#125;实时气温:&#123;&#123;temperature.DATA&#125;&#125;湿度:&#123;&#123;humioity.DATA&#125;&#125;风向:&#123;&#123;direct.DATA&#125;&#125;您已经在地球上存活了:&#123;&#123;live.DATA&#125;&#125;天 &#123;&#123;note_ch.DATA&#125;&#125;&#123;&#123;note_en.DATA&#125;&#125;</code></pre><h2 id="配置文件"><a class="markdownIt-Anchor" href="#配置文件"></a> 配置文件</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">&#123;&quot;appid&quot;: &quot;appid&quot;,&quot;secret&quot;: &quot;secret&quot;,&quot;template_id&quot;: &quot;0sXNi6sorkdKHVKS8UuQdRARS39vaBu94YyqbmW7GtI&quot;,&quot;user&quot;: [&quot;oGeX96kGhg-wEhbKEstfGe93cAiQ&quot;,&quot;oGeX96pRe_r-0PfdsJ09zzk5juHI&quot;], &quot;key&quot;: &quot;7ccd03d19e2920224cdadd2ae2bdfd07&quot;,&quot;birthday&quot;: &quot;2000-03-11&quot;,&quot;weather_key&quot;: &quot;7ccd03d19e2920224cdadd2ae2bdfd07&quot;,&quot;region&quot;: [&quot;保定&quot;,&quot;石家庄&quot;], &quot;note_ch&quot;: &quot;good good learn,day day up&quot;, &quot;note_en&quot;: &quot;study hard and make progress every day!&quot; &#125;</code></pre><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><h3 id="在main中读取配置文件并调用函数"><a class="markdownIt-Anchor" href="#在main中读取配置文件并调用函数"></a> 在main中读取配置文件并调用函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    try:        with open(&quot;config.txt&quot;, encoding&#x3D;&quot;utf-8&quot;) as f:            config &#x3D; eval(f.read())    except FileNotFoundError:        print(&quot;推送消息失败，请检查config.txt文件是否与程序位于同一路径&quot;)        os.system(&quot;pause&quot;)        sys.exit(1)    except SyntaxError:        print(&quot;推送消息失败，请检查配置文件格式是否正确&quot;)        os.system(&quot;pause&quot;)        sys.exit(1)    # 获取accessToken    accessToken &#x3D; get_access_key()    # 接收的用户    users &#x3D; config[&quot;user&quot;]    # 传入地区获取天气信息    citys &#x3D; config[&quot;region&quot;]    note_ch &#x3D; config[&quot;note_ch&quot;]    note_en &#x3D; config[&quot;note_en&quot;]    #模板id    template_id &#x3D; config[&quot;template_id&quot;]    for usr,city in zip(users,citys):        weather, temperature, humidity, direct &#x3D; get_weather(city)        send_msg(usr,accessToken,template_id,weather,temperature,humidity,direct,note_ch,note_en)</code></pre><p>同时循环两个及以上列表要加zip()</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">for usr,city in zip(users,citys):        weather, temperature, humidity, direct &#x3D; get_weather(city)        send_msg(usr,accessToken,template_id,weather,temperature,humidity,direct,note_ch,note_en)</code></pre><p>这个循环考虑了多个用户，不同城市，目前存放的时候只能一一对应，后面可以将配置文件读入转化为Json，里面放一个users，每一个user对应城市、生日等等用户信息。读入程序后，赋给实体对象，这样外循环只遍历用户对象就行了，还方便增删查改。没毛病 。用户<code>id</code>、<code>city</code>。定义一个user类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">class User:    def __init__(self, id, city,birthday):        self.id &#x3D; id        self.city &#x3D; city        self.birthday &#x3D; birthday</code></pre><p>//TODO 能不能获取用户微信上的地址，更方便</p><p>将txt文件转换为json文件</p><p>读取文件中的每一行，并将其拆分为键和值对，来创建一个Python字典对象。对于值是一个JSON字符串的情况下，我们使用 json.loads() 函数将其解析成Python对象。最后，我们可以使用 json.dump() 将字典对象写入新的JSON文件中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import jsondef txt2json():# 读取文本文件    with open(&#39;config.txt&#39;, &#39;r&#39;) as f:        lines &#x3D; f.readlines()        # 将文本转换为字典对象    data &#x3D; &#123;&#125;    for line in lines:        key, val &#x3D; line.strip().split(&#39;: &#39;)        try:            val &#x3D; json.loads(val)        except ValueError:            pass        data[key] &#x3D; val        # 将字典对象写入JSON文件    with open(&#39;config.json&#39;, &#39;w&#39;) as f:        json.dump(data, f)</code></pre><p>读取Json文件建立userduix</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def CreateUsersByJson():    with open(&#39;config.json&#39;, &#39;r&#39;) as f:        data &#x3D; json.load(f)    users &#x3D; []    for user_data in data[&#39;users&#39;].values():        users.append(User(user_data[&#39;id&#39;], user_data[&#39;city&#39;],user_data[&#39;birthday&#39;]))    return users</code></pre><h3 id="根据appid和-secret获取密钥accesstoken"><a class="markdownIt-Anchor" href="#根据appid和-secret获取密钥accesstoken"></a> 根据<code>appid</code>和 <code>secret</code>获取密钥<code>accessToken</code></h3><p>这个在后面发消息会用到</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def get_access_key():    appid &#x3D; config[&#39;appid&#39;]    secret &#x3D; config[&#39;secret&#39;]    url &#x3D; f&#39;https:&#x2F;&#x2F;api.weixin.qq.com&#x2F;cgi-bin&#x2F;token?grant_type&#x3D;client_credential&amp;appid&#x3D;&#123;appid&#125;&amp;secret&#x3D;&#123;secret&#125;&#39;    response &#x3D; requests.get(url).json()    access_token &#x3D; &#39;&#39;    if response[&#39;expires_in&#39;] &#x3D;&#x3D; 7200:        access_token &#x3D; response[&#39;access_token&#39;]        return access_token    else:        print(&quot;appid或secret错误&quot;)</code></pre><h3 id="根据城市获得天气"><a class="markdownIt-Anchor" href="#根据城市获得天气"></a> 根据城市获得天气</h3><p>聚合网查询得到的json数据为：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;&quot;reason&quot;:&quot;查询成功!&quot;,&quot;result&quot;:&#123;&quot;city&quot;:&quot;保定&quot;,&quot;realtime&quot;:&#123;&quot;temperature&quot;:&quot;37&quot;,&quot;humidity&quot;:&quot;23&quot;,&quot;info&quot;:&quot;晴&quot;,&quot;wid&quot;:&quot;00&quot;,&quot;direct&quot;:&quot;西南风&quot;,&quot;power&quot;:&quot;5级&quot;,&quot;aqi&quot;:&quot;125&quot;&#125;,&quot;future&quot;:[&#123;&quot;date&quot;:&quot;2023-06-16&quot;,&quot;temperature&quot;:&quot;23\&#x2F;38℃&quot;,&quot;weather&quot;:&quot;晴&quot;,&quot;wid&quot;:&#123;&quot;day&quot;:&quot;00&quot;,&quot;night&quot;:&quot;00&quot;&#125;,&quot;direct&quot;:&quot;南风&quot;&#125;,&#123;&quot;date&quot;:&quot;2023-06-17&quot;,&quot;temperature&quot;:&quot;23\&#x2F;36℃&quot;,&quot;weather&quot;:&quot;晴转多云&quot;,&quot;wid&quot;:&#123;&quot;day&quot;:&quot;00&quot;,&quot;night&quot;:&quot;01&quot;&#125;,&quot;direct&quot;:&quot;西南风转东北风&quot;&#125;,&#123;&quot;date&quot;:&quot;2023-06-18&quot;,&quot;temperature&quot;:&quot;24\&#x2F;36℃&quot;,&quot;weather&quot;:&quot;多云转中雨&quot;,&quot;wid&quot;:&#123;&quot;day&quot;:&quot;01&quot;,&quot;night&quot;:&quot;08&quot;&#125;,&quot;direct&quot;:&quot;东北风&quot;&#125;,&#123;&quot;date&quot;:&quot;2023-06-19&quot;,&quot;temperature&quot;:&quot;19\&#x2F;27℃&quot;,&quot;weather&quot;:&quot;雷阵雨转阴&quot;,&quot;wid&quot;:&#123;&quot;day&quot;:&quot;04&quot;,&quot;night&quot;:&quot;02&quot;&#125;,&quot;direct&quot;:&quot;东北风转北风&quot;&#125;,&#123;&quot;date&quot;:&quot;2023-06-20&quot;,&quot;temperature&quot;:&quot;17\&#x2F;25℃&quot;,&quot;weather&quot;:&quot;雷阵雨转多云&quot;,&quot;wid&quot;:&#123;&quot;day&quot;:&quot;04&quot;,&quot;night&quot;:&quot;01&quot;&#125;,&quot;direct&quot;:&quot;北风转东北风&quot;&#125;]&#125;,&quot;error_code&quot;:0&#125;</code></pre><p>未来天气就算了吧，毕竟每天推送，郁闷的是当日天气没有最低最高温度，只有实时温度。。。。这个API不行</p><ul><li><code>r = requests.get(url,headers)</code>得到的是一个response对象，需要调用<code>res = r.json()</code>转换为json格式，然后就可以访问键值。</li><li>函数返回天气、实时温度、湿度、风向。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">def get_weather(city):    key &#x3D; config[&quot;key&quot;]    headers &#x3D; &#123;        &#39;Referer&#39;: &#39;http:&#x2F;&#x2F;apis.juhe.cn&#x2F;simpleWeather&#x2F;query&#39;,        &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;86.0.4240.198 Safari&#x2F;537.36&#39;    &#125;    url &#x3D; f&#39;http:&#x2F;&#x2F;apis.juhe.cn&#x2F;simpleWeather&#x2F;query?city&#x3D;&#123;city&#125;&amp;key&#x3D;&#123;key&#125;&#39;    r &#x3D; requests.get(url,headers)    r.encoding &#x3D; &quot;utf8&quot;    res &#x3D; r.json()    realtime &#x3D; res[&#39;result&#39;][&#39;realtime&#39;]    temperature &#x3D; realtime[&#39;temperature&#39;]    humidity &#x3D; realtime[&#39;humidity&#39;]    weather &#x3D; realtime[&#39;info&#39;]  #晴    direct &#x3D; realtime[&#39;direct&#39;] #风    return weather,temperature,humidity,direct</code></pre><h3 id="推送消息"><a class="markdownIt-Anchor" href="#推送消息"></a> 推送消息</h3><p>strptime(要转换为datetime的字符串,输入的格式)</p><p><code>reques.post(sendMessage_url, data=json.dumps(data)).json()</code>向指定的URL发送POST请求，并将发送的数据以JSON格式进行编码。将响应结果保存为json数据</p><p><code>json.dumps(data)</code>将字典转换成一个Json字符串</p><p>这个不用了,太蠢了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def send_msg(user,accessToken,template_id,weather,temperature,humioity,direct, note_ch, note_en):    sendMessage_url &#x3D; f&quot;https:&#x2F;&#x2F;api.weixin.qq.com&#x2F;cgi-bin&#x2F;message&#x2F;template&#x2F;send?access_token&#x3D;&#123;accessToken&#125;&quot;    # 当前日期和星期    week_list &#x3D; [&quot;星期日&quot;, &quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;]    year &#x3D; localtime().tm_year    month &#x3D; localtime().tm_mon    day &#x3D; localtime().tm_mday    week &#x3D; week_list[datetime.date(int(year), int(month), int(day)).weekday()]    date &#x3D; f&#39;&#123;year&#125;年&#123;month&#125;月&#123;day&#125;日  &#123;week&#125;&#39;    # 活了多久    birthday_date &#x3D; datetime.datetime.strptime(config[&#39;birthday&#39;], &quot;%Y-%m-%d&quot;)    curr_datetime &#x3D; datetime.datetime.now()    minus_datetime &#x3D; curr_datetime - birthday_date        data &#x3D; &#123;        &quot;touser&quot;: user,        &quot;template_id&quot;: template_id,        &quot;appid&quot;: config[&#39;appid&#39;],        &quot;data&quot;: &#123;            &quot;live&quot;: &#123;                &quot;value&quot;: minus_datetime.days,                &quot;color&quot;: get_color()            &#125;,            &quot;city&quot;: &#123;                &quot;value&quot;: city,                &quot;color&quot;: get_color()            &#125;,            &quot;weather&quot;: &#123;                &quot;value&quot;: weather,                &quot;color&quot;: get_color()            &#125;,            &quot;temperature&quot;: &#123;                &quot;value&quot;: temperature,                &quot;color&quot;: get_color()            &#125;,            &quot;humioity&quot;: &#123;                &quot;value&quot;: humioity,                &quot;color&quot;: get_color()            &#125;,            &quot;direct&quot;: &#123;                &quot;value&quot;: direct,                &quot;color&quot;: get_color()            &#125;,            &#39;note_ch&#39;: &#123;                &quot;value&quot;: note_ch,                &quot;color&quot;: get_color()            &#125;,            &#39;note_en&#39;: &#123;                &quot;value&quot;: note_en,                &quot;color&quot;: get_color()            &#125;        &#125;    &#125;    getTemp &#x3D; requests.post(sendMessage_url, data&#x3D;json.dumps(data)).json()</code></pre><p>修改之后的推送消息</p><p>参数只有user，看着舒服多了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def SendMsg(user):    city &#x3D; user.city    weather, temperature, humidity, direct &#x3D; get_weather(city)    sendMessage_url &#x3D; f&quot;https:&#x2F;&#x2F;api.weixin.qq.com&#x2F;cgi-bin&#x2F;message&#x2F;template&#x2F;send?access_token&#x3D;&#123;accessToken&#125;&quot;        birthday_date &#x3D; datetime.datetime.strptime(config[&#39;birthday&#39;], &quot;%Y-%m-%d&quot;)    curr_datetime &#x3D; datetime.datetime.now()    minus_datetime &#x3D; curr_datetime - birthday_date        data &#x3D; &#123;        &quot;touser&quot;: user.id,        &quot;template_id&quot;: template_id,        &quot;appid&quot;: config[&#39;appid&#39;],        &quot;data&quot;: &#123;            &quot;live&quot;: &#123;                &quot;value&quot;: minus_datetime.days,                &quot;color&quot;: get_color()            &#125;,            &quot;city&quot;: &#123;                &quot;value&quot;: city,                &quot;color&quot;: get_color()            &#125;,            &quot;weather&quot;: &#123;                &quot;value&quot;: weather,                &quot;color&quot;: get_color()            &#125;,            &quot;temperature&quot;: &#123;                &quot;value&quot;: temperature,                &quot;color&quot;: get_color()            &#125;,            &quot;humioity&quot;: &#123;                &quot;value&quot;: humidity,                &quot;color&quot;: get_color()            &#125;,            &quot;direct&quot;: &#123;                &quot;value&quot;: direct,                &quot;color&quot;: get_color()            &#125;,            &#39;note_ch&#39;: &#123;                &quot;value&quot;: note_ch,                &quot;color&quot;: get_color()            &#125;,            &#39;note_en&#39;: &#123;                &quot;value&quot;: note_en,                &quot;color&quot;: get_color()            &#125;        &#125;    &#125;    getTemp &#x3D; requests.post(sendMessage_url, data&#x3D;json.dumps(data)).json()    &#x2F;&#x2F;TODO 对getTemp判断</code></pre><p><code>get_color()</code>随机选择颜色，抄的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def get_color():    # 获取随机颜色    get_colors &#x3D; lambda n: list(map(lambda i: &quot;#&quot; + &quot;%06x&quot; % random.randint(0, 0xFFFFFF), range(n)))    color_list &#x3D; get_colors(100)    return random.choice(color_list)</code></pre><h2 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h2><p>测试号上可行，推送样式如图：</p><p><img src="https://img.promefire.top/blog-img/20240110-cab8d9d5d5c12a85d88bb878aa004a53.jpeg" alt="img"></p><p>做好了才发现个人公众号不能推送模板信息。。。搞不了。。。</p><p><img src="https://img.promefire.top/blog-img/20240110-cf8bafa19f2878519edfba1393e2c078.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
          <category> Python开发 </category>
          
          <category> 应用开发 </category>
          
          <category> 微信开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 自动化 </tag>
            
            <tag> 微信公众号 </tag>
            
            <tag> RESTful API </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OWOD复现</title>
      <link href="//post/owod-fu-xian.html"/>
      <url>//post/owod-fu-xian.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>项目环境：python3.7(python3.8)、cuda11.3、pytorch1.10</p><p>论文地址：<a href="https://arxiv.org/abs/2103.02603">https://arxiv.org/abs/2103.02603</a></p><p>代码地址：<a href="https://github.com/JosephKJ/OWOD">https://github.com/JosephKJ/OWOD</a></p><h2 id="安装detectron2"><a class="markdownIt-Anchor" href="#安装detectron2"></a> 安装Detectron2</h2><h3 id="1-安装pytorch110-torchvision0110-opencv"><a class="markdownIt-Anchor" href="#1-安装pytorch110-torchvision0110-opencv"></a> 1、安装pytorch1.10 + torchvision0.11.0 + opencv</h3><p>一开始没注意，安装了1.12的pytorch，结果官方给的文档上只到1.10，复现还是不要挑战高版本是否兼容了，尝试了一下pytorch版本降级，如下，但是没成功，还是1.12的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda install pytorch&#x3D;0.1.10 -c soumith </code></pre><p>果断退出虚拟环境，再建一个。</p><p>在<a href="https://pytorch.org/get-started/previous-versions/">这里</a> 找对应1.10版本的pytorch，顺带<code>torchvision</code>也一起下了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create -n OWOD2 python&#x3D;3.7# CUDA 11.3conda install pytorch&#x3D;&#x3D;1.10.0 torchvision&#x3D;&#x3D;0.11.0 torchaudio&#x3D;&#x3D;0.10.0 cudatoolkit&#x3D;11.3 -c pytorch -c conda-forge</code></pre><p>报错了！！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">(OWOD2) root@autodl-container-d8b611b252-d52809bf:~# conda install pytorch&#x3D;&#x3D;1.10.1 torchvision&#x3D;&#x3D;0.11.2 torchaudio&#x3D;&#x3D;0.10.1 cudatoolkit&#x3D;11.3 -c pytorch -c conda-forgeCollecting package metadata (current_repodata.json): doneSolving environment: failed with initial frozen solve. Retrying with flexible solve.Collecting package metadata (repodata.json): &#x2F; (OWOD2) root@autodl-container-d8b611b252-d52809bf:~#</code></pre><p>添加清华源！（不行）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#添加镜像源conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;mainconda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;freeconda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;rconda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;proconda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;msys2#显示检索路径conda config --set show_channel_urls yes#显示镜像通道conda config --show channels</code></pre><p>还是离线下载吧（成功）</p><p>离线下载网址：<a href="https://download.pytorch.org/whl/cu113/torch_stable.html">https://download.pytorch.org/whl/cu113/torch_stable.html</a></p><p>下载<code>**torch-1.10.0+cu113-cp37-cp37m-linux_x86_64.whl**</code>和<code>torchvision-0.11.0+cu113-cp37-cp37m-linux_x86_64.whl</code>,</p><p>上传到服务器，然后</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip install torch-1.10.0+cu113-cp37-cp37m-linux_x86_64.whlpip install torchvision-0.11.0+cu113-cp37-cp37m-linux_x86_64.whl</code></pre><p>查看一下torch版本怎么cuda版本也出来了，emmm，大抵是没毛病。</p><p><img src="https://img.promefire.top/blog-img/20240110-68ee230ff715d7907c788eb3503ce5fb.png" alt="img"></p><p>安装OpenCV</p><pre class="line-numbers language-none"><code class="language-none">python -m pip install opencv-python -i http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F; --trusted-host pypi.douban.com</code></pre><h3 id="2-安装detectron2"><a class="markdownIt-Anchor" href="#2-安装detectron2"></a> 2、安装Detectron2</h3><p><a href="https://github.com/facebookresearch/detectron2/blob/main/INSTALL.md#installation">这里</a> 获取对应版本的Detectron2</p><p><img src="https://img.promefire.top/blog-img/20240110-00ba652f2d4ca592bcf52c13eab9ee14.png" alt="img"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -m pip install detectron2 -f \  https:&#x2F;&#x2F;dl.fbaipublicfiles.com&#x2F;detectron2&#x2F;wheels&#x2F;cu113&#x2F;torch1.10&#x2F;index.html</code></pre><p>源代码构建</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git clone https:&#x2F;&#x2F;github.com&#x2F;facebookresearch&#x2F;detectron2.gitpython -m pip install -e detectron2</code></pre><h3 id="3-再下载gcc-和g编译器"><a class="markdownIt-Anchor" href="#3-再下载gcc-和g编译器"></a> 3、再下载gcc 和g++编译器</h3><pre class="line-numbers language-none"><code class="language-none">apt-get install gcc g++</code></pre><p><img src="https://img.promefire.top/blog-img/20240110-f9f1a41399d2cce98821b5e1a48c8776.png" alt="img"></p><h3 id="4-安装依赖"><a class="markdownIt-Anchor" href="#4-安装依赖"></a> 4、安装依赖</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip install fvcore&#x3D;&#x3D;0.1.1.post20200716pip install &#39;git+https:&#x2F;&#x2F;github.com&#x2F;cocodataset&#x2F;cocoapi.git#subdirectory&#x3D;PythonAPI&#39;</code></pre><p>4.1报错：<code>detectron2 0.6 requires fvcore&lt;0.1.6,&gt;=0.1.5, but you have fvcore 0.1.1.post20200716 which is incompatible.</code></p><p>那就换成<code>pip install fvcore==0.1.5.post20210410</code>吧</p><p>4.2报错：<code>detectron2 0.6 requires pycocotools&gt;=2.0.2, but you have pycocotools 2.0 which is incompatible.</code></p><p>解决：从<a href="https://pypi.org/project/pycocotools/2.0.2/#files">这里</a> 下载2.0.2的文件</p><p>cd到pycocotools所在目录。执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python setup.py build_ext --inplacepython setup.py build_ext install</code></pre><p><code>conda list</code> 查看pycocotools，安装成功</p><ul><li>记得要用<code>pip uninstall pycocotools</code>把之前2.0的卸载掉</li></ul><p>在demo文件夹下放一张照片测试一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python demo.py --config-file ..&#x2F;configs&#x2F;COCO-InstanceSegmentation&#x2F;mask_rcnn_R_50_FPN_3x.yaml --input 1.jpg --output .&#x2F;result.jpg --opts MODEL.WEIGHTS detectron2:&#x2F;&#x2F;COCO-InstanceSegmentation&#x2F;mask_rcnn_R_50_FPN_3x&#x2F;137849600&#x2F;model_final_f10217.pkl</code></pre><p>报错：<code> cannot import name 'cached_property' from 'functools'</code></p><p>搜索发现只有3.8以上才行？？？？我尼玛搞了这么久你说得3.8，前面说大于等于3.6是吃屎了吗？？？</p><p>爷妥协了，重新建了3.8的环境，再来一遍，跑起来了</p><p><img src="https://img.promefire.top/blog-img/20240110-e5df1e07e96da936689172eb107f96f8.png" alt="img"></p><p><img src="https://img.promefire.top/blog-img/20240115-4af72295e85457dbad57f57af7b195ad.jpeg" alt="1686361443462-23b2f48b-8d2e-42a2-881e-5665e25fff8a"></p><h1 id="owod"><a class="markdownIt-Anchor" href="#owod"></a> OWOD</h1><h2 id="1-数据集-文件夹"><a class="markdownIt-Anchor" href="#1-数据集-文件夹"></a> 1、数据集 文件夹</h2><p><img src="https://img.promefire.top/blog-img/20240110-e57b03f7e67f3a2e8842e383b0d7e4c8.png" alt="img"></p><h2 id="2-下载预训练模型"><a class="markdownIt-Anchor" href="#2-下载预训练模型"></a> 2、下载预训练模型</h2><p><a href="https://github.com/JosephKJ/OWOD/issues/86">点击这里下载</a>，放在OWOD-master下，找到<code>OWOD-master/configs/OWOD/t1/t1_train.yaml</code>,把预训练模型的文件路径替换原文件中weight的内容。</p><h2 id="3-打包代码上传"><a class="markdownIt-Anchor" href="#3-打包代码上传"></a> 3、打包代码上传</h2><p>linux下解压zip压缩文件<code>unzip xxx.zip</code></p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-d 目录名</td><td>将压缩文件解压到指定目录下。</td></tr><tr><td>-n</td><td>解压时并不覆盖已经存在的文件。</td></tr><tr><td>-o</td><td>解压时覆盖已经存在的文件，并且无需用户确认。</td></tr><tr><td>-v</td><td>查看压缩文件的详细信息，包括压缩文件中包含的文件大小、文件名以及压缩比等，但并不做解压操作。</td></tr><tr><td>-t</td><td>测试压缩文件有无损坏，但并不解压。</td></tr><tr><td>-x 文件列表</td><td>解压文件，但不包含文件列表中指定的文件。</td></tr></tbody></table><h2 id="4-进入项目文件夹配置detectron"><a class="markdownIt-Anchor" href="#4-进入项目文件夹配置detectron"></a> 4、进入项目文件夹，配置detectron</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python setup.py build develop</code></pre><ul><li>不要使用该文件夹外部构建的Detectron2，运行代码时会报’Non-existent config key: OWOD’，具体原因是Detectron2的版本问题，所以一定要在OWOD内构建Detectron2</li></ul><p>解决方法：在OWOD内部运行<code>**python -m pip install -e ./**</code></p><h2 id="5-开跑"><a class="markdownIt-Anchor" href="#5-开跑"></a> 5、开跑</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python tools&#x2F;train_net.py --num-gpus 1 --config-file .&#x2F;configs&#x2F;OWOD&#x2F;t1&#x2F;t1_train.yaml SOLVER.IMS_PER_BATCH 8 SOLVER.BASE_LR 0.0025 OUTPUT_DIR &quot;.&#x2F;output&#x2F;t1&quot;</code></pre><ul><li><strong>–num-gpus 1</strong>: 这个参数指定使用的GPU数量为1，表明训练将在单个GPU上进行。</li><li><strong>–config-file ./configs/OWOD/t1/t1_train.yaml</strong>: 这个参数指定了配置文件的路径，配置文件是训练过程中使用的设置和参数的集合。在这个例子中，配置文件的路径为 <strong>./configs/OWOD/t1/t1_train.yaml</strong>。</li><li><strong>SOLVER.IMS_PER_BATCH 8</strong>: 这个参数设置了每个训练批次（batch）的图像数目为8。在训练过程中，将每次从数据集中选择8张图像用于训练。</li><li><strong>SOLVER.BASE_LR 0.0025</strong>: 这个参数设置了基础学习率（base learning rate）为0.0025。基础学习率是在训练过程中控制参数更新的速率的一个重要参数。</li><li><strong>OUTPUT_DIR “./output/t1”</strong>: 这个参数设置了输出目录的路径为 <strong>./output/t1</strong>。在训练过程中，训练模型和其他输出文件将保存在这个目录中。</li></ul><h3 id="报错"><a class="markdownIt-Anchor" href="#报错"></a> 报错</h3><ul><li>报错：<code>**No module named 'reliability****'** </code></li></ul><p><code>pip install reliability -i https://pypi.tuna.tsinghua.edu.cn/simple</code>指定一下清华源</p><ul><li>又报错：<code>module 'numpy' has no attribute 'str'. </code></li></ul><p>查了一下是numpy版本的问题，我的是1.24.3，降级成1.22.0.但是另一个包要求numpy&gt;=1.24.2，🤮</p><p>都tmd降级，numpy降到1.23</p><ul><li>报错：<code>distutils‘ has no attribute ‘version‘ </code></li></ul><p>是setuptools版本问题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip uninstall setuptoolspip install setuptools&#x3D;&#x3D;59.5.0</code></pre><p>嗚嗚，out of memory了，batch_szie 只能設置爲2，開跑!!! 2000張圖片跑兩小時</p><p><img src="https://img.promefire.top/blog-img/20240110-ea339bd2bae8222fc089ab2a4208c22a.png" alt="img"></p><p>参数解释：</p><ul><li>eta: 2:00:55 这个指标表示预计训练完成所需的剩余时间。在这个例子中，预计还需要2小时、55分钟来完成训练。</li><li>iter: 19 这个指标表示当前的迭代次数。在这个例子中，当前迭代次数为19次。</li><li>total_loss: 2.895 这个指标表示总体损失（total loss）。总体损失是在训练过程中使用的一个综合指标，用于衡量模型的训练效果。在这个例子中，总体损失为2.895。</li><li>loss_cls: 1.497 这个指标表示分类损失（classification loss）。分类损失是用于衡量模型分类任务的损失函数值。在这个例子中，分类损失为1.497。</li><li>loss_box_reg: 0.2146 这个指标表示边界框回归损失（bounding box regression loss）。边界框回归损失是用于衡量模型边界框回归任务的损失函数值。在这个例子中，边界框回归损失为0.2146。</li><li>loss_clustering: 0 这个指标表示聚类损失（clustering loss）。聚类损失是用于衡量模型聚类任务的损失函数值。在这个例子中，聚类损失为0。</li><li>loss_rpn_cls: 0.6775 这个指标表示区域生成网络分类损失（region proposal network classification loss）。区域生成网络分类损失是用于衡量模型区域生成网络分类任务的损失函数值。在这个例子中，区域生成网络分类损失为0.6775。</li><li>loss_rpn_loc: 0.199 这个指标表示区域生成网络定位损失（region proposal network localization loss）。区域生成网络定位损失是用于衡量模型区域生成网络定位任务的损失函数值。在这个例子中，区域生成网络定位损失为0.199。</li><li>time: 0.4011 这个指标表示当前迭代的耗时。在这个例子中，当前迭代的耗时为0.4011秒。</li><li>data_time: 0.0515 这个指标表示数据加载的耗时。在这个例子中，数据加载的耗时为0.0515秒。</li><li>lr: 0.00047703 这个指标表示学习率（learning rate）的值。学习率是控制模型参数更新的速率的一个重要超参数</li></ul><p>单张图片测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python demo.py --config-file &#x2F;root&#x2F;python_work&#x2F;OWOD-master&#x2F;configs&#x2F;OWOD&#x2F;t1&#x2F;t1_test.yaml  --input 2.jpg --output 2_res.jpg --opt MODEL.WEIGHTS &#x2F;root&#x2F;python_work&#x2F;OWOD-master&#x2F;output&#x2F;t1&#x2F;model_final.pth</code></pre><p><img src="https://img.promefire.top/blog-img/20240110-a54aa493bdedc532081077dd1a1eec4e.jpeg" alt="img"></p><p>​     两千张图片训出来的果然不行，柜子检测成car了。而且还有一个问题，就是这2000张图片没有按类别进行挑选，导致不知道某一个类有没有经过训练，也就无法测试是不是新类要标注为unknown。</p><p><img src="https://img.promefire.top/blog-img/20240110-74c7f653dfc5e03efbcc2d88e15920fc.jpeg" alt="img"></p><p>可视化代码里要求output文件夹下有一个energy_dist.pkl文件，输出里面么得这个文件，稀碎。。。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cfg_file &#x3D;  &quot;&#x2F;root&#x2F;python_work&#x2F;OWOD-master&#x2F;configs&#x2F;OWOD&#x2F;t1&#x2F;t1_test.yaml&quot;model &#x3D; &#39;&#x2F;root&#x2F;python_work&#x2F;OWOD-master&#x2F;output&#x2F;t1&#x2F;model_final.pth&#39;im &#x3D; cv2.imread(&quot;&#x2F;root&#x2F;python_work&#x2F;OWOD-master&#x2F;datasets&#x2F;VOC2007&#x2F;JPEGImages&#x2F;&quot; + file_name + &quot;.jpg&quot;)param_save_location &#x3D; os.path.join(&#39;&#x2F;root&#x2F;python_work&#x2F;OWOD-master&#x2F;output&#x2F;t1_clustering_val&#x2F;energy_dist_&#39; + str(20) + &#39;.pkl&#39;)</code></pre><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h1><p>1、查看服务器CUDA版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvcc -V</code></pre><p><img src="https://img.promefire.top/blog-img/20240110-82f1d3087121c54644e1db5e7863b905.png" alt="img"></p><p>2、创建虚拟环境报错了！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CommandNotFoundError: Your shell has not been properly configured to use &#39;conda deactivate&#39;.To initialize your shell, run    $ conda init &lt;SHELL_NAME&gt;</code></pre><p>解决：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda init bash</code></pre><p>3、<a href="https://pjreddie.com/projects/pascal-voc-dataset-mirror/">Pascal VOC Dataset Mirror</a></p><p>4、查看torch版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&gt;&gt;&gt; import torch&gt;&gt;&gt; torch.__version__&#39;1.12.1&#39;</code></pre><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考：</h2><p>[OWOD复现过程总结_wangyanhuaa的博客-CSDN博客](<a href="https://blog.csdn.net/wangyanhuaa/article/details/129970265#:~:text=detectron2%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F%E5%90%8E%E5%8D%B3%E5%8F%AF%E5%A4%8D%E7%8E%B0OWOD">https://blog.csdn.net/wangyanhuaa/article/details/129970265#:~:text=detectron2搭建成功后即可复现OWOD</a> 1.下载OWOD代码。 2. 进入项目文件夹（cd OWOD-master）,，激活环境，输入语句配置detectron python <a href="http://setup.py">setup.py</a> build develop)</p><p><a href="https://blog.csdn.net/m0_64720568/article/details/129802880?spm=1001.2014.3001.5502">Ubuntu下配置detectron2_于大宝0626的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> Python </tag>
            
            <tag> 目标检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>城市点亮--天津</title>
      <link href="//post/cheng-shi-dian-liang-tian-jin.html"/>
      <url>//post/cheng-shi-dian-liang-tian-jin.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 六月七八，正是高考好时节，😄出发前看了一眼天气预报，大晴天! 冲冲冲！<br><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 历经一个半小时，在将近十点的时候，终于到站了！大概是工作日的原因，路上行人三三两两，很是空旷。<p><img src="https://img.promefire.top/blog-img/20240115-cb2618882c7f6d634935e120dbd96f6a.jpg" alt></p><p><img src="https://img.promefire.top/blog-img/20240115-0b93740fa31da32bd0cf879032627658.jpg" alt="沿途风景"></p><h2 id="妈祖文化园"><a class="markdownIt-Anchor" href="#妈祖文化园"></a> 妈祖文化园</h2><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 本来打算坐公交的，关哥提议共享电驴直达妈祖像，整！骑了一个小时，越往东骑，城市的人和车越少，不愧是”新“城。破电驴有毛病，戴上头盔后它检测不到，一直提醒我头盔没带好，头盔检测系统真垃圾啊，最要命的是等完红灯，就不给电了。一开始以为是放头盔的篮子里有压力检测，最后发现检测点在头盔上，把头盔往上提一下就完事。<blockquote><p>妈祖，亦称“天妃”“天后”，俗称“海神娘娘”，是传说中掌管海上航运的女神。</p><p>妈祖，原名林默  ，公元960年三月廿三出生于福建莆田，公元987年九月初九，因救助渔民而不幸遇难，年仅28岁</p><p>父母信佛，梦观音赐药而生之。八岁从师，十岁信佛，十三岁习法术。宋雍熙四年（公元987年）盛装登山石“升天”为神。当地居民于清康熙三十三年（1694年）立庙奉祀，称“通贤灵女” 。宋元明清历代均有褒封，清封“天上圣母”。</p></blockquote><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 没想到在北方的天津，会有妈祖文化园与妈祖像，照理说应该东南沿海信奉的人会多。妈祖文化园这一片地区据说全是填海造陆来的，大工程。里面除了高达42米妈祖圣像，其他的房屋建筑感觉一般般┑(￣Д ￣)┍。<p><img src="https://img.promefire.top/blog-img/20240115-ae2e089546ff254889e7f512ca70e2c6.jpg" alt></p><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> &nbsp; 妈祖像东临渤海，翻过堤坝，土生土长的内陆人第一次见到大海,海浪的声音听着让人安静。听我天津的朋友说，看海最好是在往北的秦皇岛北戴河，下次一定！<p>是大海！</p><p><img src="https://img.promefire.top/blog-img/20240115-44c2a00f115d48b440da1216a393f5af.jpg" alt="是大海！！"></p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=954746725&bvid=BV1RW4y1D7Mw&cid=1161434252&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"> </iframe></div><p>镜头捕捉到的海鸟</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=529707372&bvid=BV1Du411Y7tB&cid=1161446244&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"> </iframe></div><h2 id="国家海洋博物馆"><a class="markdownIt-Anchor" href="#国家海洋博物馆"></a> 国家海洋博物馆</h2><blockquote>  <html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 国家海洋博物馆（National Maritime Museum of China），位于天津市滨海新区中新天津生态城中新天津生态城)滨海旅游区荣盛路与海轩道交口,由国家自然资源部与天津市人民政府共建共管，集收藏、展示、研究、教育于一体的中国唯一国家级综合性海洋博物馆。2019年5月1日，国家海洋博物馆对外开放试运营，也是全世界规模最大的海洋博物馆</blockquote><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 逛完妈祖文化园，电驴直达海博馆，唯一可惜的当日风不大，没有扑面的海风。<html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 海洋博物馆的造型还是很有特点的，三层的博物馆由四翼组成，每一翼都有一个海洋主题：古老的海洋、今日的海洋、发现之旅和恐龙年代。博物馆共有六个展区和15个相互贯通的展览大厅。<p>海博造型</p><p><img src="https://img.promefire.top/blog-img/20240115-3ad7515af3c9262b638ecbff967beaa0.jpg" alt></p><p>海博外</p><p><img src="https://img.promefire.top/blog-img/20240115-f1059867e96bdf6796a4f81404c86fbc.jpg" alt></p><p>一些展厅</p><p><img src="https://img.promefire.top/blog-img/20240115-498a7fe8e9e63d6f3730245198b3b9ac.jpg" alt></p><p>虽然是海洋博物馆，但里面的动物标本熟料好多好多</p><p><img src="https://img.promefire.top/blog-img/20240115-02cdb782e2f29486d2ba6ec55d933c4c.jpg" alt></p><p>大象！</p><p><img src="https://img.promefire.top/blog-img/20240115-c927f77676c52bf962a70ce3268b6f09.jpg" alt="动物标本2"></p><blockquote>  <html>  &nbsp; &nbsp; &nbsp; &nbsp; </html> 菊石亚纲动物是已绝灭的海生无脊椎动物，生存于中奥陶纪至晚白垩纪，因它的表面通常具有类似菊花的线纹而得名。有关菊石动物的知识主要来自保存为化石的菊石壳体和口盖以及通过对菊石在地层中的分布和保存状态的观察并基于与现代海洋中生活的鹦鹉螺属的对比而获得。</blockquote><p>菊石，虽然名字里有个石，但是是动物</p><p><img src="https://img.promefire.top/blog-img/20240115-63581cb1a36ffc7bbd484952255914fc.jpg" alt="化石标本"></p><p>出口处悬挂着一条塞满垃圾的海豚，保护环境？保护海洋？雀氏！</p><p><img src="https://img.promefire.top/blog-img/20240115-8dc09f7f384525c63091ee7c5c656bfc.JPG" alt="IMG_1383"></p><h2 id="天津之眼"><a class="markdownIt-Anchor" href="#天津之眼"></a> 天津之眼</h2><html>  &nbsp; &nbsp; &nbsp; &nbsp; </html> 去天津，怎么能不去天津之眼，去的路上离得远，以为是摩天轮没在转，怀疑是不是人不多，到了跟前发现人挤人排得满满当当的长队，甚至在美团上连票都买不到了，为我之前愚蠢的想法感到惭愧。这次没坐成，下次一定。<br><html>  &nbsp; &nbsp; &nbsp; &nbsp; </html> 天津之眼跨海河连接河北区与红桥区，两岸行人熙熙攘攘，游客居多，也有当地人饭后睡前消食散步，而每隔三五米必有一位老大爷闲来垂钓海河上，装备都挺齐全，不过沿东岸走着一圈，只发现一人桶里有收获Σ(っ °Д °;)っ。河上游船来来往往，载着游客往返，欣赏两岸风景，游船灯光耀眼，亦是我的风景。<blockquote>  <html>  &nbsp; &nbsp; &nbsp; &nbsp; </html> 摩天轮直径为110米，轮外装挂48个360度透明座舱，每个座舱可乘坐8个人，可同时供384个人观光。摩天轮旋转一周所需时间为28分钟，到达最高处时，周边景色一览无余，甚至能看到方圆40公里以内的景致，被誉为“天津之眼”。</blockquote><p><img src="https://img.promefire.top/blog-img/20240115-1fd1cec8a317e4c6f456b447b862de29.jpg" alt="天津之眼2"></p><p>沿岸风景</p><p><img src="https://img.promefire.top/blog-img/20240115-c636bf586e50b5b5842fb9097324561a.jpg" alt="12"></p><p>不愧是关哥的广角👍</p><p><img src="https://img.promefire.top/blog-img/20240115-c1e4d76aad2b87c74ddc9f9f47d71aea.jpg" alt="天津之眼"></p><h2 id="世纪钟"><a class="markdownIt-Anchor" href="#世纪钟"></a> 世纪钟</h2><blockquote><p><strong>天津世纪钟</strong>是<a href="https://www.wikiwand.com/zh/%E5%A4%A9%E6%B4%A5%E5%B8%82%E4%BA%BA%E6%B0%91%E6%94%BF%E5%BA%9C">天津市人民政府</a>为迎接二十一世纪于2000年12月25日建立的大型城市雕塑，坐落于<a href="https://www.wikiwand.com/zh/%E6%B2%B3%E5%8C%97%E5%8C%BA">河北区</a><a href="https://www.wikiwand.com/zh/%E8%A7%A3%E6%94%BE%E6%A1%A5_(%E5%A4%A9%E6%B4%A5)">解放桥</a>桥头。天津世纪钟由全金属材料构筑而成，建筑高四十米，重一百七十余吨，在钟表面的外环和内环之间镶嵌着<a href="https://www.wikiwand.com/zh/%E5%8D%81%E4%BA%8C%E6%98%9F%E5%BA%A7">十二星座</a>的青铜浮雕。<a href="https://baike.baidu.com/item/%E7%99%BD%E7%BE%8A%E5%BA%A7/2151709?fromModule=lemma_inlink">白羊座</a>放在顶端12点的部分，因为羊在中国代表吉祥；将<a href="https://baike.baidu.com/item/%E5%A4%A9%E7%A7%A4%E5%BA%A7/2609891?fromModule=lemma_inlink">天秤座</a>放在最下部6点的部位，因为秤代表公平。这些都体现了把外来的文化在排列上与<a href="https://baike.baidu.com/item/%E6%9C%AC%E5%9C%9F%E6%96%87%E5%8C%96/5110998?fromModule=lemma_inlink">本土文化</a>相融合的观念。</p></blockquote><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 当时没注意，原来两个摆分别是太阳和月亮，上摆太阳，下摆月亮。~~就是不知道这个钟会不会整点报时~~ ，会整点报时，每天第一次报时放的还是东方红，可惜不是整点去的，没听到。而且因为是白天，没有看到夜光世纪钟。<p><img src="https://img.promefire.top/blog-img/20240115-41db0066b1b20d43603fafcbc03b3f47.jpg" alt></p><h2 id="梁启超故居"><a class="markdownIt-Anchor" href="#梁启超故居"></a> 梁启超故居</h2><blockquote><p>梁启超故居位于天津<a href="https://baike.baidu.hk/item/%E6%B2%B3%E5%8C%97%E5%8D%80">河北区</a><a href="https://baike.baidu.hk/item/%E6%B0%91%E6%97%8F%E8%B7%AF">民族路</a>44号 [1] ，<a href="https://baike.baidu.hk/item/%E9%A3%B2%E5%86%B0%E5%AE%A4">饮冰室</a>位于<a href="https://baike.baidu.hk/item/%E6%B2%B3%E5%8C%97%E8%B7%AF">河北路</a>46号。这两所住宅是民国初年梁启超购买<a href="https://baike.baidu.hk/item/%E5%91%A8%E5%9C%8B%E8%B3%A2">周国贤</a>旧意租界西马路空地所建。</p><p>民族路寓所为意式两层砖木结构楼房，建于1914年。主楼为水泥外墙，塑有花饰，异型红色瓦顶，石砌高台阶，建筑面积1121平方米；书斋&quot;饮冰室&quot;为浅灰色两层洋楼，建于1924年。首层为其书房，二楼做卧室和会客。梁启超后期著述均于此完成。&quot;饮冰室&quot;系意大利建筑师白<a href="https://baike.baidu.hk/item/%E7%BE%85%E5%B0%BC">罗尼</a>欧专为其设计，造型别致典雅。建筑面积949.50平方米</p></blockquote><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 大名鼎鼎的饮冰室就在这里，公车上书、戊戌变法，再到清末民国，伟人的书房。不得不说，小洋楼就是气派。<p><img src="https://img.promefire.top/blog-img/20240115-0b8d61c2e567707bb84a068ff5e9463f.jpg" alt="梁启超纪念馆"></p><h2 id="五大道"><a class="markdownIt-Anchor" href="#五大道"></a> 五大道</h2><blockquote><p>五大道文化旅游区 [4] 是指<a href="https://baike.baidu.hk/item/%E6%88%90%E9%83%BD%E9%81%93/2376370">成都道</a>以南，<a href="https://baike.baidu.hk/item/%E9%A6%AC%E5%A0%B4%E9%81%93/8118122">马场道</a>以北，西康路以东，马场道与<a href="https://baike.baidu.hk/item/%E5%8D%97%E4%BA%AC%E8%B7%AF/5884512">南京路</a>交口以西的一片长方形区域 [11] ，是迄今<a href="https://baike.baidu.hk/item/%E5%A4%A9%E6%B4%A5/132308">天津</a>乃至中国保留最为完整的<a href="https://baike.baidu.hk/item/%E6%B4%8B%E6%A8%93/10793097">洋楼</a>建筑群，天津人把它称作“五大道”。 [8]</p><p>五大道地区拥有20世纪二三十年代建成的具有不同国家<a href="https://baike.baidu.hk/item/%E5%BB%BA%E7%AF%89%E9%A2%A8%E6%A0%BC/5350817">建筑风格</a>的花园式房屋2000多所，建筑面积达到100多万平方米。其中最具典型的300余幢风貌建筑中，英式建筑89所、意式建筑41所、<a href="https://baike.baidu.hk/item/%E6%B3%95%E5%BC%8F%E5%BB%BA%E7%AF%89/1435611">法式建筑</a>6所、德式建筑4所、西班牙式建筑3所，还有众多的文艺复兴式建筑、<a href="https://baike.baidu.hk/item/%E5%8F%A4%E5%85%B8%E4%B8%BB%E7%BE%A9%E5%BB%BA%E7%AF%89/5336501">古典主义建筑</a>、<a href="https://baike.baidu.hk/item/%E6%8A%98%E8%A1%B7%E4%B8%BB%E7%BE%A9%E5%BB%BA%E7%AF%89/283411">折衷主义建筑</a>、<a href="https://baike.baidu.hk/item/%E5%B7%B4%E6%B4%9B%E5%85%8B%E5%BC%8F%E5%BB%BA%E7%AF%89/585484">巴洛克式建筑</a>、庭院式建筑以及中西合璧式建筑等，被誉为“万国建筑博览馆”。</p></blockquote><html> &nbsp; &nbsp; &nbsp; &nbsp; </html>“汉唐看西安，明清看北京，近代百年看天津”五大道保留了近百年的好多建筑，但大部分洋楼洋房都出租了，挂牌写着公司、学校、商店什么什么的，不能进去参观。张爱玲的旧居竟然成了卖饮品的，名字还叫“爱玲咖啡”，牛逼哦。中途25/人坐了游览车，沿几条道转了一圈，严重怀疑根本没到30-40分钟，血亏。还有一种是观光游览马车，跑机动车的路上也有跑马车的，不过有点小贵。听说这里的房价20w/m^2,十平米的小屋就要二百万！！，赶上北京一环房价了，可怕。有好多以省份、城市命名的街道，在一条小巷子里找到了落满灰尘的山西路路标。路上看到一台彩票自动贩卖机，小赌怡情，买了一张十块的，中了二十，新人光环。<p><img src="https://img.promefire.top/blog-img/20240115-ed78f2a17e31242b60eaa054653f34ce.jpg" alt></p><p><img src="https://img.promefire.top/blog-img/20240115-23833d4a2d9d4c42474db0c824cd6f7e.jpg" alt="五大道2"></p><p>天津的古文化街，看到了泥人张的招牌，可惜没开门</p><p><img src="https://img.promefire.top/blog-img/20240115-af7196ee39421e57f2b99b840dea218c.jpg" alt="天津古文化街"></p><h2 id="张学良故居-津沽旧事"><a class="markdownIt-Anchor" href="#张学良故居-津沽旧事"></a> 张学良故居 + 津沽旧事</h2><blockquote>  <html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 张学良旧宅以张作霖五夫人张寿懿的名义购自法国驻天津领事馆。张学良在1920年代至1930年代来天津常住此处。1949年之后，由张寿懿之子张学铨出租管理。1956年，该建筑交由中华人民共和国国家经营。后来曾辟为少帅府大酒楼。<br>  <html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 张学良旧宅建筑面积1270．4平方米。建筑总面积1401．65平方米，总占地面积1．495市亩。有前后两幢楼房，均为砖木结构，共有楼房42间，前楼为三层带地下室，建于1921年；后楼为二层，建于1926年。前楼正面二至三层设有平台，并且层层向后退缩，外立面的柱子、栏杆、柱墩上饰雕有花盆，是一所西洋集仿式楼房</blockquote><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 1924-1931七年间，张学良和赵四小姐生活在天津。1928年，皇姑屯事件，张作霖逝世，张学良接掌东北大权，“改旗易帜”，和苏军打仗都发生在这个期间，天津少帅府的作战室还是很重要的。一楼有一架琴键全是象牙制成的钢琴，太奢侈了！在维基百科上详细了解了一下张学良的生平，不得不说是乱世出英雄，初掌大权平息奉系内不服声音，主张停止内战联合抗日。可惜张学良只有前半生，后半生都被囚禁在了台湾。<p><img src="https://img.promefire.top/blog-img/20240115-9ab7a40763bd7d94dd3ea0d931abe051.jpg" alt="张学良故居3"></p><p><img src="https://img.promefire.top/blog-img/20240115-7cc4004285e14a4333248d4e7d72fdbf.jpg" alt></p><blockquote><p>津城芳华已百年，</p><p>沽上绝代一梦还。</p><p>旧时九河无双地，</p><p>事过凝香烟云间。</p>  <html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 依托旧居原貌，建立“津沽旧事”沉浸式剧游街区，讲述天津百年商业、社会生活。穿越百年时光，回到20年代的天津，在这里可以看一看皇宫歌舞厅昔日的辉煌、逛一逛商会俱乐部、看一看仙宫理发店、鹤竹堂药铺、春和戏院……给我瞬间，还你百年。</blockquote><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 张学良故居旁边就是仿天津旧居建的“津沽旧事”沉浸式剧游街区，很有民国电影的风味，建筑风格、室内装饰、舞厅、警察局什么什么的，都很还原，还有说相声的两小伙。<p><img src="https://img.promefire.top/blog-img/20240115-53712d62bdd410d66158a9563a0c0ab5.jpg" alt="津沽旧事"></p><h2 id="瓷房子博物馆"><a class="markdownIt-Anchor" href="#瓷房子博物馆"></a> 瓷房子博物馆</h2><blockquote>  <html> &nbsp; &nbsp; &nbsp; &nbsp; </html>瓷房子位于天津市和平区赤峰道72号（近和平路商业街），是一个用古瓷器修建而成的法式洋楼。瓷房子一共有4层楼，整栋房子从里到外，除了地面是大理石铺的以外，能看到的地方都嵌上了瓷片，就连墙上也是用瓷片拼贴而成的画作。 [3]   <html> &nbsp; &nbsp; &nbsp; &nbsp; </html>瓷房子整个楼房修建一共用了7亿多片古瓷片，13000多件古瓷瓶、瓷盘、瓷碗，300多尊历代的石雕造像，300多件汉白玉石狮子，300多个明清时期的瓷猫枕，20多吨的水晶玛瑙等，它被称为一座价值连城的“中国古瓷博物馆”。</blockquote><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 从里到外，都是瓷器！大工程，实实在在的用瓷器修建的房子，网上搜了一下之前瓷房子屋顶上有一条瓷龙，貌似是已经不见了。瓷房子有四楼，扶梯蜿蜒而上，楼梯墙面都有一幅瓷器构成的名家画作，中央有一天井，不过已经是拉上了网，更有多尊石雕佛像，琳琅满目。几乎没有尊佛像前都有一堆纸币和烟，更有甚者还将烟别再了佛像耳朵上！<p><img src="https://img.promefire.top/blog-img/20240115-ce6531bb3276c28582d8dbb9ff2a2686.jpg" alt="瓷房子"></p><h2 id="天塔"><a class="markdownIt-Anchor" href="#天塔"></a> 天塔</h2><blockquote>  <html> &nbsp; &nbsp; &nbsp; &nbsp; </html>天津广播电视塔，又称天塔，为天津市电视调频广播发射中心，坐落于于天津市河西区卫津南路1号，始建于1988年6月5日，历时3年4个月，建高338米，1991年10月1日竣工时是亚洲第一高塔。天津广播电视塔建设总投资17,500万元，占地面积22公顷，建筑面积11500平方米，塔尖高415.2米，重4万余吨。截至2018年6月，天塔是中国第三高塔和世界第七高塔。天塔周围的22公顷水面名为「天塔湖」。天津天塔湖风景区被评为中国国家4A级旅游景区。天津广播电视塔也被誉为津门十景的「天塔旋云」。</blockquote><html> &nbsp; &nbsp; &nbsp; &nbsp; </html> 最后去了天塔，出了地铁站刚走到天塔下，天气就开始不对劲起来了，一边的晴天，一边是狂风+沙尘暴，快溜，下次一定。<p><img src="https://img.promefire.top/blog-img/20240115-7f60eedfd68a5bc63e1e5f8d1a51b7ed.JPG" alt="IMG_1650"></p><p><s>73M</s> 23.5M的gif，严重拖慢编译速度！</p><p><img src="https://img.promefire.top/blog-img/20240116-f78c3c2b62f994d9bdb36e6e1d27d71a.gif" alt="天塔-min"></p><h2 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h2><ul><li>天津给人最直观的感受就是发达，这才叫高楼大厦，不愧是直辖市。</li><li>滨海西和天津西离得是真远，地铁上睡了一觉还没到，第一次见到地上地铁，天津十条地铁线，地下交错搬到地上，恒河里。</li><li>这次去没见着沙滩，拖鞋白带了，不过第一次看到了海，大海啊！</li></ul><p><img src="https://img.promefire.top/blog-img/20240115-f20d9af5956063481c08b43085b45036.png" alt="高建筑"></p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
          <category> 旅行记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
            <tag> 城市 </tag>
            
            <tag> 摄影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unity-ruby大冒险</title>
      <link href="//post/unity-bi-ji.html"/>
      <url>//post/unity-bi-ji.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>三天时间跟着B站教程终于把入门小游戏做完了！可喜可贺！记一下笔记</p><p>贴上B站教程：</p><p><a href="https://www.bilibili.com/video/BV1V4411W787/?spm_id_from=333.337.search-card.all.click">Ruby大冒险</a></p><hr><ul><li>切记一点：不要再场景运行时后进行修改，一定要关了之后再修改</li></ul><p>1、在人物属性刚体界面冻结Z轴旋转，可以使人物刚体碰撞时不旋转</p><p><img src="https://img.promefire.top/blog-img/20240110-518bcbf3446c71a0f30107eae80da5cf.png" alt="image-20230602103837705"></p><p>2、碰撞抖动问题</p><p>要使用刚体更新位置</p><p>3、相机跟随</p><p>窗口–&gt;包管理器—&gt;包：Unity注册表—&gt;cinemachine. 安装完成后可以在菜单游戏对象中找到。创建一个2d cinema</p><p>4、设置水面不能走</p><p>将除水面的其他tile右侧的碰撞器类型设置为无</p><p><img src="https://img.promefire.top/blog-img/20240110-6b7d1714d03da94ec2a23a1d38642fcd.png" alt="image-20230602111828620"></p><p>5、合并一些碰撞格</p><p>给tilemap添加组件 Composite Collider 2D,</p><p>在由复合使用上打勾</p><p><img src="https://img.promefire.top/blog-img/20240110-e7b9fb558d0a2063087fc7b8865d6a9b.png" alt="image-20230602112421994"></p><ul><li>记得要在地图的Rigibody 2D中把重力关掉（只关这一个没用），把地图刚体设置为静态</li></ul><p><img src="https://img.promefire.top/blog-img/20240110-fb841344318cffe5e9f4d3e5dbf4e201.png" alt="image-20230602112659463"></p><p>6、取消地图边界外视野</p><p>相机属性里添加一个cinemachineConfiner</p><p><img src="https://img.promefire.top/blog-img/20240110-30df5777989ae988596a8c652705526e.png" alt="image-20230602112830954"></p><p>新建一个CameraConfiner</p><p><img src="https://img.promefire.top/blog-img/20240110-e417887ddbaa6df0860b668e94762e3f.png" alt="image-20230602113021563"></p><p>属性里添加一个可编程的碰撞体</p><p><img src="/post/unity-bi-ji/image-20230602113218724.png" alt="image-20230602113218724"></p><p>点击编辑碰撞器，框出边界</p><p>只是触发，要不然会和人物产生碰撞</p><p><img src="https://img.promefire.top/blog-img/20240110-18556ff956efaa5fd3c27f9fecc9e2ec.png" alt="image-20230602113519684"></p><ul><li>要把新建成的CameraConfiner拖动到2D相机的Bounding Shape 2D，要把框好的边界赋给相机，要不然就只是一个文件</li></ul><p>7、使用math函数时，直接添加了<code>using System;</code>添加``using System.Math`会报错，不晓得什么情况</p><p>8、预置体，树木、草莓等元素设置好脚本和碰撞体积以后，想要批量复制，就用到了预置体，再Assets下新建一个prefabs文件夹，将做好的元素放入其中，如果变蓝了就说明已经是预置体了</p><p>9、</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#是进入有伤害void OnTriggerEnter2D(Collider2D other)&#123;&#125;#呆在区域内一直有伤害void OnTriggerStay2D(Collider2D other)&#123;&#125;</code></pre><p>10、</p><p>报错：[ AnimationEvent has no function name specified!</p><p>在动画编辑器中添加了动画事件但没有进行后续处理，删除即可</p><p><img src="https://img.promefire.top/blog-img/20240110-b4dbe3d241499fb18a0373a5cd6d7733.png" alt="image-20230604112938771"></p><p>11、图层之间不希望碰撞，在项目设置–&gt; 2d物理中把√去掉</p><p><img src="https://img.promefire.top/blog-img/20240110-e342164fc5e8b937cc2c2034291a293e.png" alt="image-20230604140038562"></p><p>12、</p><p>在对象刚生成的时候就会执行Awake方法，在start方法之前执行。</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">Void Awake()&#123;&#125;</code></pre><p>发射子弹的时候，不能用start()方法</p><p>13、</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Destroy(this.gameObject,2f);</code></pre><p>参数： 要销毁的游戏对象，经过多长时间销毁。</p><p>14、</p><p>这个不行</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">EnemyController ec &#x3D; other.GetComponent&lt;EnemyController&gt;();</code></pre><p>要加一个gameObject</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">EnemyController ec &#x3D; other.gameObject.GetComponent&lt;EnemyController&gt;();</code></pre><p>15、</p><p>启动特定动画</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">private Animator anim;&#x2F;&#x2F;获取动画组件void Start()    &#123;        .        .        .        anim &#x3D; GetComponent&lt;Animator&gt;();    &#125;void something()&#123;    anim.SetTrigger(&quot;Launch&quot;);&#125;</code></pre><p>16、特效</p><p><img src="https://img.promefire.top/blog-img/20240110-bc407720c1f1a380bb3ce8b6c2ff6324.png" alt="image-20230604144025643"></p><p>0-2可以在两张贴图中随机</p><p><img src="https://img.promefire.top/blog-img/20240110-2dde14aa2aac267f015d182ad99ac318.png" alt="image-20230604143959187"></p><p>生命周期颜色，烟冒到上面会变淡</p><p><img src="https://img.promefire.top/blog-img/20240110-bdf40630f7a6913a350c9084637f4c68.png" alt="image-20230604144837441"></p><p>打败敌人后，停止特效</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public ParticleSystem brokenEffect;&#x2F;&#x2F;获取特效组件public void Fixed()&#123;    .       .           if(brokenEffect.isPlaying &#x3D;&#x3D; true)&#123;           brokenEffect.Stop();       &#125;    .       .   &#125;</code></pre><p><img src="https://img.promefire.top/blog-img/20240110-1eda2b8012da3d8aa95495cc17aabd61.png" alt="image-20230604145736865"></p><p>17、画布</p><p><img src="https://img.promefire.top/blog-img/20240110-dff000b023ed07e93095ceacb5cdfaf8.png" alt="image-20230604154233728"></p><p>18、音乐组件<code>Audio source</code></p><p>19、离敌人远声音小，声音改成3D，最大距离改小</p><p><img src="https://img.promefire.top/blog-img/20240110-c780ffcb7294ef963acf8328d4c39db5.png" alt="image-20230605093848619"></p><p>20、UImanager中Text组件托不上去</p><p>原因是组件类型是Text TMP，而代码中是Text，把代码改成:</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using TMPro;public TMP_Text progressText;</code></pre><p>21、地图编辑</p><p>窗口—》2d–》平铺调色板</p><p>22、</p><p>vscode代码补全问题<a href="https://blog.csdn.net/G0rgeoustray/article/details/106754628">https://blog.csdn.net/G0rgeoustray/article/details/106754628</a></p><p>23、射线检测</p><p>射线未能检测到碰撞体：最终发现问题是由于使用了错误的<code>Physics.Raycast</code>方法而不是<code>Physics2D.Raycast</code>。由于你的游戏对象是2D的，因此需要使用2D版本的射线检测方法。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">foreach (Vector3 direction in directions)   &#123;       RaycastHit2D[] hits &#x3D; Physics2D.RaycastAll(explosionPosition, direction, power);           Debug.DrawRay(explosionPosition, direction * power, Color.red, 1f); &#x2F;&#x2F; 打印射线起始点和终点           foreach (RaycastHit2D hit in hits)           &#123;               if (hit.collider.CompareTag(&quot;iceCube&quot;))               &#123;                   Debug.Log(&quot;有冰块！！！&quot;);                   Destroy(hit.collider.gameObject);               &#125;           &#125;&#125;</code></pre><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码：</h2><p>1、PlayController.cs</p><ul><li>玩家</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System.Collections;using System.Collections.Generic;using UnityEngine;using System;public class PlayerController : MonoBehaviour&#123;    &#x2F;&#x2F; Start is called before the first frame update    public float speed &#x3D; 5f;    private int maxHealth &#x3D; 5;    private int currentHealth ;    &#x2F;&#x2F;玩家的朝向    private   Vector2 lookDirection &#x3D; new Vector2(1,0);&#x2F;&#x2F;默认朝右      Rigidbody2D rbody;&#x2F;&#x2F;刚体组件    public int MyMaxHealth&#123;get &#123;return maxHealth;&#125;&#125;    public int MyCurrentHealth&#123;get&#123;return currentHealth;&#125;&#125;    private float invincibleTime &#x3D; 2f;&#x2F;&#x2F;无敌时间2秒    private float invincibleTimer;&#x2F;&#x2F;无敌计时器    private bool isInvincible;&#x2F;&#x2F;是否无敌    private Animator anim;&#x2F;&#x2F;获取动画组件    public GameObject bulletPrefab;    &#x2F;&#x2F;音效    public AudioClip hitClip; &#x2F;&#x2F;受伤    public AudioClip bulletClip;    public int curBulletCount;    public int maxBulletCount &#x3D; 99;    void Start()    &#123;        rbody &#x3D; GetComponent&lt;Rigidbody2D&gt;();        invincibleTimer &#x3D; 0;        currentHealth &#x3D; maxHealth;        curBulletCount  &#x3D; 2;        anim &#x3D; GetComponent&lt;Animator&gt;();        UImanager.instance.UpdateHealthBar(currentHealth,maxHealth);&#x2F;&#x2F;更新血条        UImanager.instance.UpdateBulletCount(curBulletCount,maxBulletCount);    &#125;    &#x2F;&#x2F; Update is called once per frame    void Update()    &#123;        &#x2F;&#x2F; transform.Translate(transform.right * speed * Time.deltaTime);        float moveX &#x3D; Input.GetAxisRaw(&quot;Horizontal&quot;);&#x2F;&#x2F;控制水平        float moveY &#x3D; Input.GetAxisRaw(&quot;Vertical&quot;);&#x2F;&#x2F;W:1,S:-1;        &#x2F;&#x2F;        Vector2 moveVector &#x3D; new Vector2(moveX,moveY);        if(moveVector.x !&#x3D; 0 || moveVector.y !&#x3D; 0 )&#123;            lookDirection &#x3D; moveVector;        &#125;        anim.SetFloat(&quot;Look X&quot;,lookDirection.x);        anim.SetFloat(&quot;Look Y&quot;,lookDirection.y);        anim.SetFloat(&quot;Speed&quot;,moveVector.magnitude);&#x2F;&#x2F;取向量长度                &#x2F;&#x2F;移动        Vector2 position &#x3D; rbody.position;        &#x2F;&#x2F; position.x +&#x3D; moveX * speed * Time.deltaTime;        &#x2F;&#x2F; position.y +&#x3D; moveY * speed * Time.deltaTime;        &#x2F;&#x2F; transform.position &#x3D; position;  更新组件位置        position +&#x3D; moveVector * speed *Time.deltaTime;        rbody.MovePosition(position);&#x2F;&#x2F;更新刚体位置        &#x2F;&#x2F;无敌计时        if(isInvincible)&#123;        invincibleTimer -&#x3D; Time.deltaTime;        if(invincibleTimer &lt; 0)&#123;            isInvincible &#x3D; false;        &#125;    &#125;      &#x2F;&#x2F;按下J建进行攻击    if(Input.GetKeyDown(KeyCode.J) &amp;&amp; curBulletCount &gt; 0)&#123;        ChangeBulletCount(-1);        anim.SetTrigger(&quot;Launch&quot;);        GameObject bullet &#x3D; Instantiate(bulletPrefab,rbody.position + Vector2.up * 0.5f,Quaternion.identity);&#x2F;&#x2F;参数分别是对象、位置、方向（默认方向）        AudioManager.instance.AudioPlay(bulletClip);&#x2F;&#x2F;播放音效        BulletController bc &#x3D; bullet.GetComponent&lt;BulletController&gt;();        if(bc !&#x3D; null)&#123;            bc.move(lookDirection,300);                    &#125;    &#125;    &#x2F;&#x2F;按下E建与npc交互    if(Input.GetKeyDown(KeyCode.E))&#123;        RaycastHit2D hit &#x3D; Physics2D.Raycast(rbody.position,lookDirection,2f,LayerMask.GetMask(&quot;NPC&quot;));&#x2F;&#x2F;layerMask根据名字检测层级        if(hit.collider !&#x3D; null)&#123;            Debug.Log(&quot;hit npc!!&quot;);            NpcManager npc &#x3D; hit.collider.GetComponent&lt;NpcManager&gt;();            if(npc !&#x3D; null)&#123;                npc.show();            &#125;        &#125;    &#125;    &#125;    public void ChangeHealth(int amount)&#123;        &#x2F;&#x2F; 伤害是传入负值的，受到伤害，如果是无敌状态，就不进行伤害判定，反之，开启无敌状态        if(amount &lt; 0)&#123;            if(isInvincible)&#123;                return;            &#125;            anim.SetTrigger(&quot;Hit&quot;);            AudioManager.instance.AudioPlay(hitClip);&#x2F;&#x2F;播放音效            isInvincible &#x3D; true;            invincibleTimer &#x3D; invincibleTime;&#x2F;&#x2F;重置无敌时间                    &#125;        &#x2F;&#x2F; 约束一下玩家生命值，0---max        currentHealth &#x3D; Math.Clamp(currentHealth + amount ,0,maxHealth);        UImanager.instance.UpdateHealthBar(currentHealth,maxHealth);&#x2F;&#x2F;更新血条        Debug.Log(currentHealth + &quot;&#x2F;&quot; + maxHealth);    &#125;    public void ChangeBulletCount(int amount)&#123;        curBulletCount &#x3D; Math.Clamp(curBulletCount + amount ,0,maxBulletCount);        UImanager.instance.UpdateBulletCount(curBulletCount,maxBulletCount);    &#125;&#125;</code></pre><p>2、EnemyController.cs</p><ul><li>敌人相关</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System.Collections;using System.Collections.Generic;using UnityEngine;using System;public class EnemyController : MonoBehaviour&#123;    public int speed &#x3D; 3;    public float changeDirectionTime &#x3D; 2f;&#x2F;&#x2F;改变方向的时间。    public float changeTimer;&#x2F;&#x2F;改变方向的计时器     private int Health &#x3D; 5;    public int getHealth&#123;get &#123;return Health;&#125;&#125;    private bool isDead;    public ParticleSystem brokenEffect;&#x2F;&#x2F;获取特效组件    &#x2F;&#x2F; private Health;    private Rigidbody2D rbody;    public bool isVertical;    private Vector2 moveDirection;    private Animator anim;&#x2F;&#x2F;获取动画组件    public AudioClip robotFixedClip;    &#x2F;&#x2F; public AudioClip robotWalkClip;    &#x2F;&#x2F; Start is called before the first frame update    void Start()    &#123;        rbody &#x3D; GetComponent&lt;Rigidbody2D&gt;();        anim &#x3D; GetComponent&lt;Animator&gt;();        moveDirection &#x3D; isVertical ? Vector2.up : Vector2.right;        changeTimer &#x3D; changeDirectionTime;        isDead &#x3D; false;                &#125;    &#x2F;&#x2F; Update is called once per frame    void Update()    &#123;        if(isDead)&#123;return;&#125;&#x2F;&#x2F;挂了就别移动了        changeTimer -&#x3D; Time.deltaTime;        if(changeTimer &lt; 0)&#123;            moveDirection *&#x3D; -1;            changeTimer &#x3D; changeDirectionTime;        &#125;        Vector2 position &#x3D; rbody.position;        position.x +&#x3D; moveDirection.x * speed * Time.deltaTime;        position.y +&#x3D; moveDirection.y * speed * Time.deltaTime;        rbody.MovePosition(position);        anim.SetFloat(&quot;moveX&quot;,moveDirection.x);        anim.SetFloat(&quot;moveY&quot;,moveDirection.y);    &#125;    &#x2F;&#x2F;怪物掉血    public void ChangeHealth(int amount)&#123;        Health &#x3D; Math.Clamp(Health + amount ,0,Health);        if(Health &#x3D;&#x3D; 0)&#123;            Fixed();            Destroy(this.gameObject,3f);        &#125;        Debug.Log(Health);    &#125;    &#x2F;&#x2F;播放死亡动画    public void Fixed()&#123;        isDead &#x3D; true;        if(brokenEffect.isPlaying &#x3D;&#x3D; true)&#123;            brokenEffect.Stop();        &#125;        AudioManager.instance.AudioPlay(robotFixedClip);&#x2F;&#x2F;播放音效        &#x2F;&#x2F;死了就没碰撞掉血了        rbody.simulated &#x3D; false;        anim.SetTrigger(&quot;fix&quot;);    &#125;        private void OnCollisionEnter2D(Collision2D other) &#123;        PlayerController pc &#x3D; other.gameObject.GetComponent&lt;PlayerController&gt;();        if(pc !&#x3D; null)&#123;            pc.ChangeHealth(-1);        &#125;    &#125;&#125;</code></pre><p>3、Collectible.cs</p><ul><li>草莓</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using static System.Console;using System.Collections;using System.Collections.Generic;using UnityEngine;using System;&#x2F;&#x2F; using System.Math;public class Collectible : MonoBehaviour&#123;        public ParticleSystem collectEffect;    public AudioClip collectClip;    &#x2F;&#x2F; Start is called before the first frame update    void Start()    &#123;            &#125;    &#x2F;&#x2F; Update is called once per frame    void Update()    &#123;            &#125;    &#x2F;&#x2F; 碰撞检测相关类    &#x2F;&#x2F; &lt;param name&#x3D;&quot;other&quot;&gt;&lt;&#x2F;param&gt;    void OnTriggerEnter2D(Collider2D other)&#123;        &#x2F;&#x2F;检测一下与草莓碰撞的物体有没有挂载playercontroller脚本        PlayerController pc &#x3D; other.GetComponent&lt;PlayerController&gt;();        if(pc !&#x3D; null)&#123;            if(pc.MyCurrentHealth &lt; pc.MyMaxHealth)&#123;                        pc.ChangeHealth(1);                                  Instantiate(collectEffect,transform.position,Quaternion.identity);            AudioManager.instance.AudioPlay(collectClip);&#x2F;&#x2F;播放音效            Destroy(this.gameObject);            &#125;                        &#x2F;&#x2F; Debug.Log(&quot;玩家碰到草莓&quot;);        &#125;    &#125;&#125;</code></pre><p>4、BulletController.cs</p><ul><li>子弹相关</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System.Collections;using System.Collections.Generic;using UnityEngine;public class BulletController : MonoBehaviour&#123;    Rigidbody2D rbody;        public AudioClip hitEnemyClip;    &#x2F;&#x2F; Start is called before the first frame update    void Awake()    &#123;        rbody &#x3D; GetComponent&lt;Rigidbody2D&gt;();        Destroy(this.gameObject,2f);    &#125;    &#x2F;&#x2F; Update is called once per frame    void Update()    &#123;            &#125;    public void move(Vector2 moveDirection,float moveForce)&#123;        rbody.AddForce(moveDirection * moveForce);&#x2F;&#x2F;施加一个移动方向的力    &#125;    private void OnCollisionEnter2D(Collision2D other) &#123;        EnemyController ec &#x3D; other.gameObject.GetComponent&lt;EnemyController&gt;();        if(ec !&#x3D; null)&#123;            ec.ChangeHealth(-1);                    &#125;        AudioManager.instance.AudioPlay(hitEnemyClip);&#x2F;&#x2F;播放音效        Destroy(this.gameObject);&#x2F;&#x2F;碰到就销毁            &#125; &#125;</code></pre><p>5、BulletBox.cs</p><ul><li>子弹袋</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System.Collections;using System.Collections.Generic;using UnityEngine;public class BulletBox : MonoBehaviour&#123;    public int bulletCount &#x3D; 10;    public ParticleSystem collectEffect;    public AudioClip collectClip;    &#x2F;&#x2F; Start is called before the first frame update    void Start()    &#123;            &#125;    &#x2F;&#x2F; Update is called once per frame    void Update()    &#123;            &#125;    void OnTriggerEnter2D(Collider2D other)&#123;        PlayerController pc &#x3D; other.GetComponent&lt;PlayerController&gt;();        if(pc !&#x3D; null)&#123;            if(pc.curBulletCount &lt; pc.maxBulletCount)&#123;            pc.ChangeBulletCount(bulletCount);            Instantiate(collectEffect,transform.position,Quaternion.identity);            &#x2F;&#x2F; AudioManager.instance.AudioPlay(collectClip);&#x2F;&#x2F;播放音效            Destroy(this.gameObject);        &#125;        &#125;    &#125;&#125;</code></pre><p>6、UImanager.cs</p><ul><li>UI界面（血条、子弹数量）</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.UI;using TMPro;public class UImanager : MonoBehaviour&#123;        public TMP_Text  bulletCountText;    public static UImanager instance&#123;get;  private set;&#125;    void Start()&#123;        instance &#x3D; this;    &#125;    public Image healthBar;&#x2F;&#x2F;角色血条    public void UpdateHealthBar(int curAmount,int maxAmount)&#123;        healthBar.fillAmount &#x3D; (float)curAmount &#x2F; (float)maxAmount;    &#125;    &#x2F;&#x2F;更新子弹数量文本    public void UpdateBulletCount(int curAmount,int maxAmount)&#123;        bulletCountText.text &#x3D; curAmount.ToString() + &quot; &#x2F; &quot; + maxAmount.ToString();    &#125;&#125;</code></pre><p>7、AudioManager.cs</p><ul><li>音效</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System.Collections;using System.Collections.Generic;using UnityEngine;public class AudioManager : MonoBehaviour&#123;    public static AudioManager instance &#123;get; private set;&#125;    private AudioSource audioS;    &#x2F;&#x2F; Start is called before the first frame update    void Start()    &#123;        instance &#x3D; this;        audioS &#x3D; GetComponent&lt;AudioSource&gt;();    &#125;    &#x2F;&#x2F; Update is called once per frame    void Update()    &#123;            &#125;    public void AudioPlay(AudioClip clip)&#123;        audioS.PlayOneShot(clip);    &#125;&#125;</code></pre><p>8、NpcManager.cs</p><ul><li>NPC对话框显示</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.UI;public class NpcManager : MonoBehaviour&#123;    public GameObject dialogImage;    public GameObject tipImage;    public float showTime &#x3D; 4f;    public float showTimer;&#x2F;&#x2F;计时器    &#x2F;&#x2F; Start is called before the first frame update    void Start()    &#123;        showTimer &#x3D; -1;        tipImage.SetActive(true);        dialogImage.SetActive(false);    &#125;    &#x2F;&#x2F; Update is called once per frame    void Update()    &#123;        showTimer -&#x3D; Time.deltaTime;        if(showTimer &lt; 0)&#123;            dialogImage.SetActive(false);            tipImage.SetActive(true);        &#125;    &#125;    &#x2F;&#x2F;显示对话框    public void show()&#123;        showTimer &#x3D; showTime;        tipImage.SetActive(false);        dialogImage.SetActive(true);    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 游戏开发 </category>
          
          <category> 编程开发 </category>
          
          <category> Unity开发 </category>
          
          <category> C#开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> C# </tag>
            
            <tag> 游戏编程 </tag>
            
            <tag> 2D游戏 </tag>
            
            <tag> 游戏设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>城市点亮---石家庄</title>
      <link href="//post/cheng-shi-dian-liang-shi-jia-zhuang.html"/>
      <url>//post/cheng-shi-dian-liang-shi-jia-zhuang.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​从保定到石家庄的列车，窗外多是平原耕地农田，明显的华北平原特征。而处于黄土高原的山西，视野中长久不变的是远方的群山。九点半和小伙伴在石家庄站汇合，离上一次见面已将近一年，天空下着点蒙蒙细雨，微风，有点冷，应该带件外套的。</p><p><img src="https://img.promefire.top/blog-img/20240115-103b24f9d43b2833e5602a26c8708fca.jpeg" alt="IMG_0929.jpeg"></p><p>​想着十点多吃午饭有点早，就找了家麦当劳准备点杯热咖啡，一开始点美式卡布奇诺，服务员说是咋咋然后做不了了，给我们换个其他咖啡+热牛奶，等了一会又说设备坏了做不了热的，大早上的喝冷牛奶着实不太行，准备退单走人了，到门口被服务员拉回来说不好意思啥啥的然后送了我们一人一杯美式咖啡。我就想说一开始第一次做不了的时候为什么不给我们换成这个最后送的这两杯咖啡呢。      <img src="https://img.promefire.top/blog-img/20240115-277d556fee18ea7611da7feca9a6aded.jpeg" alt="IMG_0939.jpeg"></p><p>​中午找了家潮汕牛肉火锅，不得不说潮汕的牛肉丸真的好吃，不是火锅丸能比的，其他倒也中规中矩，量也不多。话说潮汕地区有地方养牛吗，还是从其他地方买的<img src="https://img.promefire.top/blog-img/20240115-803b77afd90a6cf2d638e063b0a55e02.jpeg" alt="IMG_0942.jpeg">（正常店里这一大瓶就应该酸梅汤而不是醋）</p><p>商量了商量之后，决定奢侈一回，定了一间电竞电影房，三百三十块，确实贵。</p><p><img src="https://img.promefire.top/blog-img/20240115-acf886074c899057fb5e43a88c873f45.jpeg" alt="IMG_1038.jpeg"></p><p>​到店以后觉得emmm……有点小，翻相册发现没有拍全貌，电影是投影仪放的，总觉得有点糊，搜了一下投影仪的牌子至少是3000块的，不应该啊。最后设置里亮度拉满，其实也还行。电脑的配置是3070，听朋友说是垃圾键盘和鼠标，倒是电竞椅挺贵1000。新思路！我感觉可以在网吧跑代码，网吧的显卡配置杠杠的。</p><p><img src="https://img.promefire.top/blog-img/20240115-f29d4783832b5dcacf0156319d8ceb8a.jpeg" alt="IMG_0954.jpeg"></p><p><img src="https://img.promefire.top/blog-img/20240115-18da083eec0d1fc44e70ff5cf9170e80.jpeg" alt="IMG_0959.jpeg"></p><p>​晚上一点睡的觉，想着一觉睡到天亮，结果半夜4:50多被痒醒了，手掌上被咬了一个疙瘩，晚上窗户没关纱窗，直接拉了窗帘。然后又醒了好几次，没睡好，呜呜呜。</p><p>看美团上是全天都能进入，两点多来的时候排了这么长的队<br><img src="https://img.promefire.top/blog-img/20240115-5359a88a1c3467fecec3a3425cd7fe6f.jpeg" alt="IMG_0974.jpeg"></p><h1 id="河北博物馆"><a class="markdownIt-Anchor" href="#河北博物馆"></a> 河北博物馆</h1><p>博物馆分北区和南区，一开始去了北区，空空如也，难道时因为文物展品太少了，塞不满北区，</p><p><img src="https://img.promefire.top/blog-img/20240115-62a445b5f0f7468fa85d69946ca67299.jpeg" alt="IMG_0990.jpeg">琉璃工艺品，中间这个葫芦蛮好看的。<br><img src="https://img.promefire.top/blog-img/20240115-516f8a76ff89a2554a0777e6b558a3d1.jpeg" alt="IMG_0983.jpeg">秸秆制品，黄鹤楼<br><img src="https://img.promefire.top/blog-img/20240115-e5704c8e4640ea64b78b0752f6ade699.jpeg" alt="IMG_0984.jpeg">黄袍加身！<br><img src="https://img.promefire.top/blog-img/20240115-95b43569bf92d62f79de88365e8717db.jpeg" alt="IMG_0985.jpeg"></p><p>燕京八绝<br>旁边还有梨园文化,兴趣不大,没有过去看<br></p><p><img src="https://img.promefire.top/blog-img/20240115-ddc08bb1875bc8f6967aa5d58c5aa969.jpeg" alt="IMG_0987(1).JPG"></p><h2 id="大汉绝唱-满城汉墓"><a class="markdownIt-Anchor" href="#大汉绝唱-满城汉墓"></a> 大汉绝唱----满城汉墓</h2><p>也就是中山靖王刘胜墓，刘皇叔的老祖宗墓被挖了！</p><blockquote><p>刘胜（？－前113年） ，男，汉族，汉景帝<a href="https://baike.baidu.com/item/%E5%88%98%E5%90%AF/1629700?fromModule=lemma_inlink">刘启</a>之子，汉武帝<a href="https://baike.baidu.com/item/%E5%88%98%E5%BD%BB?fromModule=lemma_inlink">刘彻</a>异母兄，母为<a href="https://baike.baidu.com/item/%E8%B4%BE%E5%A4%AB%E4%BA%BA/10163848?fromModule=lemma_inlink">贾夫人</a> ，<a href="https://baike.baidu.com/item/%E8%A5%BF%E6%B1%89/394557?fromModule=lemma_inlink">西汉</a>中山靖王。<br>前元三年（前154年），受封<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%B1%B1%E7%8E%8B?fromModule=lemma_inlink">中山王</a>。后元三年（前141年），汉景帝去世，<a href="https://baike.baidu.com/item/%E6%B1%89%E6%AD%A6%E5%B8%9D/338322?fromModule=lemma_inlink">汉武帝</a>即位。汉武帝即位之初，大臣们鉴于<a href="https://baike.baidu.com/item/%E5%90%B4%E6%A5%9A%E4%B8%83%E5%9B%BD%E4%B9%8B%E4%B9%B1/446166?fromModule=lemma_inlink">吴楚七国之乱</a>的教训，对诸侯王进行百般挑剔，动不动就上告诸侯王的过失。刘胜便把官吏侵夺欺凌诸侯王之事，全部奏报<a href="https://baike.baidu.com/item/%E6%B1%89%E6%AD%A6%E5%B8%9D/338322?fromModule=lemma_inlink">汉武帝</a>，汉武帝就增加诸侯的礼遇，废止官吏检举诸侯王之事，对诸侯王施行优侍亲属的恩惠。<br>刘胜为人喜好酒色，有子孙一百二十余人，并认为诸侯王应当日听音乐，玩赏歌舞美女。<a href="https://baike.baidu.com/item/%E5%85%83%E9%BC%8E/2477115?fromModule=lemma_inlink">元鼎</a>四年（公元前113年），刘胜去世，终年五十三岁，葬于河北省保定市<a href="https://baike.baidu.com/item/%E6%BB%A1%E5%9F%8E%E5%8C%BA/17541705?fromModule=lemma_inlink">满城区</a>陵山之上，谥号靖，史称中山靖王。</p></blockquote><p><img src="https://img.promefire.top/blog-img/20240115-52e75a5827f13aa4fd4a0d480ce4d47c.jpeg" alt="IMG_0991.JPG">金缕玉衣，镇馆之宝！</p><blockquote><p>“玉衣”又称“玉匣”“玉柙”，使用于两汉时期，是一种高级殓服，根据编缀缕线的不同，又可分为金缕玉衣、银缕玉衣、铜缕玉衣和丝缕玉衣，其中金缕玉衣等级最高，通常只有皇帝和诸侯王可以使用</p></blockquote><blockquote><p>满城一号汉墓的这套金缕玉衣是考古工作中首次发现保存完整的玉衣，它的发现终于解开了汉代以来长期存在的玉衣之谜，具有重大价值，是研究汉代皇室贵族丧葬制度的重要实物资料，因此也在2002年被国家列为首批64件（套）禁止出境展览的文物之一。</p></blockquote><p>​汉武帝时期学黄老之术的杨王孙所说“口含玉石，欲化不得，郁为枯腊，千载之后，棺椁朽腐，乃得归土，就其真宅”。古人想借助腐的玉来使尸身不腐，穿着金缕玉衣下葬的刘胜尸体出土时都已经腐烂，只剩下一些灰褐色的骨渣和牙齿的珐琅质外壳碎片，不朽的只有金缕玉衣<br><img src="https://img.promefire.top/blog-img/20240115-7880d3301d94d3800bff49eec341daad.jpeg" alt="IMG_0993.JPG"><img src="https://img.promefire.top/blog-img/20240115-3b71dcaf48db744afd8957acb1244a96.jpeg" alt="IMG_0995.JPG"><img src="https://img.promefire.top/blog-img/20240115-505cd5f6910f382b215157b61bdf1732.jpeg" alt="IMG_0997.JPG">汉代玉器<br><img src="https://img.promefire.top/blog-img/20240115-01da67e6fc4c08230cb994300e7b2df8.jpeg" alt="IMG_0998.jpeg"><img src="https://img.promefire.top/blog-img/20240115-3e6ac0e56c8de6a62f18725d98e80383.jpeg" alt="IMG_0999.JPG">后人仿制的汉车<br><img src="https://img.promefire.top/blog-img/20240115-f812570d2d79098447167cccb732de45.jpeg" alt="IMG_1002.JPG">还有一件镇馆之宝–错金博山炉没看到,官网上找了张图</p><blockquote><p>这是西汉时作为香薰、薰炉用的青铜器,因为造型象征的是传说中的海上仙山一博山,所以叫做博山炉。现藏于河北博物院, 是镇馆宝物之一, 1993年就被已经被定为国宝级文物了。</p></blockquote><p><img src="https://img.promefire.top/blog-img/20240115-533cbbd0c1d7cf54af00f65c77af0252.png" alt="pic.png"></p><h2 id="战国雄风古中山国"><a class="markdownIt-Anchor" href="#战国雄风古中山国"></a> 战国雄风—古中山国</h2><p>这个没怎么看，逛的时候还以为和刘胜墓一起的.<br><img src="https://img.promefire.top/blog-img/20240115-6c185f172aec7cfdec4cc9ccc130b72b.jpeg" alt="IMG_0992.JPG"></p><h2 id="石器时代的河北"><a class="markdownIt-Anchor" href="#石器时代的河北"></a> 石器时代的河北</h2><p><img src="https://img.promefire.top/blog-img/20240115-347afaac43758f286cdd8afd993be118.jpeg" alt="IMG_1003.JPG"></p><p>​只拍了一张猛犸象骨架，放置在入口的右偏后一点点方向，从入口进来一抬眼看到高达三米多四米的猛犸象骨骼，还是有点震撼的。<br></p><p><img src="https://img.promefire.top/blog-img/20240115-72a11ab2146c54449ad7b5a59480c548.jpeg" alt="IMG_1004.JPG"></p><p>这个设置不错，石器时代的石头。<br></p><p><img src="https://img.promefire.top/blog-img/20240115-8e832d4e6f2151be9b8a2fd49f9586b4.jpeg" alt="IMG_1007.JPG"></p><h2 id="河北商代文化"><a class="markdownIt-Anchor" href="#河北商代文化"></a> 河北商代文化</h2><p><img src="https://img.promefire.top/blog-img/20240115-686531acb07f0e2aa6322be492f4bfd6.jpeg" alt="IMG_1009.JPG">商代嘛，最出名的就是青铜器了，入口的标志也是一个青铜鼎的形状。<br>商代<strong>夔纹蝉纹铜鼎</strong></p><blockquote><p>夔  [kuí]</p><p>夔，是中国神话传说中的<a href="https://baike.baidu.com/item/%E4%B8%80%E6%9D%A1%E8%85%BF/53776076?fromModule=lemma_inlink">一条腿</a>的怪物。出自《山海经·大荒经》。相传为尧、舜时代的国家<a href="https://baike.baidu.com/item/%E4%B9%90%E5%AE%98/8961317?fromModule=lemma_inlink">乐官</a>。传至商代及西周时期传说中一种近似龙的动物，形象多为无角、一足、口张开、尾上卷，在钟鼎<a href="https://baike.baidu.com/item/%E5%BD%9D%E5%99%A8/5867978?fromModule=lemma_inlink">彝器</a>等青铜器上经常会释有<a href="https://baike.baidu.com/item/%E5%A4%94%E7%BA%B9/9890407?fromModule=lemma_inlink">夔纹</a>。外形像夔声音如雷，仅有一足。据说<a href="https://baike.baidu.com/item/%E9%BB%84%E5%B8%9D/118887?fromModule=lemma_inlink">黄帝</a>依照<a href="https://baike.baidu.com/item/%E4%B9%9D%E5%A4%A9%E7%8E%84%E5%A5%B3/1482?fromModule=lemma_inlink">九天玄女</a>的指示将夔杀死，以其皮制成<a href="https://baike.baidu.com/item/%E6%88%98%E9%BC%93/7851959?fromModule=lemma_inlink">战鼓</a>。<br>异兽说许为讹传,<a href="https://baike.baidu.com/item/%E3%80%8A%E9%9F%A9%E9%9D%9E%E5%AD%90%C2%B7%E5%A4%96%E5%82%A8%E8%AF%B4%E5%B7%A6%E4%B8%8B%E3%80%8B?fromModule=lemma_inlink">《韩非子·外储说左下》</a>有如下记载：“<a href="https://baike.baidu.com/item/%E9%B2%81%E5%93%80%E5%85%AC/4400425?fromModule=lemma_inlink">鲁哀公</a>问于<a href="https://baike.baidu.com/item/%E5%AD%94%E5%AD%90/1584?fromModule=lemma_inlink">孔子</a>曰：‘吾闻古者有夔一足，其果信有一足乎？’孔子对曰：‘不也，夔非一足也。夔者忿戾恶心，人多不说喜也。虽然，其所以得免于人害者，以其信也。人皆曰：“独此一，足矣。”夔非一足也，一而足也。’哀公曰：‘审而是，固足矣。’”可辨.</p></blockquote><p><img src="https://img.promefire.top/blog-img/20240115-438d483a7c7dbfd1cec2db1e8ea82ea5.jpeg" alt="IMG_1010.JPG"></p><blockquote><p>斝（jiǎ）</p><p>（名词）古代一种铜制的酒器。《诗经·大雅·行苇》：“或献或酢(<strong>zuò，客人用酒回应主人）</strong>，洗爵奠～。”</p></blockquote><p><img src="https://img.promefire.top/blog-img/20240115-989bade2610e504ee659fad045b96c26.jpeg" alt="IMG_1011.JPG"></p><p>商代青铜器纹理<br>记住这几张图，以后看到也能认出个大概了</p><p><img src="https://img.promefire.top/blog-img/20240115-1080771b11ed7502c1dcc57f8c70b8ed.jpeg" alt="IMG_1017.JPG"></p><p><img src="https://img.promefire.top/blog-img/20240115-c9973fb3b2983c649b7592c6e5f3a70b.jpeg" alt="IMG_1018.JPG"></p><p><img src="https://img.promefire.top/blog-img/20240115-a59768a276c13305118ecc4a861c7b6a.jpeg" alt="IMG_1019.JPG"></p><h2 id="慷慨悲歌-燕赵故事"><a class="markdownIt-Anchor" href="#慷慨悲歌-燕赵故事"></a> 慷慨悲歌-----燕赵故事</h2><ul><li>燕国故事</li></ul><blockquote><p>西周初期，周武王为加强东北边陲的统治，封召(shào)公奭（shì）于燕地，建立了燕国。公元前222年，燕国为秦国所灭，历43世，800余年。存国期间，内忧外患，历经磨难。战国时期，经燕昭王28年苦心经营，据有今冀北、辽东等广大地域，经济发达，繁盛一时，跻身“战国七雄”</p></blockquote><p><img src="https://img.promefire.top/blog-img/20240115-ad6f028e20fdf4adc1f99c5392d9cf1c.jpeg" alt="IMG_1029.JPG"></p><p>惭愧，我对燕国的了解只有荆轲刺秦。<br>前251年，燕伐赵，大败，割五城。前242，燕伐赵，大败，失五城。<br>燕国也太惨了吧，还都是主动出击的，竟无语凝噎。</p><p><img src="https://img.promefire.top/blog-img/20240115-9457007ad3c58f535054ac4e269921d3.jpeg" alt="IMG_1026.JPG"></p><p>万箭齐发，有点帅<br><img src="https://img.promefire.top/blog-img/20240115-96bff6c50d49be7a2fe2ce2119af14ea.jpeg" alt="IMG_1028.JPG">铁头盔，易县出土，风潇潇兮易水寒的易吗?<br><img src="https://img.promefire.top/blog-img/20240115-1c6f17919e4831e0cbb67e53643739cf.jpeg" alt="IMG_1027.JPG"></p><blockquote><p><strong>荆轲塔</strong>坐落于河北易县的<strong>荆轲山</strong>上，为纪念古义士荆轲而建。塔为白色砖木结构，高26米，共13层，形如利剑，直指苍天。初冬时节，荆轲塔在缥缈的云海间若隐若现，气势磅礴，美如仙境。</p></blockquote><p><strong>百度一手，云雾缭绕的荆轲塔还挺美。</strong><img src="https://img.promefire.top/blog-img/20240115-eed5f7840fa6408364572c34d8484173.jpeg" alt="1129172566_16697690063021n.jpg"></p><ul><li>赵国故事</li></ul><blockquote><p>战国时期，诸侯争霸，赵国与秦、齐、楚、燕、韩、魏并称战国七雄。赵武灵王实行“胡服骑射”，赵地方二千里，带甲数十万，骑万匹，粟可支十年，傲然雄视天下，常怀吞秦之志，“收率天 下以摈秦，秦兵不敢出函谷关十五年”。<br>赵人雄健尚武，廉颇、赵奢、庞媛、李牧等名将辈出，齐国田单、燕国乐毅亦曾为赵所用。赵为“四达之国”，交通便利，经济繁荣，思想活跃，名士云集。儒家荀子、法家慎到、名家公孙龙等诸子思想传播四方，影响深远。<br>赵氏，与秦共祖。周幽王时入晋，世代为晋国重臣。简子赵鞅营造晋阳城(今山西太原)为赵氏根据地，并把势力扩展到邯郸。公元前453年，赵氏、魏氏、韩氏三家尽分晋地，赵国初立。公元前386年，赵敬侯迁都邯郸，谋求向中原地区扩张。公元前307年，赵武灵王进行“胡服骑射”改革，实力大增。惠文王承武灵王功烈余荫，保持最强态势，屹立东方。公元前262年，秦国发动“长平之战”，坑杀赵兵四十万，赵国一.蹶不振。公元前222年，代王嘉被秦俘虏，赵国灭亡。</p></blockquote><p><img src="https://img.promefire.top/blog-img/20240115-7117017e30d6757f37e0e21ac0212167.jpeg" alt="IMG_1025.JPG">长平之战<br><img src="/post/cheng-shi-dian-liang-shi-jia-zhuang/1685586667279-5a260b77-37d2-4eec-84b9-5fd79c7ce598.jpeg" alt="IMG_1023.JPG">大概是赵武灵王吧，拍完了才发现有一个小孩<br><img src="https://img.promefire.top/blog-img/20240115-9b820cf545bcdfd15afd9341da81f8f8.jpeg" alt="IMG_1024.JPG">到了战国，比商代多了好多xx纹。</p><blockquote><p>蟠龙纹： 龙形巨首有两角，双目圆睁，身似蛇形，有鳞纹，蟠曲如球状，空间填以兽、鸟和鱼纹等<br>蟠螭是龙属的蛇状神怪之物，是一种无角的早期龙，对蟠螭也有两种说法，一种是指黄色的<a href="https://baike.baidu.com/item/%E6%97%A0%E8%A7%92%E9%BE%99/1648740?fromModule=lemma_inlink">无角龙</a>，另一种是指雌性的龙，在《汉书·<a href="https://baike.baidu.com/item/%E5%8F%B8%E9%A9%AC%E7%9B%B8%E5%A6%82%E4%BC%A0/5953525?fromModule=lemma_inlink">司马相如传</a>》中就有“赤螭，雌龙也”的注释。螭是传说中的一种没有角的龙，张口、卷尾、蟠屈。有的作<a href="https://baike.baidu.com/item/%E4%BA%8C%E6%96%B9%E8%BF%9E%E7%BB%AD/2301081?fromModule=lemma_inlink">二方连续</a>排列，有的构成<a href="https://baike.baidu.com/item/%E5%9B%9B%E6%96%B9%E8%BF%9E%E7%BB%AD%E7%BA%B9%E6%A0%B7/288341?fromModule=lemma_inlink">四方连续纹样</a>。一般都作<a href="https://baike.baidu.com/item/%E4%B8%BB%E7%BA%B9/23130738?fromModule=lemma_inlink">主纹</a>应用。</p></blockquote><p><img src="https://img.promefire.top/blog-img/20240115-03c47c8e596224c4fa471d20d2408b4a.png" alt="20210421061209668.png"><img src="https://img.promefire.top/blog-img/20240115-bc0d5a012642127162699d9cbeb3be3c.png" alt="20210421060934341.png"></p><p>赵国名人图，不得不说有好多耳熟能详<br><img src="https://img.promefire.top/blog-img/20240115-1ed6a14190f501058d52f36bf54d5447.jpeg" alt="IMG_1021.JPG"></p><h2 id="结束"><a class="markdownIt-Anchor" href="#结束"></a> 结束</h2><p>​出来以后想买点文创纪念品什么的,商店里逛了一圈要么是太贵,要么是拉跨,河北博物馆没有把这个IP做起来,里面的好多东西脱离了博物馆这个背景去卖也完全没影响.有一个博物馆护照应该是逛之前买,边逛边盖章,可惜我们逛完了才发现.<br>这两小东西是博物馆门前石雕的缩小版,盲猜是龙生九子中的一个,照着图片比对感觉都不太像…一看价格,1500!忒贵了,<br><img src="https://img.promefire.top/blog-img/20240115-312c269c91b65dd08f8911df9805e195.jpeg" alt="IMG_1030.JPG"></p><table><thead><tr><th>名称</th><th>喜好</th><th>形似</th><th>见于</th></tr></thead><tbody><tr><td>赑屃(bì xì)</td><td>负重</td><td>龟</td><td>驮碑</td></tr><tr><td>蚩吻</td><td>吞</td><td>龙头鱼身</td><td>建筑的脊梁</td></tr><tr><td>蒲牢</td><td>吼叫</td><td>小龙</td><td>钟提梁的兽钮</td></tr><tr><td>狴犴(bì àn)</td><td>诉讼</td><td>老虎</td><td>狱门或官衙正堂两侧</td></tr><tr><td>饕餮</td><td>食</td><td>凶残野兽</td><td>青铜器的面部装饰</td></tr><tr><td>螭首</td><td>水</td><td>龙</td><td>排水口、桥柱</td></tr><tr><td>睚眦</td><td>杀斗</td><td>龙首豺身</td><td>刀环、剑柄吞口</td></tr><tr><td>狻猊</td><td>喜烟好坐</td><td>狮</td><td>香炉脚部、佛座狮子</td></tr><tr><td>椒图</td><td>闭居、不受打扰</td><td>螺蚌</td><td><a href="https://zh.wikipedia.org/wiki/%E9%8B%AA%E9%A6%96">铺首</a><br>衔环</td></tr><tr><td>囚牛</td><td>音律</td><td>黄色小龙</td><td>蹲立于琴头</td></tr><tr><td>嘲风</td><td>险、远望</td><td>凤凰</td><td>殿角走兽</td></tr><tr><td>负屃(fù xì)</td><td>文、书法</td><td>身似龙、头似狮</td><td>盘绕在碑顶</td></tr></tbody></table><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><p>第二天换了一家逸程,这家服务环境都不错,点名表扬<br>入住时候还送了小礼品,两块饼干和酸奶,这好像是我第一次住酒店送礼品的.<br><img src="https://img.promefire.top/blog-img/20240115-a4ab172c501a0c836ad182a84c2d6bd1.jpeg" alt="IMG_1036.JPG">喝着七千年前的矿泉水,看世乒赛,马龙惜败,输给了中国小将王楚钦,中国乒乓球后继有人.<br><img src="https://img.promefire.top/blog-img/20240115-d3fe2a9ccc72f050bcf99d01385500b3.jpeg" alt="IMG_1037.JPG">余下的就是吃吃喝喝了,吃了潮汕牛肉火锅,福缘烤肉,呷脯呷脯,小烧烤.福缘烤肉去了两次,第一次去的时候被排队的人惊到了,一张照片甚至不能拍全,左右两边还有.<br><img src="https://img.promefire.top/blog-img/20240115-c94230b92448a3ea10cc28233f3b9dfa.jpeg" alt="IMG_0971.JPG">有一说一这个商城还不错,顶楼有音乐喷泉还有一个滑冰场,建议其他商场效仿.<img src="https://img.promefire.top/blog-img/20240115-9ad0f27bbb03f9952e9e550c2c905e25.jpeg" alt="IMG_0968.JPG">一辆经受了太多的共享电驴</p><p><img src="https://img.promefire.top/blog-img/20240115-316307e9a21b1dea6025b334cf37edbd.jpeg" alt="IMG_1035.JPG"></p><h2 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h2><ul><li>石家庄的天气,emmm,不是太好,下完雨后实在是闷,走几步就感觉身上粘粘乎乎的.这城市不适合居住．</li><li>路上还看到一家雅马哈钢琴体验店，等我工作了高低整个罗兰３０ｘ电钢琴．</li><li>小红书上找石家庄必去景点，想去西板坡,和赵州桥,不搜不知道,一搜吓一跳,两个都在周边的县里,大几十公里,太远了,遂放弃,至于正定古城，虽说都是好评，不过我觉得一定不如忻州古城．</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
          <category> 旅行记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
            <tag> 城市 </tag>
            
            <tag> 摄影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>月圆</title>
      <link href="//post/yue-yuan.html"/>
      <url>//post/yue-yuan.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>乌鸦，古钟与残破的手稿，静静地诉说着一场月圆之夜的伟大实验。</p><p>阴影飞起，扬起一团旧日的烟尘，绯红的月光透过茂林的缺口，黑暗中堆积的枯叶染上了诡异的红晕。</p><p>凄风，苦雨，寒灯，夜行人。</p><p>马车伴着古老嘶哑的钟声抵达破败小屋，下马，站定，黑黄干燥的手掌拂去木门上历史的迷雾，不规则的暗红显现，仿若被血浸染千百年。</p><p>屋内灯火闪烁，但昏暗无比，老者扶着墙壁，点燃手中的油灯，寻找着前行的路。</p><p>火焰中出现了一条木制阶梯，老者拖着疲惫的身躯，沿着扶手慢慢前进。“吱——”前方木门打开，一位年轻人迎了出来。</p><p>“实验最后一种材料已经送到，处理之后就可以开始”</p><p>静谧的风划过，森林无声地摇动，地上的红晕规律的摇摆。</p><p>林间，传来了一声声瘆人哀号。</p><p>那是狼人的声音，狼人，正是实验需要的最后材料。</p><p>老者放下油灯，从怀里取出一叠泛黄手稿，残破的纸张与模糊不清的字记录着一场古老的实验。</p><p>”红月中的旧日宫殿，沉睡着一尊神明“。</p><p>”狼人居于深林、雷鸟栖息峰顶、鱼怪遨游大海、石巨人看守荒漠、睡魔入侵梦境。奇异生物的居所，是人类的禁地“。</p><p>”提取奇异生物血液中与神明的“联系”——我称之为”灵“，用人血中和，可沟通神明！”</p><p>“实验消耗：狼人八具、雷鸟四只、成年男性一百人…&quot;</p><p>”实验结果：成功，获得神的知识“</p><p>老者小心地将手稿放回胸前，拄着拐杖审视着祭坛的每一处，每种奇异生物的灵都已正确地放置，扭曲之线与残破之圆交织。</p><p>巨大的红色圆月挂在窗边，这将是红月离大地最近的一次月圆，因此老者才回来此，作为悲剧的缔造者，同时也是奇迹的见证者。</p><p>”愿我们能成功沟通神明，获得更珍贵的知识“年轻人低语。</p><p>知识与智慧来自于神。</p><p><img src="https://img.promefire.top/blog-img/20240110-c21756dc7d7f1c25223cd3c569360ba1.jpg" alt="12"></p><p>乌云，从两侧袭来，逐渐覆盖红月,遮盖了最后一丝光亮。</p><p>林中小屋内，油灯闪烁，在黑暗的笼罩下燃尽最后一截灯芯，周围的景物变得陌生且神秘莫测。</p><p>无人知晓黑暗会何时过去，但月亮终会升起，将光芒带给那些愿意追逐远方的末路人。</p><p>暗木书桌上，一本摊开的泛黄纸张，蘸了墨的羽毛笔轻轻划下。</p><p>”奇异生物与红月有关，红月中的旧日宫殿，沉睡着一尊神明，奇异生物的力量来自神明，籍此提取“联系”沟通神明“获取知识”</p><p>“知识与智慧来自于神，在教会的严格管控下，私自教授探索知识被认为异端，只有通过向神献祭得来的知识是为正统”</p><p>”为了向神献祭，人类大肆捕捉奇异生物，一次献祭要数十甚至上百只，而在数百年前，奇异生物并非如此弱小，一只简单训练的小队就可捕杀，那时候猎人与猎物角色相反，我猜测奇异生物变弱的原因在于其与神明的“联系”变少，换句话说，神明在回收祂的”灵“，将散落的一部分收回。那么是否可以根据举行献祭仪式所需奇异生物数量的多少来判断“灵”的减少速度曲线”</p><p>“在我的大半生中，我做了一系列实验，举行了一次次献祭仪式获取知识，并根据第二次献祭获取的知识得到了一个模型——关于灵减少速度的模型，”</p><p>“最后一次实验成功，共消耗狼人七十二具，雷鸟一百二十只…&quot;</p><p>&quot;我的模型终于完整，得到了最终的预言：</p><p>​二十年后，神将苏醒。“</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>夜半</title>
      <link href="//post/ye-ban.html"/>
      <url>//post/ye-ban.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="673156377f28ac529ce1e9661f9a32727e220b8926f3c90b296b9b6ba1e29de8">7f8f5ef90040bb282dc46b024da533d43f02c602b636c458f08ae8abe00ef2cf2caab408cecfbede667089544f71d2254ce10be68e7576e768b347a5dd0cfd0daf55f1be3a5d41805ecf754e7c8622e6b9a82d5edbe9240709a3e2d75058a3b1dc2b855d813220209521d470c35d2ae085a07622de077b54e12a2fff082e7c28c4f9e09d7aae44f005366de399929a35323ef1785b4bf143c8ba50f8858b0fd4deda9f9da5726d739839700e52ef2a876871cc98c0dc0e4d3839195d38d4ac4aaaeac214a690737e867f3eef1b5fcd41f8cc614976056bef84fc144b6a79313622b337fe0335960aedc0a13907784c7179cdd63547bf742d8d61b524bef7133dc196cfe79fd453415d259872165fba3d2d0f147164ac98de24082b139c53cb21fea32313b80d618640dfa2863b224b166a82a3a3ab761be303e3d5e464ea5970d10ef4d565085c8c687ae34e43c62076a7c5c4351f134b878088206938790ad24a3890b596fe659a04841f0995b7d9f38e2a6dcbf63bded354770008eff5c678a80b37af7a65bf6ca1d815b27d0755dd45715a2e8cbcdd31fd3c6bc5fb2af92818b27812f9773a4ed1fa8e2460958ba202c03551b6e802335fa3b7052782985a140b0856df28636380617e0cbd54141827466d5be2b04cba3df25bdf27e5af0441a80494604bdceedc6731a66513947f6237b2859d776459a1913e303342fc85ff0a80464d02e9b6ab580de28b3d5def746206d7fd4748eaa7eb09a7387ce098</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>星光</title>
      <link href="//post/xing-guang.html"/>
      <url>//post/xing-guang.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4be0f19810781d6f9ba0a76c29d1aa258a973777b8110e9391d77a62112962ab">b5eba2102b000c44f2b6d767ce149f6477950e89217e98d29f62556f203196b72cb9b83dc61529a5fbb8cb3c15bc94090a52c6a44ad339de53df1e342227af8bd81c71cc105149a8b8fb312f5244ae6c4381bc6482a783476acc76b2a436dcc0912e2bcb8665d227b4f2cf325701b81f0741e3f648dc4b0ed4cc9945be489022e67a376d4a47e80a4c0443c1a3c7c1da6fc86903646c139d2a62aaf0124c515d73ecb69d067622f8ec34c1b06b934bb41114b287dfffceb628119722a786b653775a45fbc3f887df970d4bef8d61790689b33bfc33ad08026b5e8974ee6f32b1859c53eb134a4f491c9613d04e8fef791c22a2308039d03d3cec74470890abe0e933d549e92af28145310fb1ab4c6975204b6bfbf9584bcc65432e8adc1eb8ba959c459c3d8c7c4471a54a0b21ef2a4f7bad25b8b25ef65c4ff980e77e2b20e7c1825a0064735453b35a031b8aa3dbb2eb5455efc45f814b89153ac841e85e921b62ea08cd8fcfcefb933665e316222e6405862ffa5ac27300ddba8fc2802000fb3da06660e53f826d88839a257622d27d468e595a752070993eab39a9e930acb80eb9e7460d257570547e41e0c57d10b819908458e6ca1a44e48e5ede87665e3b8fd39c05a0dd36e6aaf2969ae0fd168cdcdc6a39968efbeb63ad9e51a11af8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五一</title>
      <link href="//post/wu-yi.html"/>
      <url>//post/wu-yi.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="48c5460bac18db28f7045ebee95a5f4d6a1a4cbd1e8138407e530df2cbb90749">c92f7b0288db82493e4f8fb6f0b382505135cef963f213766c5c18acc4383034a63ff81393c7e0e5f797ac43bd714b8c3e1fbd55950539db05f586e5dabfd381180e23f3544aac1475f717f4be69c80d4f41189b0602d8bae83d01d40be4c7db28bc99128c348134a32b6b1084c31e72c1b876f2329760fd7e8c10cc2e3c248d13931aba17e987cacddf36e6cb3105d4acca5d49626424b57b464b4b2b9ad9de1f0a6ea769d122106ffd3b3b019ad90c0d28163ff8e4772037af982942defcd4a81bb32348897abeaf36318dbe185c5ec9dbe30ed7b7d7d3cc7adaef4653ccd2e1613caf7c083c73e75f42305f6d3293137672c4a9e9a8b5a714c4030646020766a0af03f542791ab9dc1076a8d5589e12dde60f706cf47dd51502d2b913f1594997c5e72c1d062346875a8cf6ab9fa79ac5ef94ee3acf243442842520ba4997153e7ff56dcc3010404e5877fc3f3cc1a6eb843270ba87e517db73abe53a7d8c344261a5de3b475e61bbfc079963d37e4cddaa64b5684f96caa73dcfbb0f94d2d014f71fbe715e642b3b1b31526da2bb08983b23a1a3977b34a3fee5f102bb50072692dc046f3f6a7b36740e416841a5c1c539d43063e55d01bd81fef40e6dca4b785bdbce8a1d024655cbe1a4cf3426877042c232f0a34e9d2b0b8d714d030b25105cdd28b143bdccaae1339a5afe6da7459961b5cb8f655d2eb6e64568ca7db64f78b8da50d15b445633190c869dad9ac1affef1f0083aa682c4984976226345eb2744740f7d9b8077aa0eba39ef4c29514d126e7d35c11f5a27626678d795120dc2c44815401c682b07e8f2efea507009221980b235499fb2c75601285398ada606890c50262479ea674adb76d412bcf99693ee08a9c1bd291bb0c56c6cd93b832b1ffca219e026291380d805bc4b68e1de098f3f0a0430ff6f4f997b88320c605b973184cab2f8d34ae30eefcdae2d7f6a077fd85a266b9978b7b10e1766f4b2978908b2106840083e7d086bdbccedcc5e0abf1c0a0354bec46ed7fe12833d51f44ba445387246796c6f2761d81f7344afb43d1e4ba882d51605f2dab63daca070a09ca614e20f59b9f3486b8cc286e707fc13ba5074b8585c65fc3b29f0850dd4395ab51b7ce920ec4b91c51b2bb8da679ee0781a13cd37f431aeffbf87738feee0e5f35fe3e58e4cfc104d4cf96f1c7bff2a029fd54000264c1bf9fb39959d662d07ec3a4c8e4411f2f99ac6d126c5c1438b2cb2aa0c52bbcfd2e2708bbd591980e079d82a90d0c316e193570477193ec14561d6aeca063d24486c8cad273b65cea7bb4b40fd680b5a4e1dcd25e3bc225230ae0263c5610930f029001c568de4733695a7b437137d24f9a43ed75f5373b8032c70820d3a1998657a0f5f0f564d9402504793c76033621801c1fea90bfba5f2fddae67bd255f9757af67f0985cae620f6cbb4152e11d087f05db072a5a0f331462942468854e87738f0fa19d6c063deb079088088e9453196f88841b3266dbb90f678811dcf7033aea47181b6fd93c9b6646e0c539f5517b888e88085078f8d4f390b7769825ffd13686c36019dd55a5190aafcb3664735d71a2b93b35e1d879bb4ead926e44420b9d5349f3b8850e8e33cf7c44300af72ab4629ad5762ecf57502edb00f0f2f1b5030c86227e164da7a5ea8995dec07057ebd103adf04cc6a130ec9f0c7302f421aa257258d81cfecc2086c79e0e2bfc77b205cc9a0e28186518359699878410604185a3cd777169d22a100ab12b34d1060cdc5dad2dad38d203537c4a36d1751c4028add57b3b8093c3eda3c5952d86ed041cd4017c72af2ba2dd87fc6c369b905f5365a2ec98f99ccae9003ba5881d517c6a1a064a5478b478c4a9cc70ce993f01290a6f76bd952b5155e8929f07d082ca39d29582faf4b9fc37f5ef54d317fc6368915ee2b0194eb5b5ed7a397f31ae64bfa695bd5e04e28dffba182ffdcf5b478db9539835b43203f740102f04dcc55c441a86998ab02bcbae0c6a4f6b6f5f4b39eee4b5e5431f99d265caaf8d0b0e3de585deefeed361ad9686c10af9713d93a520aed847a309172868f82af5aafabb62be12ac00acc2b3c9fbfd2df6794eb74d704b7af5fbe283dfd54ae2d3135a38689c7fbbcb1735869295eb5c767d877dd4cc6d4e020d034a9b319090d0f9ec7cc6e7e775d16343c255a6f49c259e2ee146e75d2c6a977d42756a3a2aaddf69e10db755ec14af8337ad958bd15c054629683d7c6968ebd3e27a459e4736200e095b6084c11331acadd30fca7cf938590c21bff815b79285c4e6940e70b4a4a378cb8b325316bbff33b0bb0bb633e23e7563c729eecc3a2ec02e1a44a7a19e8b99a4c5518eefa9ce100d8b4d84afcfa247181fe3995703a72676316207e20388d6a382af716f99afa03c81b8ba90b739136d5c7658a8f6e31531ab19fc8dc1a58e25bbd923fcc867572f13bc2a4f4467d5192fa65b479acb860aefd197bfb54487b8727fea88953cf7ef9f7b308a07751ae20f020a080c180a9f676154f665097e024e34c0e4f7185c7cd83cafaafe43cc6c84838eb82fb61ce8c5fdfa56c4b6e8a544ced39cce25997f35f8641a8ead057887193957a0f21253103cac748d2dd4406</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回不去的童年/(ㄒoㄒ)/~~</title>
      <link href="//post/tong-nian.html"/>
      <url>//post/tong-nian.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e7cb9420b73b0381d14b3420fd2e1a485c90f7a8862aa5db8b628d3feda373d2">9c452b28a2613fc50ac215b3a4e027f249a26a1fafea8a00e9098246f86258faeef805b7aaa316c9e86782784016bf6a2ebc604c202821f8ac7d7ff2c405e6d0fccad04b24deaa6e2649c0ece6a4b0bcd600cb56c25c95b56ed2fe91f0273f736720ef2a9d61f8bd004ee01939ef263504523e30d25ee2d93088e6acf0fa4daeda7de3f089ce43d7a015015d976396095cff35163473db98bf33d3a72f41195d3442a4d6ec74a11fe09bdd52414bb036c662a834c3cd70c516648de278c8e8fe033af4bd59c316c59ca904f574ad12302bbd898ffe77a4fc003f30aa617f0d2cba72334272d2796c85a649bbc2734c3231a988dd4bcef32ae4d76654d33fa75dde2e40f1abc23149b2a5510cf523143d2ee8cf783276390a8258badeae7ff783db5d564872882abe0d348e5699b248b290ae1426069e02888505388a2716a4e45a4d02f3cdb3550b549b1ff427f8c9444ee77446f74b57a11997500aeb8ccd4e742db55b7646eceba4e5df4c5ce66449ab79e3920ac7e4510cdef0daa357ee9b6ef8ffef169712f7ab40e815c5505f0eacbb387addfd1f4bfc353a7defaa02af6bc8922eb24645d320ad27cec10cdb0c460dfb4eb0e8e3de8cf7987a9625480a5d68becf97dd2c58b5b72bb758a8f2824b48ef0b2d337ca6fe4d9bffaeeaf647c7f3a8093be130e1c311094569b1b689634aa311d8da1df7e9bbe0dac122bc2b95d79357cfc57aa51ecd5ce2f775a69185312af0369f746486479bc3bba4a400ace0bb0bc7c4c86240f60def9da3225b2f547414fbd13ff9eed38ea6d07473a99fd2ff5acc7f23504bc367e199387474e842ce6d2e5ea7edd224742790572a4106cca251be5480827ab246789ae45ad16aaee45a6f6f895732c9134b5bc322dc1c16731f5b648d57c9bdcf697c0d35cae36d5ae450d9f7b5219fd10c0d8212dafcc6b12d704740072a046f8bf489ed53c0a22241a27fea6ec7e623cb9537e5d0cb9cf84f9f9a690260c5bf07dbe1e21aa3a8eab1acb58512169af6cc55b659ee7e0a16d811b1ccb17e2bb38b4d89aa44589f5aa7285db568a50cb712077be2eda89735668a86b6858bdafc89d6babeb9e9a724929952d676c08e9613fb2e8cdefcf4edfef34bf0cf839b6888e97de1ee51913d9f26d25a69f140731a47315e6852f90eeb9a73747aaeff9cb30b5fbad9998dcdbd083cf264f2bc2dd992630dc9bfaf59200e1b11b7263335863e463744639bd50dd50e55c9bdb807bac0d443a9d309dc8a424212a1443a4e086ae0e705502cb8cedf666e8957816ecc244ead0c0e1eb175509e306001cc589707603b056c3514c06ef208769d15e3fd30cc51a0eadd6b31471d3b1c87c2263abc24ed7586f2199f5835df6c6fb867926d10de2911c8f294e451f57aee4ecb3df5e47b481ef3f07d42d235d1df4d3f9fe221a2a992fac9654e6176aa8671ba086eed56bc29c9031c138837c0f74b55b66ec6bc4723870569e217725c7eee96473cbfc56bda6d0c3cad6e1d0153f816050e3270c8333a922541751b2815584d8f2ae2914f56a6ad9bc2b21f5439447973ca8f6aa9c9f47283e5be7f05421291e0a5cfd521a74a346b4694dfafc30132cb1443618730096aa708ea0a877853d1efa0310c559fc9f8763c7e25808e884edb99cc799efdd93a05064b3cf49cf29544afb37f393e6ecfb5bff5ad15b5e74068837322eb8e43c673bc71a24a26e6129e76f9f2d2c80de8cfaa4442f880467f939adedc474d493597d06681f2c861c7f1a7a5bda5bd0d050dfb92bada14b173e24d4ddb98254c6bcb2365c23fc8602d9cf7278ffe4da4e6efb0a0cab64142b2f034c2d5179d33e308c818a20df6cf59a1cc87f161de90ac820b4316acd30d2dcf6da62fc2046297954ac1190f7e53a6fddecf9ea33b29e772f52372b6286d926a1733bc4f7ae2cd2a0b7056201088da9a3b25ae61d764522cf8af875ec0fc5fce2693efb25a451d4f05cfaadfbfdc48fcd032caf752ffded852c302d544965a6bb3c56daa49a57096650d59e998b645144877cd48702bc1f7d986a6327e9a5ca975cd05caaf41cd615421a5c900f2b4435eee963cc444d006e2a2097dc5e42111d97877648f917b0ca6794ea9a4ce7bd7b2c429d41018061efdb9a32ddb734b5870796748d006afcdc3422cbd5d86ce9ca2bf8398792b3e7a42404188043599c0ec55d02f88d5c9ed11a0f541e8c2af8447158a34d18f2b832092c96dc1b86132b7a3ccecc4bfa9fdc163f86b56c5b6872a8c3b5960aa94f5e6c29539597e5c56164c9ebd8973f82454c24db98bdd2e2892e496b4f01f6e96ea17697844236162628eb00ec50719cdf70de9a91f330c902bdb33cd66099fbe34942745a3c332a9c6dcd56cd40ef3b794c8684b4fbf7a0ab0b02e05407bb512732bbf62b72306a36e3fb532459ba544049724987eed6316441e473acce18dc38778d6c7eec5adbbd01ab720c2a1c3bcdd9c2671ce75b557b12a1e49815cdf20705f5b52fda02905475721e47c1cf202affa6b1f07d6d02c94cfac03e3a9cf30eb2fc7e3d45c40aa589cb3f6fe8f75f0a1ba08a75a2651e4aecd52d6b9c6f68cee13a18e0b66c5bd2a4207ba78b4abfc52d6a8cc821c270139b86da2ecd32455224ecd6a6b49437539fd40f5a7907105c637fbd602726b63561ff6848c010c9ba921bef53b1132f55d8f7cf3f1ada3881052f2cc2bf6ee07b35e8a4f154b3587aac82b287633ed0136279b0e9eb197e4e8d52790c1cc15e1061f87d0a4c0e6153437db396293ad110d642f45ffa0af2757695fa355dcedc94798326077b132a166d60e0421e7996f1dc5751269e844fcb56b4b236cf6dcb3a9084b3c7229dc53888a752bf24423d55b626d6f648b4ff7574c2ec46242b938f5f504e4665544b58b78300abf808efda90b6f6a977550d98692b6ba642502b501d91f0749d32f06dd27df14f8cd6d0eef47b0a0951415238a3656466294e905bb86ed8eba80349f1474961bd9c022f58c87b2d856a64c8e1f482fda04ae0ce26e503056c60f4c2f9ace4a9c08d24611be8ebd5ab7447efd48cef0bfe4d386b52556765657bdeafc9e8799748676b0c1205544ceafd932c3ca7297fa3a9c9c73680b12ab35b913dedbae51f99aaaa8aeb89ea44a65542295e741c957e7aeb6d8d53da17d2886bea79cb918b6ba154fb1d424aa72e7d4b8dcf9b40f584a50a201bbe0dd2d779db52193065a90729b352597b1daec6cd931d12f5480f50ff11d9bf3ace60f340b0955540b4d0757556e5c2607e11df40e2d09d2abea66ea67a24b400197d39cdfea537bd5f82bc43c495f29249618</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🐏了个🐏</title>
      <link href="//post/liao-ge.html"/>
      <url>//post/liao-ge.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ba9d0015f748fdedc6a6d977fa7a95a252e3ac3fa6be1e1c4087e0635ea84172">7f8f5ef90040bb282dc46b024da533d43f02c602b636c458f08ae8abe00ef2cf2caab408cecfbede667089544f71d2254ce10be68e7576e768b347a5dd0cfd0daf55f1be3a5d41805ecf754e7c8622e6b9a82d5edbe9240709a3e2d75058a3b1dc2b855d813220209521d470c35d2ae085a07622de077b54e12a2fff082e7c28c4f9e09d7aae44f005366de399929a35323ef1785b4bf143c8ba50f8858b0fd4deda9f9da5726d739839700e52ef2a876871cc98c0dc0e4d3839195d38d4ac4aaaeac214a690737e867f3eef1b5fcd41bf80c65eb376cb2dfa7eafbff4a269fe564576f9e31932e57c5cbf3512c2366f6759544a13f365db89025ff4d11257d2b3cae568c2d60347766d459aafa0cb397c63dfc910ac865084e7d8165923ed4ade18f47b109a8ee9b820c940888b3b3471c7e4ca70b49281a5bb7dc84b14c0ded09e4fad0bb05417a7413ebdd4e5ea52a6169152d9d678d970a446e63b03d1502edcbac1346c5307d80fe84b7672a6e799cc2c4a40bfd4ed128b4f12205ede11ea5c1517e6beb4f3d98b1ba9cb37aab2cfc68de03ebc22aedc3f10b56cb465ed13a5a7b892951041811b442a209e8c2f95342c26fa1ade39ca0d17cf5f711461a727f0f7a7d5fb56d3be55fd020192262e9761200e95a19308729141e795c00bef49c5020a5ac66fe07646ca492720f7d6fa880ca8e467cbbae946164d780ddfa9fa0dc2e89869bf04034cfb051686960b78ab27b29a0e75ebe533f8d253d8aa3eb598fa32cb3bcf93708a0449ade111a44ebd150abe1ba42aebea5d47b40110a3a27bb2de1dbcf1ae749656391217e4cabbf029a149e2ebfe81c6e62608eeb42ebbfa639aa3a3184f88188a881fd3f5ffc4d27ce8bbabf39bc66eccf6f0a1aa770fa7aa998f010fda3cccb2e24e8c93b52c076d93affab3ff95e2b7ac6a03e0d44895667f0f836fcedca12a66be58020ab1dcb4c0a29e5ab67330ab4b91592c6161caeadbf91283533c049e1dc71d7da192a60e344705889b2e8b2ef4f5e78dcac547cc36f65782d121ab29db792a35c94d6a00502dae6926f594368cccd5ce99ab74cbc5d6552d0c79966401fe57468cb0f0d9cd3119833848906c79f6f28bf46e655c9549892d70b884ed689896b69fc67421bfc38f43d0a7a5c9c79795cfc337ce0e5d546d68d98dec606e953b8df418e434ef0e1d8d63209bb95728ba9b076e72d92c84e20ede70d78f866a16f8f7e11eea84ab89b4af5af9e3d43a30d94393604629b32466f5769c7f209b87c25e64e20ac8d945b6a5ab6a98ab065ce5056e48271d8a0cb9b00865ed3a1312fa0093c574ae6f121fd1c99cc2deaf7114d65f7475fc4a61627ad353d24517a58b0767acbc03a3a2486bec5aab535d4580897f47f47188746aec738ca812b6475e2dd362a879f2b5dcc9bbcc6588c44d47bb01f375a977749f9b22ede200b93ede19d944a4493a8232d61500784dec24803837ddb084509e845e1d63b07ff9be480752b16fef79f704d947a9ac84914b00d7bbf82e43f8954af2f3a887fe621d5404a40fdc79a2d160d834af2ed8ef36533ae46ee61ca9b8df6ebd1d6b17244d284338a64b9444d51ce44ae62ba7a04d2014b3fe59586b704b8726adee85b0a592c90674aa1e81c64a878ef5ba2c9a70384694171d5305fc4330cc5c841db81527139e79699097083199c55719363d4f3ea93a2beff0521da8b9e2246f97205c167f1417a9b47c303f73acfce69d9dfdc8b1b4f8b8a4e8bc20c324646cd5525574a90bc5d7f1b8090a4eba7222ce8526e0406574ffc7fc3ca5271c38df4edcf838ba9b18fe3124183e19fbf9be8e2bcb71fd0dd0213f127248fca43da8fc65068c2d71578c966bb152e37a5cbb4a1118aa018169a50d616fe5c9ec049b5552082143abe43249319b3e611dca89b9dc359cfc84a5ae0460cf0f75e2ff7d9a986a0b2f2d933322d3e10c574c08a8c7bd11e62dd16708e962460894aec0ab8e7d07ac5b3abfe0c023f792411840e5c027eb4e9d5baad3794f035d84ed104b78f8b9266de69246a92855a01608e76ba2c082ea1c54d1a947b5d62d2646e5212fc412a8b731803cab917b2cdfb9af6bf3e079d6098dc389204bdd8d0fd6d8f984929899b4ff56fcbf38d18a54f134601d9e8d6f8a9e7611206bfac28fbc8801755bae4cdd0b86fc02621e10d40a109ee573e7edb2f39b716fe90201fbb6570dcac210c13aa842e669db23a3e25984bcecc827d9f83db86b38370ff0829391b951e96d158bde345cf55818736bd92fe3fcc2d468aa93a9beb77ff45019cd90e1ecf712b283a84121c8b9f7cf69c569cdb97eb395eb0600fa203e3e0105d89d03c4b63689986e131187943cf2638263f0f9f231231c96b3f5c4d3b4edc75887b07af17f27133657a74378bb455299c95c5130a7e35ce5c10443d88b4abf156cacdd34efa6f1257aff672af76c79520593557876fc22b67d5d874577202fe496854e5b2e3d15ac6f864889b52fde73cc34c55dbb15951e68d60aee23433dcdedc07d36b95b046d6232168454f545f51b07c8c66142643e243989b776c54dc812dbcdfe38dfaaf80947b13d79bedcbf646eb32cfe7a7965c910a168a685be50046ca0d3fb41978e25f3f0570016faf2f234ae0ee99cd4f26cfe71e3557154dec0872677e10a347827a1b0453ac1525e8c2c19903ce2ba3055f6532835a58fa1644a7b7e65d7016a4a2c422622d7bf52ec7ed7cf493a1c01123f5cf5a09b263c63cecc1f26e87e298703053de92f271254a5cf1177fde5dabb75727500cd91d16a52049980ccb15ebdafab35840456813ea5c99a103cc22aeb841721e0576f3b72f4ffc40ce4e311f73da3434ebd4f883e99adb8b02ae8986c651719b7d222b9948e919a8ed812ab6b5bdb092fb04f1ea18478b58b262b5695be655b15c26bc60c0b4d566e5f603fc7c1b76f355ab11cbbd1df62b77fb445a52d7ecc4e8b6f06d15b0f91a0186d0d82a594d4e76fa645e25d39cd76cec8c188b1bd0c4d9562e1d777d6b18023352fa5ba90f2c1c2e06377122c9f94c7bb433ce1aa1394135d34619c7f8622e90eade070061d85ee9da76232b4cd8752fd33f787221c504374e240ad82faab21cdcf6e67fab96760635a2d8b9aed903179d9080e5a56cc1155c49524d98ea8136f002ec93ea5be69f2745ce32c4e1ba857912807726c15a70839a0379d184824a09abd9bf63f5ca1e59a1cb427f039409da5dd70c5622f03fe22bc3cc0155325b0db9fd3e140f0ffc9727c238eab7e055012a22d7f9d72d308adb7d90d654ebd15baea6b2def94c0d6b5947dbeec7be778a73f017a9c51f481084658142bc9965a8559ce653bba3b7bf3d6d0c23076d7aafd6a1a82210ff1a8cd3915362e2d0ce87bca85bd0da92ae1213ffb473d7bb8ed37fe0377b0f3a04f29c0540e190303291db9d4f585220a96f96c8c4fe25e3ae796975a1c612c839a5b5d0568560c8b5983335b66039c68688ad6f14bd63babf251b99e95f0f883bf57d7ec35205eb44173369b3274c53f3e0f5acb7d17d94a295aa2fa6ff07a6f55f0a6c8b804d70caf76ced10c243186a6b3f0c36021b7e34b74539574a84ddc073ed40603ecf752e552f0b2c97e4702e8df6addfb06a05e8ee085377d282d53af20078cecf149b27491b9ad1a024aa0e85e45f438dd14ce7be669c631666ff5e86a5c45ac556d3341786589bddefb215e1807f1c21e56b56477785fa499ff08180436c8a17c2eaf5f15e3a0ac669742b1145d8e02426927</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验室服务器安装pytorch-gpu</title>
      <link href="//post/shi-yan-shi-fu-wu-qi-an-zhuang-pytorch-gpu.html"/>
      <url>//post/shi-yan-shi-fu-wu-qi-an-zhuang-pytorch-gpu.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>​实验室给分配了服务器账号，可以跑自己的深度学习代码，但是在配置的过程中出现了种种问题，记录如下</p><hr><h4 id="0-解决服务器联网问题"><a class="markdownIt-Anchor" href="#0-解决服务器联网问题"></a> 0、解决服务器联网问题</h4><blockquote><p>首先你得有个vpn，点击<a href="https://ikuuu.eu/auth/login">这里</a>注册下载</p></blockquote><ul><li>本机按 win + R输入cmd，在小黑框中输入ipconfig，记下本机ip地址</li><li>在<strong>服务器</strong>上输入以下指令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">export http_proxy&#x3D;http:&#x2F;&#x2F;172.xx.xx.xx:7890export https_proxy&#x3D;http:&#x2F;&#x2F;172.xx.xx.xx:7890</code></pre><blockquote><p>172.xx.xx.xx替换为第一步记下的本机IP地址，端口号7890替换成本机VPN的端口号</p></blockquote><ul><li>使用wget测试</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wget www.baidu.com</code></pre><p><img src="https://img.promefire.top/blog-img/20240110-a2ff1256ceb498b4eedcbbb59c021f76.png" alt="img"></p><h4 id="1-使用winscp将anaconda3-202111-linux-x86_64sh上传至自己服务器"><a class="markdownIt-Anchor" href="#1-使用winscp将anaconda3-202111-linux-x86_64sh上传至自己服务器"></a> 1、使用WinScp将<code>Anaconda3-2021.11-Linux-x86_64.sh</code>上传至自己服务器</h4><p>给权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chmod +x Anaconda3-2021.11-Linux-x86_64.sh</code></pre><p>安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.&#x2F;Anaconda3-2021.11-Linux-x86_64.sh</code></pre><p>一路回车，有的地方需要输入yes</p><p>安装完成后</p><p>输入<code>conda -V</code>测试是否安装成功</p><ul><li>中间如果遇到问题，试试断开putty重新连接</li></ul><h4 id="2-创建虚拟环境"><a class="markdownIt-Anchor" href="#2-创建虚拟环境"></a> 2、创建虚拟环境</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#创建虚拟环境conda create -n py3.9 python&#x3D;3.9#激活虚拟环境conda activate py3.9</code></pre><p>3、安装pytorch-gpu</p><p>在激活的虚拟环境下输入以下命令</p><pre class="line-numbers language-none"><code class="language-none">conda install pytorch&#x3D;&#x3D;1.13.1 torchvision&#x3D;&#x3D;0.14.1 torchaudio&#x3D;&#x3D;0.13.1 pytorch-cuda&#x3D;11.6 -c pytorch -c nvidia</code></pre><ul><li>如果出现Solving environment: failed with initial frozen solve. Retrying with flexible solve</li></ul><p>conda config --set channel_priority false</p><p>再次出现这个错误时不必理会，耐心等待即可</p><p>附：</p><p>pytorch-gpu测试代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import torchflag &#x3D; torch.cuda.is_available()print(flag)ngpu&#x3D; 1# Decide which device we want to run ondevice &#x3D; torch.device(&quot;cuda:0&quot; if (torch.cuda.is_available() and ngpu &gt; 0) else &quot;cpu&quot;)print(device)print(torch.cuda.get_device_name(0))print(torch.rand(3,3).cuda()) </code></pre><p>结果：</p><p><img src="https://img.promefire.top/blog-img/20240110-47ad2859c9673164f7503b3891a342f4.png" alt="img"></p><p>指定GPU0来跑代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import osos.environ[&quot;CUDA_VISIBLE_DEVICES&quot;] &#x3D; &quot;0&quot;</code></pre><hr><p>更简单的方法：安装打包好的带pytorch-gpu的虚拟环境（只需要看第二步）</p><h4 id="打包anaconda虚拟环境"><a class="markdownIt-Anchor" href="#打包anaconda虚拟环境"></a> 打包anaconda虚拟环境：</h4><h5 id="1-将要迁移的环境打包"><a class="markdownIt-Anchor" href="#1-将要迁移的环境打包"></a> 1、将要迁移的环境打包</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda pack -n 虚拟环境名称 -o output.tar.gz</code></pre><ul><li>如果报错：No command ‘conda pack’<br>尝试使用：<code>conda install -c conda-forge conda-pack</code></li></ul><h5 id="2-迁移"><a class="markdownIt-Anchor" href="#2-迁移"></a> 2、迁移</h5><ul><li>进到conda的安装目录：/anaconda3/envs/</li><li>在该目录下新建文件夹py3.9</li><li>复制output.tar.gz压缩文件到/anaconda3/envs/py3.9/下，在该目录下解压 <code>tar -xzvf output.tar.gz</code></li></ul><hr><p>1、查看服务器GPU</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvidia-smi</code></pre><p><img src="https://img.promefire.top/blog-img/20240110-0f456eaf404cc1bae0daa51f35492404.png" alt></p><p><a href="https://pan.baidu.com/s/1r_DfpurqY15AJy3fe0B4Wg?pwd=1r03">Anaconda3-2021.11-Linux-x86_64.sh</a></p><p><a href="https://pan.baidu.com/s/1fCvn_0xDnb-HuOrjCkC00Q?pwd=7fqg">output.tar.gz</a></p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
          <category> 深度学习 </category>
          
          <category> 开发运维 </category>
          
          <category> 服务器运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> PyTorch </tag>
            
            <tag> CUDA </tag>
            
            <tag> GPU加速 </tag>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业设计</title>
      <link href="//post/bi-ye-she-ji.html"/>
      <url>//post/bi-ye-she-ji.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>毕业设计遇到的问题和解决</p><p>1、jsp汉字乱码</p><p>首行添加：</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot; pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</code></pre><p>2、数据库连接问题</p><p>读取properties问题</p><p><a href="https://www.jb51.net/article/195047.htm">https://www.jb51.net/article/195047.htm</a></p><p>通过重新安装8.0版本Mysql数据库及对应驱动包解决</p><p>3、authorize标签</p><p><a href="authz:authorize">authz:authorize</a>是一个流程控制标签，能够在满足特定安全需求的条件下显示它的内容体。它有三个互斥的参数：<br>n  ifAllGranted――是一个由逗号分隔的权限列表，用户必须拥有所有列出的权限才能渲染标签体；<br>n  ifAnyGranted――是一个由逗号分隔的权限列表，用户必须至少拥有其中的一个才能渲染标签体；<br>n  ifNotGranted――是一个由逗号分隔的权限列表，用户必须不拥有其中的任何一个才能渲染标签体。</p><p>从标签源码可以知道，authorize标签判断顺序是： access-&gt;url-&gt;ifNotGranted-&gt;ifAllGranted-&gt;ifAnyGranted 但他们的关系是“与”: 即只要其中任何一个属性不满足则该标签中间的内容将不会显示给用户,举个例子:</p><p>4、<strong>IsAuthenticated</strong> 属性是一个布尔值，指示当前用户是否已通过身份验证（已登录）。</p><p>如果当前用户已通过身份验证，则该属性值是一个布尔值 <strong>true</strong>，否则是 <strong>false</strong>。</p><p>isAnonymous() 匿名登录返回true</p><p>5/j_spring_security_check</p><p>spring security 3.x默认登录拦截URL</p><p>5<code>&lt;img src</code>标签引用网络地址图片不显示</p><p>​这因为在引用链接时,浏览器对地址发起请求加上了refre这个请求头,而有些服务器能根据refre反盗所以引用失败返回403。</p><p>解决：加一行代码就行：<meta name="referrer" content="no-referrer"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 项目记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>错误及解决</title>
      <link href="//post/yu-dao-de-cuo-wu-ji-jie-jue.html"/>
      <url>//post/yu-dao-de-cuo-wu-ji-jie-jue.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="错误及解决"><a class="markdownIt-Anchor" href="#错误及解决"></a> 错误及解决</h2><h4 id="1-no-constructor-found-matching异常"><a class="markdownIt-Anchor" href="#1-no-constructor-found-matching异常"></a> 1、No constructor found matching异常</h4><ul><li>缺少无参构造函数</li></ul><h4 id="2-文件夹与moudle"><a class="markdownIt-Anchor" href="#2-文件夹与moudle"></a> 2、文件夹与moudle</h4><p>moudle右下角有小蓝块，没有则是普通的文件夹</p><p><img src="https://img.promefire.top/blog-img/20240110-639e871e9ffd9a4ff131d06015c3ccae.png" alt></p><h4 id="3-idea目录错误"><a class="markdownIt-Anchor" href="#3-idea目录错误"></a> 3、idea目录错误</h4><p><img src="https://img.promefire.top/blog-img/20240110-3625a0277a2c15df0ed4601426034249.png" alt>s</p><h4 id="4-报错non-static-method-inital-cannot-be-referenced-from-a-static-contex"><a class="markdownIt-Anchor" href="#4-报错non-static-method-inital-cannot-be-referenced-from-a-static-contex"></a> 4、报错：Non-static method ‘inital()’ cannot be referenced from a static contex</h4><h4 id="5-idea写spring新建moudle是缺少pomxml文件"><a class="markdownIt-Anchor" href="#5-idea写spring新建moudle是缺少pomxml文件"></a> 5、idea写spring新建moudle是缺少pom.xml文件</h4><p>解决：错误新建了Javaee文件，应该是新建maven文件</p><h4 id="6-动态代理代理的是接口不是他的实现类"><a class="markdownIt-Anchor" href="#6-动态代理代理的是接口不是他的实现类"></a> 6、动态代理代理的是接口，不是他的实现类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Mytest &#123;    public static void main(String[] args) &#123;        ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;Context.xml&quot;);        UserServiceImpl userservice &#x3D; (UserServiceImpl) context.getBean(&quot;userservice&quot;);        userservice.search();    &#125;&#125;</code></pre><pre class="line-numbers language-none"><code class="language-none">报错：Exception in thread &quot;main&quot; java.lang.ClassCastException: com.sun.proxy.$Proxy5 cannot be cast to com.aop.user.UserServiceImpl</code></pre><p>解决：不能用接口的实现类（UserServiceImpl）转换转换Proxy的实现类，它们是同级，应该用接口（UserService）来实现</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 项目记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java项目部署至服务器</title>
      <link href="//post/java-xiang-mu-bu-shu-zhi-fu-wu-qi.html"/>
      <url>//post/java-xiang-mu-bu-shu-zhi-fu-wu-qi.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="部署流程"><a class="markdownIt-Anchor" href="#部署流程"></a> 部署流程：</h3><p>1、服务器配置好Java web项目运行环境</p><p>2、本地将java web项目打包成<code>.jar</code>或<code>.war</code>文件</p><p>3、将打包好的文件上传至服务器并移动至tomcat安装目录下<code>webapps</code>路径下</p><h3 id="环境配置"><a class="markdownIt-Anchor" href="#环境配置"></a> 环境配置</h3><p>1、服务器安装Java环境，即下载jdk</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y install java-1.8.0-openjdk</code></pre><p>2、服务器安装tomcat</p><p><a href="http://tomcat.apache.org/">Tomcat官网</a>下载<code>tar.gz</code>安装包并上传至服务器解压，在bin目录下输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.&#x2F;startup.sh</code></pre><p>启动服务器</p><h3 id="项目打包"><a class="markdownIt-Anchor" href="#项目打包"></a> 项目打包</h3><p>1、点击<code>Project Structure</code> -&gt; 点上边绿色加号 -&gt; 点击 <code>Web Application: Archive</code> -&gt; 选择<code>For'XXX'</code>—&gt; 上面<code>Include in project</code>勾选 -&gt; 点击Apply 、ok</p><p><img src="https://img.promefire.top/blog-img/20240110-7b30539b4855e472bb5932cfa9cc88a5.png" alt="image-20210306175841970"></p><p>2、点击菜单栏的<code>build</code> ，选择<code>build Artifacts</code></p><p><img src="https://img.promefire.top/blog-img/20240110-0b4c042ca25edd73082ba0b0c656343c.png" alt="image-20210306180229527"></p><p>3、最后在<code>out</code>文件夹找到生成的<code>war</code>包</p><h3 id="项目部署"><a class="markdownIt-Anchor" href="#项目部署"></a> 项目部署</h3><p>把打包好的<code>war</code>包放到<code>tomcat</code>的**<code>webapps</code><strong>文件夹下，然后重启<code>tomcat</code>就可以了，</strong><code>tomcat</code>会自动解压**。<br>注意项目启动后访问路径会发生变化，如之前的访问路径是<code>/hello</code>,那么此时就得加上<code>webapps</code>下解压的那个项目文件夹的名字，即<code>/项目文件名/hello</code>。</p><h3 id="附"><a class="markdownIt-Anchor" href="#附"></a> 附：</h3><h3 id="linux开启mysql远程连接"><a class="markdownIt-Anchor" href="#linux开启mysql远程连接"></a> Linux开启Mysql远程连接</h3><p>1、开启用户的远程访问权限</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -uroot -pgrant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;123456&#39; with grant option;flush privileges;</code></pre><blockquote><p>% 代表任意主机，可替换为ip地址。root是用户名，‘123456’指定登录密码，与root用户密码无关，不影响</p></blockquote><p>2、开启防火墙端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent</code></pre><p>3、重启防火墙</p><p>使用idea测试，连接成功</p><p><img src="https://img.promefire.top/blog-img/20240110-dde0659de968aed00aae6a1e2708e9d7.png" alt="image-20210306181017759"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
            <tag> Java </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长亭日暮</title>
      <link href="//post/chang-ting-ri-mu.html"/>
      <url>//post/chang-ting-ri-mu.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>长亭，日暮<br>登京口古渡<br>任时光回溯<br>纷飞千年变故</p><p>仲谋骑马猎虎，冲冠一怒<br>擂动战鼓，万民臣服<br>诸侯一怒，天下缟素<br>终英雄迟暮，辉煌落幕<br>归于尘土</p><p>流水不言，湍急如故<br>时光不语，匆匆如故<br>叹庸庸碌碌，将韶华辜负<br>听风将往事言诉 ，却难推心置腹<br>唯独与山与水，与卿与景，一见如故<br>愿将河山倾覆，换卿笑颜永驻</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现博客每日换肤</title>
      <link href="//post/pa-qu-bing-tu-pian.html"/>
      <url>//post/pa-qu-bing-tu-pian.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="实现博客每日换肤"><a class="markdownIt-Anchor" href="#实现博客每日换肤"></a> 实现博客每日换肤</h1><h2 id="1-爬取bing图片"><a class="markdownIt-Anchor" href="#1-爬取bing图片"></a> 1、爬取bing图片</h2><p>使用requests库获取网页html，正则表达式获取图片链接，python’库<code>datetime</code>标注日期，crontab建立定时任务每天爬取</p><p>代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import reimport requestsimport datetimeurl &#x3D; &#39;https:&#x2F;&#x2F;www.bing.com&#x2F;&#39;headers &#x3D; &#123;&quot;user-agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;88.0.4324.182 Safari&#x2F;537.36&quot;&#125;response &#x3D; requests.get(url,headers &#x3D; headers).textpicUrl &#x3D;re.findall(r&#39;style&#x3D;&quot;background-image: url(.*?);&#39;,response,re.S)Url &#x3D; &#39;https:&#x2F;&#x2F;www.bing.com&#x2F;&#39; + picUrl[0]pic &#x3D; requests.get(Url)file1 &#x3D; &#39;E:\Desktop\\screen\\&#39; + str(datetime.datetime.now().year)+&#39;-&#39;+str(datetime.datetime.now().month)+&#39;-&#39;+str(datetime.datetime.now().day) + &#39;.jpg&#39;file2 &#x3D; &#39;E:\\blog\\myblog\\themes\\fluid\\source\\img\\&#39; +  &#39;default.jpg&#39;fp &#x3D; open(file1,&#39;wb&#39;)fp.write(pic.content)fp.close()fp &#x3D; open(file2,&#39;wb&#39;)fp.write(pic.content)fp.close()</code></pre><hr><p>file1保存图片</p><p>file2直接将图片下载到hexo目录下fluid主题下的资源文件夹中，命名为default.jpg,自动覆盖上一天的图片。以实现自动更换博客顶部图片</p><p><img src="https://img.promefire.top/blog-img/20240110-1181217953e025666193d123b555cc93.png" alt></p><h2 id="2-编写bat文件实现图片爬取及博客部署"><a class="markdownIt-Anchor" href="#2-编写bat文件实现图片爬取及博客部署"></a> 2、编写bat文件,实现图片爬取及博客部署</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">e:cd Desktop\screenpython download.pycd E:\blog\myblogstart E:\Git\bin\sh.exe -c &quot;hexo clean &amp;&amp; hexo d -g&quot;exit</code></pre><h2 id="3-设置windows定时任务设置为超过时间立即执行"><a class="markdownIt-Anchor" href="#3-设置windows定时任务设置为超过时间立即执行"></a> 3、设置windows定时任务，设置为超过时间立即执行</h2><p><img src="https://img.promefire.top/blog-img/20240110-4a0bbb13fa8782f642dd64597e03f655.png" alt></p><p><img src="https://raw.githubusercontent.com/promefire/Myblog/main/img202303292048218.png" alt="image-20210304195728504"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调栈</title>
      <link href="//post/dan-diao-zhan.html"/>
      <url>//post/dan-diao-zhan.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="单调栈问题"><a class="markdownIt-Anchor" href="#单调栈问题"></a> 单调栈问题</h1><h2 id="什么是单调栈"><a class="markdownIt-Anchor" href="#什么是单调栈"></a> 什么是单调栈</h2><p>维护一个栈，里面的元素的大小按照他们所在栈内的位置，满足一定的单调性</p><h2 id="84-柱状图中最大的矩形"><a class="markdownIt-Anchor" href="#84-柱状图中最大的矩形"></a> 84、<a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram/">柱状图中最大的矩形</a></h2><h3 id="解法一暴力法超时"><a class="markdownIt-Anchor" href="#解法一暴力法超时"></a> 解法一：暴力法（超时）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public int largestRectangleArea(int[] heights) &#123;        int len &#x3D; heights.length;        if(len &#x3D;&#x3D; 1) return heights[0];        int maxArea &#x3D; 0;        for (int i &#x3D; 0;i &lt; len;i++)&#123;            System.out.println(&quot;i &#x3D; &quot; + i);            int left &#x3D; i;            int right &#x3D; i;            for(int j &#x3D; i - 1;j &gt;&#x3D; 0;j--)&#123;                if(heights[j] &lt; heights[i])&#123;                    left &#x3D; j;                    break;                &#125;                else&#123;                    left &#x3D; -1;                    &#x2F;&#x2F;假设之前还有一个比heights【i】小                &#125;            &#125;            for(int k &#x3D; i + 1;k &lt; len;k++)&#123;                if(heights[k] &lt; heights[i])&#123;                    right &#x3D; k ;                    break;                &#125;                else&#123;                    right &#x3D; len;                &#125;            &#125;            System.out.println(&quot;left &#x3D; &quot;+ left);            System.out.println(&quot;right &#x3D; &quot;+ right);            int Area &#x3D; 0;            if(left !&#x3D; i &amp;&amp; right !&#x3D; i)&#123;                Area &#x3D; heights[i] * (right - left - 1);            &#125;            else if((left &#x3D;&#x3D; i &amp;&amp; right !&#x3D; i) || (left !&#x3D; i &amp;&amp; right &#x3D;&#x3D; i) )&#123;                Area &#x3D; heights[i] * (right - left);            &#125;            else if(left - right &#x3D;&#x3D; 0 )&#123;                Area &#x3D; heights[i];            &#125;            System.out.println(&quot;Area &#x3D; &quot;+ Area);            maxArea &#x3D; Area &gt; maxArea? Area:maxArea;        &#125;        return maxArea;    &#125;&#125;</code></pre><h3 id="解法二符合后进先出规律使用栈"><a class="markdownIt-Anchor" href="#解法二符合后进先出规律使用栈"></a> 解法二：符合后进先出规律，使用栈</h3><blockquote><p>栈存放下标，并且对应的高度按从小到大顺序排列</p></blockquote><p>遍历每个高度，如果当前高度比栈顶的高度大，将当前下标入栈，否则，将栈顶元素出栈（这个高度矩形的面积已经可以确定），如果栈顶出栈后栈空，意味着之前没有比他小的柱形，即这个高度的矩形可以扩展到最左边，即<code>width = i</code>。如果出栈后栈不为空，说明<strong>新栈顶</strong>就是栈顶(已出栈）该高度的左边界，即<code>width = i - stack.peekLast() - 1 </code>,记录过程中的最大面积。</p><p>遍历结束后，如果此时栈不为空，并且已知栈内高度从小到大排列，所以可以得出<strong>每一个高度的矩形都可以扩展道最右边</strong>。在对宽度<code>Width</code>的计算中，只需把<code>i</code>替换成数组长度<code>len</code>。</p><p>最后返回最大面积</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public int largestRectangleArea(int[] heights) &#123;        int len &#x3D; heights.length;        &#x2F;&#x2F;特判        if(len &#x3D;&#x3D; 0)&#123;            return 0;        &#125;        if(len &#x3D;&#x3D; 1)&#123;            return heights[0];        &#125;                Deque&lt;Integer&gt; stack &#x3D; new ArrayDeque&lt;&gt;();        int area &#x3D; 0;        &#x2F;&#x2F;遍历每个高度        for(int i &#x3D; 0;i &lt; len;i++)&#123;            int now &#x3D; heights[i];            while(!stack.isEmpty() &amp;&amp; now &lt; heights[stack.peekLast()])&#123;                int height &#x3D; heights[stack.removeLast()];                &#x2F;&#x2F;相同的话将栈顶元素弹出                while(!stack.isEmpty() &amp;&amp; heights[stack.peekLast()] &#x3D;&#x3D; height)&#123;                    stack.removeLast();                &#125;                int width;                &#x2F;&#x2F;栈为空说明没有比这个高度更小的柱形，即这个高度的柱形可以扩展到最左边                if(stack.isEmpty())&#123;                    width &#x3D; i;                &#125;else &#123;                    width &#x3D; i - stack.peekLast() - 1;                &#125;                area &#x3D; Math.max(area,height * width);            &#125;            &#x2F;&#x2F;当前高度比栈顶的高度大，入栈            stack.addLast(i);        &#125;        while(!stack.isEmpty())&#123;            int height &#x3D; heights[stack.removeLast()];            &#x2F;&#x2F;相同的话将栈顶元素弹出            while(!stack.isEmpty() &amp;&amp; heights[stack.peekLast()] &#x3D;&#x3D; height)&#123;                stack.removeLast();            &#125;            int width;            &#x2F;&#x2F;栈为空说明没有比这个高度更小的柱形，即这个高度的柱形可以扩展到最左边            if(stack.isEmpty())&#123;                width &#x3D; len;            &#125;else &#123;                width &#x3D; len - stack.peekLast() - 1;            &#125;            area &#x3D; Math.max(area,height * width);        &#125;        return area;        &#125;&#125;</code></pre><h3 id="解法二优化使用哨兵节点"><a class="markdownIt-Anchor" href="#解法二优化使用哨兵节点"></a> 解法二优化：使用哨兵节点</h3><p>加入哨兵节点 即在数组首尾加入一个高度为0的柱形</p><p>哨兵1可以保证栈非空，从而可以在代码逻辑中删去所有判断栈为空的操作</p><p>哨兵2可以保证一轮遍历结束后，计算出的最大面积即为所求，省去了上面遍历结束后弹栈的操作。因为有哨兵2的存在，它比栈内所有的高度都小，都要进行弹栈操作。简化代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public int largestRectangleArea(int[] heights) &#123;        int len &#x3D; heights.length;        if(len &#x3D;&#x3D; 0)&#123;            return 0;        &#125;        if(len &#x3D;&#x3D; 1)&#123;            return heights[0];        &#125;        int[] Heights &#x3D; new int[len + 2];        for(int i &#x3D; 0;i &lt; len ;i++)&#123;            Heights[i + 1] &#x3D; heights[i];        &#125;        len +&#x3D; 2;        heights &#x3D; Heights;        int area &#x3D; 0;        Deque&lt;Integer&gt; stack &#x3D; new ArrayDeque&lt;&gt;();        stack.addLast(0);&#x2F;&#x2F;加入哨兵节点，保证栈非空        for(int i &#x3D; 1;i &lt; len;i++)&#123;            while( heights[i] &lt; heights[stack.peekLast()])&#123;                int height &#x3D; heights[stack.removeLast()];                int width &#x3D; i - stack.peekLast() - 1;                area &#x3D; Math.max(area,height * width);            &#125;            stack.addLast(i);        &#125;        return area;        &#125;&#125;</code></pre><h2 id="496-下一个更大元素i"><a class="markdownIt-Anchor" href="#496-下一个更大元素i"></a> 496、<a href="https://leetcode-cn.com/problems/next-greater-element-i/">下一个更大元素Ⅰ</a></h2><h3 id="法一-暴力法"><a class="markdownIt-Anchor" href="#法一-暴力法"></a> 法一、暴力法</h3><p><code>hashmap</code>保存数组<code>nums2</code>中元素及对应的下标</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public int[] nextGreaterElement(int[] nums1, int[] nums2) &#123;        HashMap&lt;Integer,Integer&gt; map &#x3D; new HashMap&lt;&gt;();        int[] result &#x3D; new int[nums1.length];        Arrays.fill(result,-1);        for(int i &#x3D; 0;i &lt; nums2.length;i++)&#123;            map.put(nums2[i],i);        &#125;        for(int i &#x3D;0;i &lt; nums1.length;i++)&#123;            int location &#x3D; map.get(nums1[i]);            for(int j &#x3D; location;j &lt; nums2.length;j++)&#123;                if(nums2[j] &gt; nums1[i])&#123;                    result[i] &#x3D; nums2[j];                    break;                &#125;            &#125;        &#125;    return result;    &#125;</code></pre><h3 id="法二单调栈"><a class="markdownIt-Anchor" href="#法二单调栈"></a> 法二：单调栈</h3><p>维护一个单调递减的栈，如果遇到了大于栈顶元素的值，那么这个值一定是栈顶元素的下一个更大的元素。将栈顶元素弹出，写入map。最后将数组元素遍历结束，如果栈不为空，说明站内元素找不到更大的元素，即为-1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public int[] nextGreaterElement(int[] nums1, int[] nums2) &#123;            HashMap&lt;Integer,Integer&gt; map &#x3D; new HashMap&lt;&gt;();            Stack&lt;Integer&gt; stack &#x3D; new Stack&lt;&gt;();            int[] result &#x3D; new int[nums1.length];            for(int i &#x3D; 0;i &lt; nums2.length;i++)&#123;                while (!stack.isEmpty() &amp;&amp; stack.peek() &lt; nums2[i])&#123;                    map.put(stack.pop(),nums2[i]);                &#125;                stack.push(nums2[i]);            &#125;            while (!stack.isEmpty())&#123;                map.put(stack.pop(),-1);            &#125;            for(int i &#x3D; 0;i &lt; nums1.length;i++)&#123;                result[i] &#x3D; map.get(nums1[i]);            &#125;            return result;        &#125;&#125;</code></pre><h3 id="739-每日温度"><a class="markdownIt-Anchor" href="#739-每日温度"></a> <a href="https://leetcode-cn.com/problems/daily-temperatures/">739、每日温度</a></h3><p>简简单单</p><blockquote><p>一开始傻乎乎地将数组元素值存进栈，之后在 知元素值求下表问题上出错，因为我是用map&lt;T[i],i&gt;存储，而给定数组中可以出现重复温度，这些重复温度在map中仅记录最新值。</p><p>应该为存放下标</p></blockquote><blockquote><p>我用的是Stack&lt;&gt;集合，提交只击败24%</p><p>官方题解使用队列模拟栈<code>Deque&lt;Integer&gt; stack = new LinkedList&lt;Integer&gt;();</code>。击败76%，记录学习</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public int[] dailyTemperatures(int[] T) &#123;        Stack&lt;Integer&gt; stack &#x3D; new Stack&lt;&gt;();        int[] result &#x3D; new int[T.length];        Arrays.fill(result,0);        for(int i &#x3D; 0;i &lt; T.length;i++)&#123;            while (!stack.isEmpty() &amp;&amp; T[stack.peek()] &lt; T[i])&#123;                &#x2F;&#x2F;int j &#x3D; stack.pop();                result[stack.peek()] &#x3D; i - stack.pop() ;            &#125;            stack.push(i);        &#125;        return result;    &#125;&#125;</code></pre><p>问题：</p><p>Leetcode 42 接雨水</p><p>Leetcode 503 下一个更大元素||</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 力扣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(二)  AOP</title>
      <link href="//post/spring-er-aop.html"/>
      <url>//post/spring-er-aop.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="spring二-aop"><a class="markdownIt-Anchor" href="#spring二-aop"></a> Spring(二)  AOP</h1><p>AOP的底层机制就是动态代理！</p><h2 id="一-静态动态代理"><a class="markdownIt-Anchor" href="#一-静态动态代理"></a> 一、静态/动态代理</h2><p>Spring AOP中的动态代理主要有两种方式，JDK动态代理和CGLIB动态代理。</p><p>JDK动态代理通过反射来接收被代理的类，并且<strong>要求被代理的类必须实现一个接口</strong>。JDK动态代理的核心是InvocationHandler接口和Proxy类。</p><p>如果目标类没有实现接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。</p><p>CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成某个类的子类，注意，CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。</p><p><img src="/post/spring-er-aop/20240110-94d3b80d7a83678a768bc863397ef00f.png" alt></p><pre class="line-numbers language-none"><code class="language-none">基于接口的代理两个类InvocationHandler调用处理程序返回结果proxy提供生成动态代理类和实例的静态方法</code></pre><h2 id="二-一些名词"><a class="markdownIt-Anchor" href="#二-一些名词"></a> 二、一些名词</h2><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 …</li><li>切面（ASPECT）：横切关注点 被模块化 的特殊对象。即，它是一个类。</li><li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。</li><li>目标（Target）：被通知对象。</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li><li>切入点（PointCut）：切面通知 执行的 “地点”的定义。</li><li>连接点（JointPoint）：与切入点匹配的执行点。</li></ul><h2 id="三-实现方法"><a class="markdownIt-Anchor" href="#三-实现方法"></a> 三、实现方法：</h2><h3 id="方法一"><a class="markdownIt-Anchor" href="#方法一"></a> 方法一</h3><p>使用spring的API接口（xml配置）主要是Spring接口实现</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;bean id&#x3D;&quot;userservice&quot; class&#x3D;&quot;com.aop.user.UserServiceImpl&quot;&#x2F;&gt;  &lt;bean id&#x3D;&quot;log&quot; class&#x3D;&quot;com.aop.promefire.Log&quot;&#x2F;&gt;  &lt;bean id&#x3D;&quot;afterLog&quot; class&#x3D;&quot;com.aop.promefire.AfterLog&quot;&#x2F;&gt;  &lt;aop:config&gt;      &lt;!--切入点--&gt;      &lt;!--excution表达式   UserServiceImpl.* 表示类中所有方法 --&gt;      &lt;!--UserServiceImpl.*(..) 两个点表示可以有任意个参数--&gt;      &lt;aop:pointcut id&#x3D;&quot;pointcut&quot; expression&#x3D;&quot;execution(* com.aop.user.UserServiceImpl.*(..))&quot;&#x2F;&gt;      &lt;aop:advisor advice-ref&#x3D;&quot;log&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&#x2F;&gt;      &lt;aop:advisor advice-ref&#x3D;&quot;afterLog&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&#x2F;&gt;  &lt;&#x2F;aop:config&gt;</code></pre><h3 id="方法二"><a class="markdownIt-Anchor" href="#方法二"></a> 方法二</h3><p>自定义类实现AOP（主要是切面定义）</p><p>定义一个增强类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class DiyPointCut &#123;    public void before()&#123;        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法前&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);    &#125;    public void after()&#123;        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法后&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);    &#125;&#125;</code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;bean id &#x3D;&quot;diy&quot; class&#x3D;&quot;com.aop.diy.DiyPointCut&quot;&#x2F;&gt;   &lt;aop:config&gt;       &lt;aop:aspect ref&#x3D;&quot;diy&quot;&gt;           &lt;!--切入点--&gt;           &lt;aop:pointcut id&#x3D;&quot;pointcut&quot; expression&#x3D;&quot;execution(* com.aop.user.UserServiceImpl.*(..))&quot;&#x2F;&gt;           &lt;aop:before method&#x3D;&quot;before&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&#x2F;&gt;           &lt;aop:after method&#x3D;&quot;after&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&#x2F;&gt;       &lt;&#x2F;aop:aspect&gt;   &lt;&#x2F;aop:config&gt;</code></pre><h2 id="附execution表达式"><a class="markdownIt-Anchor" href="#附execution表达式"></a> 附：execution表达式</h2><p>语法格式：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">execution(&lt;修饰符模式&gt;？&lt;返回类型模式&gt;&lt;方法名模式&gt;(&lt;参数模式&gt;)&lt;异常模式&gt;?)</code></pre><p>示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">execution(* com.sample.service.impl..*.*(..))</code></pre><p>解释：</p><ul><li>execution()，表达式的主体</li><li>第一个“*”符号，表示返回值类型任意；</li><li>com.sample.service.impl，AOP所切的服务的包名，即我们的业务部分</li><li>包名后面的“…”，表示当前包及子包</li><li>第二个“*”，表示类名，即所有类</li><li>.*(…)，表示任何方法名，括号表示参数，两个点表示任何参数类型</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(一)</title>
      <link href="//post/spring-yi.html"/>
      <url>//post/spring-yi.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="spring"><a class="markdownIt-Anchor" href="#spring"></a> Spring</h2><h2 id="一-ioc理论"><a class="markdownIt-Anchor" href="#一-ioc理论"></a> 一、IOC理论</h2><p>对于新增或修改业务，不需要修改代码。只需要修改配置文件，</p><h2 id="二-实例化容器"><a class="markdownIt-Anchor" href="#二-实例化容器"></a> 二、实例化容器</h2><h4 id="bean骨架"><a class="markdownIt-Anchor" href="#bean骨架"></a> bean骨架</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;    &lt;bean id&#x3D;&quot;...&quot; class&#x3D;&quot;...&quot;&gt;        &lt;!-- collaborators and configuration for this bean go here --&gt;    &lt;&#x2F;bean&gt;    &lt;bean id&#x3D;&quot;...&quot; class&#x3D;&quot;...&quot;&gt;        &lt;!-- collaborators and configuration for this bean go here --&gt;    &lt;&#x2F;bean&gt;    &lt;!-- more bean definitions go here --&gt;&lt;&#x2F;beans&gt;</code></pre><h2 id="三-ioc创建对象方式"><a class="markdownIt-Anchor" href="#三-ioc创建对象方式"></a> 三、IOC创建对象方式</h2><p>1、默认使用无参构造创建</p><p>2、使用有参构造</p><p>​1、下标赋值</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.promefire.injection.User&quot;&gt;        &lt;!-- collaborators and configuration for this bean go here --&gt;        &lt;constructor-arg index&#x3D;&quot;0&quot; value&#x3D;&quot;桥边红药&quot;&#x2F;&gt;    &lt;&#x2F;bean&gt;</code></pre><p>​2、类型赋值</p><pre class="line-numbers language-Xml" data-language="Xml"><code class="language-Xml">&lt;bean id &#x3D; &quot;user&quot; class &#x3D; &quot;com.promefire.injection.User&quot;&gt;        &lt;constructor-arg type&#x3D;&quot;java.lang.String&quot; value&#x3D;&quot; （Type赋值）桥边红药&quot;&#x2F;&gt;    &lt;&#x2F;bean&gt;</code></pre><blockquote><p>不建议使用，可能会有多个相同类型的变量</p></blockquote><p>​3、参数名</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;bean id &#x3D; &quot;user&quot; class &#x3D; &quot;com.promefire.injection.User&quot;&gt;        &lt;constructor-arg name&#x3D;&quot;name&quot; value&#x3D;&quot;promefire&quot;&#x2F;&gt;    &lt;&#x2F;bean&gt;</code></pre><p>配置文件加载的时候，容器中管理的对象已经被初始化</p><blockquote><p>不能忘记写有参构造函数，否则会报错</p></blockquote><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Test    public void text1() &#123;        ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;Userbeans.xml&quot;);        User user &#x3D; (User) context.getBean(&quot;user&quot;);        &#x2F;&#x2F;User user &#x3D; context.getBeans(&quot;user&quot;,User.class);        &#x2F;&#x2F;可以省去强转类型        System.out.println(user);    &#125;</code></pre><h2 id="四-spring-配置"><a class="markdownIt-Anchor" href="#四-spring-配置"></a> 四、Spring 配置</h2><h4 id="1-别名"><a class="markdownIt-Anchor" href="#1-别名"></a> 1、别名</h4><pre class="line-numbers language-none"><code class="language-none"></code></pre><h2 id="五-依赖注入di"><a class="markdownIt-Anchor" href="#五-依赖注入di"></a> 五、依赖注入DI</h2><h4 id="1-构造器注入"><a class="markdownIt-Anchor" href="#1-构造器注入"></a> 1、构造器注入</h4><h4 id="2-set注入"><a class="markdownIt-Anchor" href="#2-set注入"></a> 2、set注入</h4><p>基于 setter 的 DI</p><h4 id="3-拓展注入"><a class="markdownIt-Anchor" href="#3-拓展注入"></a> 3、拓展注入</h4><blockquote><p>需要加入xml依赖</p></blockquote><p>P命名空间注入(proprety)</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">xmlns:p&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;p&quot;&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.promefire.injection.User&quot; p:name&#x3D;&quot;桥边红药&quot; p:age&#x3D;&quot;18&quot;&#x2F;&gt;</code></pre><p>C命名空间注入（construct）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"> xmlns:c&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;c&quot;&lt;bean id&#x3D;&quot;user2&quot; class&#x3D;&quot;com.promefire.injection.User&quot; c:name&#x3D;&quot;promefire&quot; c:age&#x3D;&quot;20&quot; &#x2F;&gt;</code></pre><h4 id="4-bean生命周期"><a class="markdownIt-Anchor" href="#4-bean生命周期"></a> 4、bean生命周期</h4><p>单例模型（默认）：<code>scope</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.promefire.injection.User&quot; p:name&#x3D;&quot;promefire&quot; p:age&#x3D;&quot;18&quot; scope&#x3D;&quot;singleton&quot;&#x2F;&gt;</code></pre><p>原型模式 ：每次从容器中取出一个对象，都是一个新的对象</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.promefire.injection.User&quot; p:name&#x3D;&quot;promefire&quot; p:age&#x3D;&quot;18&quot; scope&#x3D;&quot;prototype&quot;&#x2F;&gt;</code></pre><h2 id="六-自动装配"><a class="markdownIt-Anchor" href="#六-自动装配"></a> 六、自动装配</h2><p>1、在xml中显示的配置</p><p>2、在Java中显示的配置</p><p>3、隐式的自动装配bean</p><h4 id="1-byname"><a class="markdownIt-Anchor" href="#1-byname"></a> 1、Byname</h4><p>​       会自动在容器上下文寻找与自己对象set方法后面的<strong>值</strong>对应的bean id</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;bean id&#x3D;&quot;people&quot; class&#x3D;&quot;com.promefire.pojo.People &quot; autowire&#x3D;&quot;byName&quot; &#x2F;&gt;</code></pre><blockquote><p>必须名字唯一</p></blockquote><h4 id="2-bytype"><a class="markdownIt-Anchor" href="#2-bytype"></a> 2、ByType</h4><p>​    会自动在容器上下文寻找与自己对象set方法对象属性<strong>类型</strong>相同的bean</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;bean id&#x3D;&quot;people&quot; class&#x3D;&quot;com.promefire.pojo.People &quot; autowire&#x3D;&quot;byType&quot; &#x2F;&gt;</code></pre><blockquote><p>必须类型唯一</p></blockquote><h4 id="3-使用注解实现自动装配"><a class="markdownIt-Anchor" href="#3-使用注解实现自动装配"></a> 3、使用注解实现自动装配</h4><h6 id="autowired注解"><a class="markdownIt-Anchor" href="#autowired注解"></a> @Autowired注解</h6><p>1、导入约束</p><p>2、配置注解的支持:<a href="context:annotation-config/">context:annotation-config/</a></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;    xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;    &lt;context:annotation-config&#x2F;&gt;&lt;&#x2F;beans&gt;</code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class People &#123;    @Autowired    private Cat cat;    @Autowired    private Dog dog;    private String name;</code></pre><blockquote><p>属性前加@Autowired注解可以省略setter（）方法，前提是属性在IOC容器中存在且名字相同</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class People &#123;    @Autowired(required &#x3D; false)    private Cat cat;    @Autowired    @Qualifier(&quot;dog111&quot;)&#x2F;&#x2F;显示地指定一个id    private Dog dog;    private String name;        </code></pre><blockquote><p>自动装配环境比较复杂时，可以用Qualifier（“XXX”）配合Autowired使用</p></blockquote><h6 id="resource注解"><a class="markdownIt-Anchor" href="#resource注解"></a> @Resource注解</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class People &#123;    @Resource(name &#x3D; &quot;cat2&quot;)    private Cat cat;    @Resource    private Dog dog;    private String name;</code></pre><p>@Resource和@Autowired比较:</p><ul><li>都是用来自动装配，都可以放在属性字段上</li><li>@Autowired 默认先使用byType，必须要求这个对象存在</li><li>@Resource 默认ByName，找不到就用ByType实现，还找不到，报错</li></ul><h2 id="七-使用注解开发"><a class="markdownIt-Anchor" href="#七-使用注解开发"></a> 七、使用注解开发</h2><blockquote><p>1、开启注解约束，</p><p>2、扫描包，使该包下注解生效</p></blockquote><p>1、bean</p><p>2、属性如何注入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Componentpublic class User &#123;    &#x2F;&#x2F;等价于&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.promefire.dao.User&quot;&gt;    &#x2F;&#x2F;        &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;桥边红药&quot;&#x2F;&gt;    &#x2F;&#x2F;    &lt;&#x2F;bean&gt;    &#x2F;&#x2F;@Value(&quot;桥边红药&quot;)    public String name ;    @Value(&quot;桥边红药&quot;)    public void setName(String name) &#123;        this.name &#x3D; name;    &#125;&#125;</code></pre><p>3、衍生的注解</p><p>4、自动装配</p><ul><li>@Autowired：自动装配，通过类型，名字<ul><li>如果不能唯一指定，需要@Qualifier(“xxx”)显示指定一个id</li></ul></li><li>@Nullable :该字段可以为null</li><li>@Resource: 自动装配，通过名字，类型</li></ul><p>5、作用域</p><ul><li>@Scope(“singleton”)</li><li>@Scope(“prototype”)</li></ul><h2 id="八-流程"><a class="markdownIt-Anchor" href="#八-流程"></a> 八、流程</h2><h3 id="springioc启动流程"><a class="markdownIt-Anchor" href="#springioc启动流程"></a> SpringIOC启动流程</h3><p><img src="https://img.promefire.top/blog-img/20240110-6ee10b14a34027261db46c6af7cfb69e.png" alt></p><h3 id="ioc容器启动主线"><a class="markdownIt-Anchor" href="#ioc容器启动主线"></a> IOC容器启动主线</h3><p><img src="https://img.promefire.top/blog-img/20240110-659cc68879eaccec21f21fc625982e5c.png" alt></p><h3 id="文档注释"><a class="markdownIt-Anchor" href="#文档注释"></a> 文档注释</h3><table><thead><tr><th>应用场景</th><th style="text-align:left">注解</th><th style="text-align:left">注解说明</th></tr></thead><tbody><tr><td>处理请求</td><td style="text-align:left">@Controller</td><td style="text-align:left">处理 Http 请求</td></tr><tr><td>处理请求</td><td style="text-align:left">@RestController</td><td style="text-align:left">@Controller 的衍生注解</td></tr><tr><td>路由请求</td><td style="text-align:left">@RequestMapping</td><td style="text-align:left">路由请求 可以设置各种操作方法</td></tr><tr><td>路由请求</td><td style="text-align:left">@GetMapping</td><td style="text-align:left">GET 方法的路由</td></tr><tr><td>路由请求</td><td style="text-align:left">@PostMapping</td><td style="text-align:left">POST 方法的路由</td></tr><tr><td>路由请求</td><td style="text-align:left">@PutMapping</td><td style="text-align:left">PUT 方法的路由</td></tr><tr><td>路由请求</td><td style="text-align:left">@DeleteMapping</td><td style="text-align:left">DELETE 方法的路由</td></tr><tr><td>请求参数</td><td style="text-align:left">@PathVariable</td><td style="text-align:left">处理请求 url 路径中的参数 /user/{id}</td></tr><tr><td>请求参数</td><td style="text-align:left">@RequestParam</td><td style="text-align:left">处理问号后面的参数</td></tr><tr><td>请求参数</td><td style="text-align:left">@RequestBody</td><td style="text-align:left">请求参数以json格式提交</td></tr><tr><td>返回参数</td><td style="text-align:left">@ResponseBody</td><td style="text-align:left">返回 json 格式</td></tr></tbody></table><ul><li>依赖：spring-webmvc</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework&#x2F;spring-webmvc --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;    &lt;version&gt;5.2.9.RELEASE&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre><blockquote><p>快捷键</p></blockquote><p><code>Ctrl+Alt+V</code>:生成变量名</p><p><code>psvm</code>：main函数</p><p><code>sout</code>:输出</p><p><code>Alt + Enter</code>:强制类型转换</p><p><code>Ctrl + /</code>: 注释</p><p><code>Ctrl + SHift + /</code>：块注释</p><blockquote><p>踩坑</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&lt;bean id&#x3D;&quot;hello&quot; class&#x3D;&quot;com.promefire.Hello&quot;&gt;        &lt;property name&#x3D;&quot;str&quot; value&#x3D;&quot;Spring&quot;&#x2F;&gt;    &lt;&#x2F;bean&gt;</code></pre><blockquote><p>name 后面的值 要与Hello类中变量相同</p></blockquote><blockquote><p>id = 变量名 class = new的对象</p><p>Hello hello =  new Hello()</p><p>property 给对象中的属性设置一个值</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10修改中文用户名</title>
      <link href="//post/win10-xiu-gai-zhong-wen-yong-hu-ming.html"/>
      <url>//post/win10-xiu-gai-zhong-wen-yong-hu-ming.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="win10修改中文用户名"><a class="markdownIt-Anchor" href="#win10修改中文用户名"></a> win10修改中文用户名</h3><p>1、win+R输入regedit</p><p>2、CTRL + F 搜索 ProfileList</p><p>从下面所有中找到<code>C\Users\中文用户名</code>一项，修改为英文用户名</p><p>3、重启，将C盘users下中文用户名修改为第二步修改的英文用户名，再次重启</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>秒杀系统</title>
      <link href="//post/miao-sha-xi-tong-yi.html"/>
      <url>//post/miao-sha-xi-tong-yi.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="学习记录"><a class="markdownIt-Anchor" href="#学习记录"></a> 学习记录</h1><h3 id="1-xml-cdata"><a class="markdownIt-Anchor" href="#1-xml-cdata"></a> 1、XML CDATA</h3><p>使用方法：<!--[CDATA[文本内容]]--></p><p>XML文档中所有的文本均会被解析器解析，只有CDATA区段中的文本会被解析器忽略</p><h3 id="2-mybatis和spring整合方式"><a class="markdownIt-Anchor" href="#2-mybatis和spring整合方式"></a> 2、mybatis和spring整合方式</h3><ul><li>XML提供SQL</li><li>DAO接口Mapper</li></ul><h3 id="3-jdbc连接池是个什么东西"><a class="markdownIt-Anchor" href="#3-jdbc连接池是个什么东西"></a> 3、jdbc连接池是个什么东西?</h3><p>在增删改查操作中，避免频繁地创建和销毁JDBC连接，可以通过连接池复制已经创建好的连接</p><h3 id="4-class-path-resource-jdbcproperties-cannot-be-opened-because-it-does-not-exist"><a class="markdownIt-Anchor" href="#4-class-path-resource-jdbcproperties-cannot-be-opened-because-it-does-not-exist"></a> 4、class path resource [jdbc.properties] cannot be opened because it does not exist</h3><p>之前的写法:</p><p><img src="https://img.promefire.top/blog-img/20240110-091cf14df515a4bbd9d27b5371b20820.png" alt></p><p>修改为 相对路径 即 <code>spring/jdbc.properties</code>：</p><p><img src="https://img.promefire.top/blog-img/20240110-559101d18e3440a463d607df0433ec23.png" alt></p><h3 id="5-connections-could-not-be-acquired-from-the-underlying-database"><a class="markdownIt-Anchor" href="#5-connections-could-not-be-acquired-from-the-underlying-database"></a> 5、Connections could not be acquired from the underlying database!</h3><p>折腾了半天，最后把<code>jdbc.properties</code>中的配置直接写到<code>spring-dao.xml</code>中</p><p><img src="https://img.promefire.top/blog-img/20240110-15769ecdac7966dc51c2b1d5615794b1.png" alt></p><p>结果是一个 &amp; 报错 ，删掉&amp;及后面的就成功了，我直接？？？</p><p>xml配置文件中，要用<code>&amp;amp;</code>代替</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;property name&#x3D;&quot;jdbcUrl&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;seckill?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&quot;&#x2F;&gt;</code></pre><p><img src="https://raw.githubusercontent.com/promefire/Myblog/main/img202303292048105.png" alt="img"></p><p>得出结论，<code>spring-dao.xml</code>不能读取<code>jdbc.properties</code>文件</p><p>暂未解决</p><p>6、java的运行不会保留形参</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">List&lt;Seckill&gt; queryAll(int offet, int limit)-&gt;queryAll(arg0,arg1);</code></pre><p>如果之后操作需要形参，如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;select id&#x3D;&quot;queryAll&quot; resultType&#x3D;&quot;Seckill&quot;&gt;        select seckill_id,NAME,NUMBER ,start_time,end_time,create_time        from seckill        order by create_time DESC        limit #&#123;offset&#125;,#&#123;limit&#125;    &lt;&#x2F;select&gt;</code></pre><p>则可以通过<code>@Param()</code>注解实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">List&lt;Seckill&gt; queryAll(@Param(&quot;offset&quot;) int offset,@Param(&quot;limit&quot;) int limit);</code></pre><h3 id="7-error-instantiating-class-orgseckillentityseckill-with-invalid-types-or-values"><a class="markdownIt-Anchor" href="#7-error-instantiating-class-orgseckillentityseckill-with-invalid-types-or-values"></a> 7、Error instantiating class org.seckill.entity.Seckill with invalid types () or values ().</h3><p>seckill实体类缺少无参构造</p><h3 id="8-这个dao层单元测试之前一直有几个属性报null检查之后发现是两个实体类共有的属性变量名不一致造成的"><a class="markdownIt-Anchor" href="#8-这个dao层单元测试之前一直有几个属性报null检查之后发现是两个实体类共有的属性变量名不一致造成的"></a> 8、这个dao层单元测试之前一直有几个属性报Null，检查之后发现是两个实体类共有的属性变量名不一致造成的。</h3><p><img src="https://raw.githubusercontent.com/promefire/Myblog/main/img202303292048222.png" alt="image-20210206213044063"></p><h2 id="service层"><a class="markdownIt-Anchor" href="#service层"></a> Service层</h2><p>9、报错：不兼容的类型</p><p>Incompatible types. Required:  java.util.logging.Logger<br>Found:       org.slf4j.Logger</p><p>解决：</p><p><img src="https://img.promefire.top/blog-img/20240110-6f5456cdffcf9c0998f576a9d7c26ece.png" alt></p><p>将划红线的修改为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import org.slf4j.Logger;import org.slf4j.LoggerFactory;</code></pre><p>10、 roll back回滚？spring事务</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Connection conn &#x3D; DriverManager.getConnection();try &#123;      conn.setAutoCommit(false);  &#x2F;&#x2F;将自动提交设置为false                             执行CRUD操作     conn.commit();      &#x2F;&#x2F;当两个操作成功后手动提交  &#125; catch (Exception e) &#123;      conn.rollback();    &#x2F;&#x2F;一旦其中一个操作出错都将回滚，所有操作都不成功    e.printStackTrace();  &#125; finally &#123;    conn.colse();&#125;</code></pre><p>​事务是一系列的动作，一旦其中有一个动作出现错误，必须全部回滚，系统将事务中对数据库的所有已完成的操作全部撤消，滚回到事务开始的状态，避免出现由于数据不一致而导致的接下来一系列的错误。事务的出现是为了确保数据的完整性和一致性，在目前企业级应用开发中，事务管理是必不可少的。</p><p>11、spring整合mybatis Dao层注入失败,但是单元测试通过，无报错</p><p><img src="https://raw.githubusercontent.com/promefire/Myblog/main/img202303292048258.png" alt="image-20210222184343517"></p><h2 id="web层"><a class="markdownIt-Anchor" href="#web层"></a> Web层</h2><p>1、Restful是什么</p><p>一种url规范</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/30396391">https://zhuanlan.zhihu.com/p/30396391</a></p><p>2、Spring的Model</p><p>作用：从控制层直接返回前端所需的数据</p><p>3、@RequestMapping()</p><p>参数produce：指定返回值类型还可以指定字符编码</p><p>@Responsebody</p><p>@ResponseBody的作用其实是将java对象转为json格式的数据</p><p>4、@Pathvariable()</p><p>通过 @PathVariable 可以将URL中占位符参数{xxx}绑定到处理器类的方法形参中@PathVariable(“xxx“)</p><p>5、重定向和请求转发</p><p>6、@CookieValue</p><p><strong>作用：</strong><br>用于把指定cookie名称的值传入控制器方法参数。<br><strong>属性：</strong><br><code>value</code>：指定cookie的名称。<br><code>required</code>：是否必须有此cookie。</p><p>7、重复秒杀、秒杀关闭异常，在service层直接抛出，需要在controller层处理</p><p>8、静态包含</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@include file&#x3D;&quot;common&#x2F;head.jsp&quot;%&gt;    &lt;%--静态包含--%&gt;</code></pre><p>9、</p><p>jsp页面中<a> 标签中的target=_blank是什么意思?</a></p><p>解答：<br>表示该连接在新窗口中打开</p><p>_self相同框架<br>_top整页<br>_blank新建一个窗口<br>_parent父窗口<br>其它的就是自定义了，可以指向已有的窗口名称</p><p>10、html页面中文乱码</p><p>查看页面编码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&quot;windows-1252&quot;</code></pre><p>修改系统编码（失败）</p><p><img src="https://raw.githubusercontent.com/promefire/Myblog/main/img202303292048773.png" alt="img"></p><p>修稿jsp文件编码设置</p><p>原先设置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@page contentType&#x3D;&quot;text&#x2F;html; charset &#x3D; utf-8&quot; language&#x3D;&quot;java&quot; %&gt;</code></pre><p>解决方案：将<code>charser = utf-8</code>修改为<code>pageEncoding=utf-8</code></p><p>pageEncoding是jsp文件本身的编码</p><p>contentType的charset是指服务器发送给客户端时的内容编码</p><p>成功显示：</p><p><img src="https://img.promefire.top/blog-img/20240110-318b07cbf03b2cbb43c2bbf0a09de405.png" alt></p><p>11、jquery选择器,选择到一个节点</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">var killPhoneModal &#x3D; $(&#39;#killPhoneModal&#39;)</code></pre><p>12、电话输入框无法弹出</p><p>原因：未能成功加载<code>seckill.js</code></p><p>将路径<code>resources/script/seckill.js</code>前加上**‘ / ’**</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;script src&#x3D;&quot;&#x2F;resources&#x2F;script&#x2F;seckill.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;</code></pre><p><img src="https://img.promefire.top/blog-img/20240110-26620a5c039d64d97ea7b5d52df933b5.png" alt></p><p>13、电话输入框无法输入</p><p>解决方法：加入一个样式</p><p><img src="https://img.promefire.top/blog-img/20240110-ed89ebdecdc0c6561ec1210390919850.png" alt></p><p>14、/time/now加载失败</p><p><img src="https://gitee.com/Promefire/pictures/raw/master/img/20210301220229.png" alt="image-20210301220229002"></p><p>原因是web层SeckillController中没有加入@ResponseBody注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(value &#x3D; &quot;&#x2F;time&#x2F;now&quot;,method &#x3D; RequestMethod.GET)   @ResponseBody   public SeckillResult&lt;Long&gt; time()&#123;       Date now  &#x3D; new Date();       return new SeckillResult(true,now.getTime());   &#125;</code></pre><p>15、Uncaught TypeError: killPhoneModal.modal is not a function</p><p>jqury包含了两次，注释掉一个</p><p><img src="https://img.promefire.top/blog-img/20240110-ccb823cce1104dec9a2875b518202f39.png" alt></p><p>16、修改Js无效</p><p>清除浏览器缓存并按F12 network中禁用缓存</p><p>17、IDEA中 JSP/HTML文件无法导入js文件</p><p>解决，需要把js文件所在的上级目录设置为<code>resources</code>文件夹</p><p><img src="https://img.promefire.top/blog-img/20240110-6fa24407b898529afb8794b7ee10dea4.png" alt></p><p>18、电话输入框一直弹出</p><p>原因是<code>seckill.js</code>文件中  <code>cookie</code>值与<code>SeckillController.java</code>中cookie值不一致，导致无法读入输入的手机号</p><p><img src="https://img.promefire.top/blog-img/20240110-8ef8652825cb390002de42cf972edbef.png" alt></p><p><img src="https://raw.githubusercontent.com/promefire/Myblog/main/img202303292048788.png" alt="image-20210312221724921"></p><p>最后</p><p><img src="https://img.promefire.top/blog-img/20240110-1f3db45793770abe9eb653531987924b.png" alt></p><p>数据库</p><p><img src="https://img.promefire.top/blog-img/20240110-b2fb2b70294dd22309eb597fec60b14a.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客相关</title>
      <link href="//post/hexo-blog-related.html"/>
      <url>//post/hexo-blog-related.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>还行吧，空有博客没有内容是不行滴，要多记录哦</li><li>贴上参考教程:<a href="https://www.cnblogs.com/visugar/p/6821777.html">https://www.cnblogs.com/visugar/p/6821777.html</a></li></ul><hr><p>0、使用的插件</p><p>寒假期间入手一台阿里云ECS服务器，现将hexo博客由GithubPage迁到阿里云上</p><p>现记录如下：</p><p>1、本地有git和npm但是hexo命令无效</p><p>解决：检查后是环境变量的问题，应把hexo根目录下<code>~\node_modules\.bin</code>添加至系统变量.</p><p>2、修改完文章部署命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean &amp;&amp; hexo d -g</code></pre><p>等于</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean    --清除缓存，每次部署前建议执行这一步hexo generate --生成静态文件hexo deploy   --部署至服务器</code></pre><p>将环境文件推送至github</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git add . &amp; git commit -m &quot;save&quot; &amp; git push origin source</code></pre><p>3、一些命令</p><pre class="line-numbers language-none"><code class="language-none">hexo new &quot;文章题目&quot;         --新建文章hexo new page &quot;pagename&quot;   --新建页面</code></pre><p>4、hexo同步管理</p><blockquote><p>将本地的一些环境文件存放至github，防止误删或使用新电脑</p></blockquote><ul><li>在<code>promefire.github.io</code>仓库中新建一个<code>source</code>分支</li><li>github切换到source分支，<code>git clone</code>到本地</li><li>进入<code>promefire.github.io</code>文件夹，只保留<code>.git</code>文件夹，其他全部删除</li><li><code>git add -A</code>  <code>git commit -m &quot;some description&quot;</code> <code>git push origin</code>推送至github，此时<code>source</code>分支下为空白</li><li>将<code>promefire.github.io</code>目录下的<code>.git</code>文件夹复制到hexo根目录下，此时，hexo项目已经变成了和远程hexo分支关联的本地仓库了</li><li>每次发布新文章或修改时，<code>git add . &amp; git commit -m &quot;save&quot; &amp; git push origin source</code>即可把环境文件推送到source分支，然后再使用<code>hexo d -g</code>发布网站。</li></ul><p>5、更改后每次都要执行hexo三件套+备份实在太麻烦了，新建一个<code>deploy.sh</code>脚本放在博客目录下，需要部署和备份时运行即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo generatehexo deploygit add .git commit -m &quot;save&quot;git push</code></pre><p><code>git add xx</code> 后悔了，使用 <code>git reset &lt;file&gt;</code> 或<code>git reset</code> 撤销</p><p>6、博客中插入哔哩哔哩视频,视频要点分享–&gt;嵌入代码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;div style&#x3D;&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;&gt;&lt;iframe src&#x3D;&quot;&#x2F;&#x2F;player.bilibili.com&#x2F;player.html?aid&#x3D;529707372&amp;bvid&#x3D;BV1Du411Y7tB&amp;cid&#x3D;1161446244&amp;page&#x3D;1&quot;scrolling&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; frameborder&#x3D;&quot;no&quot; framespacing&#x3D;&quot;0&quot; allowfullscreen&#x3D;&quot;true&quot; style&#x3D;&quot;position: absolute; width: 100%; height: 100%; Left: 0; top: 0;&quot;&gt; &lt;&#x2F;iframe&gt;&lt;&#x2F;div&gt;</code></pre><p>7、空格消失</p><p>把tab替换成这个</p><p><code>&lt;html&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/html&gt; </code></p><p>参考：<a href="https://www.jianshu.com/p/fceaf373d797">https://www.jianshu.com/p/fceaf373d797</a></p><p>8、草稿</p><p>有些时候某篇文章还没写完，发布其他文章的时候会把未完成的也发布，hexo自带了草稿功能，我竟然一直不知道，都是在其他地方写完再拉到post文件夹下</p><ul><li>新建草稿</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new draft &lt;title&gt;</code></pre><p>Hexo 另外提供 <code>draft</code> 机制，它的原理是新文章将建立在 <code>source/_drafts</code> 目录下，因此 <code>hexo generate</code> 并不会将其编译到 <code>public</code> 目录下，所以 <code>hexo deploy</code> 也不会将其部署到 GitHub。</p><ul><li>本机预览草稿</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo S --draft</code></pre><ul><li>将草稿发布为正式文章</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo P &lt;filename&gt;</code></pre><p>其中 <code>&lt;filename&gt;</code> 为不包含 <code>md</code> 后缀的文章名称。它的原理只是将文章从 <code>source/_drafts</code> 移动到 <code>source/_posts</code> 而已。</p><p>9、</p><p>报错</p><blockquote><p>Updates were rejected because the remote contains work that you do<br>not have locally. This is usually caused by another repository pushing<br>to the same ref. You may want to first integrate the remote changes<br>(e.g., ‘git pull …’) before pushing again.<br>See the ‘Note about fast-forwards’ in ‘git push --help’ for details.</p></blockquote><p>解决</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git pull origin master &#x2F;&#x2F;run this first, thengit push origin master</code></pre><p>10、git push后代码回滚</p><p>今天莫名奇妙，博客首页404了，我寻思也没改什么东西，最后选择回滚代码解决。</p><ul><li><code>git log</code> 查看push日志</li><li><code>git reset --hard 回退到的版本号</code></li><li><code>git push -f origin</code> 强制同步</li></ul><p>11、hexo永久链接设置英文</p><blockquote><p>Markdown <code>Front-matter</code> 区域可以看到，我这里除了 <code>title</code>， <code>date</code> 以及 <code>tags</code> 外，自己添加了一个新的变量 <code>urlname</code> ，这个新的变量用来保存每个文章的英文名字，这样一来可以有利于 SEO，二来可以缩短博客文章 URL 的层数。</p></blockquote><p>那么，<code>Front-matter</code> 区域新增一个变量 <code>urlname</code> ，值为前面说的英文字母格式</p><p>再在 Hexo 配置文件 <code>_config.yml</code> 中，把 <code>permalink:</code> 的值设为 <code>urlname.html</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">permalink: :urlname.html</code></pre><p>12、修改创建文章时<code>Front-matter</code> 区域模板</p><p>修改<code>/scaffolds/post.md</code>文件即可,修改如下</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:    -categories:    -cover:description: </code></pre><p>13、文章置顶</p><p><code>sticky</code> 数字越大，越靠前</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">--- title: Hello Worlddate: 2013&#x2F;7&#x2F;13 20:46:25sticky: 100---</code></pre><p>14、文章永久链接</p><p>原先使用title会在链接中存在中文，复制粘贴打开不方便，使用日期时间作为url</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># URL## Set your site url here. For example, if you use GitHub Page, set url as &#39;https:&#x2F;&#x2F;username.github.io&#x2F;project&#39;url: http:&#x2F;&#x2F;example.compermalink: &#x2F;post&#x2F;:year:month:day:hour:minute:second.html#permalink: &#x2F;post&#x2F;:title.htmlpermalink_defaults:pretty_urls:  trailing_index: true # Set to false to remove trailing &#39;index.html&#39; from permalinks  trailing_html: true # Set to false to remove trailing &#39;.html&#39; from permalinks</code></pre><p>15、导入外部CSS</p><p>在<code>[BlogRoot]</code>的<code>source</code>文件夹下新建CSS文件夹，存放<code>.css</code>文件</p><p>在主题<code>_config.butterfly.yml</code> 的<code>inject</code>下导入</p><p><img src="https://img.promefire.top/blog-img/20240116-59304e7eefe2627c7c927e4dc667d4dc.png" alt="image-20240116155059633"></p><p>16、Git设置代理</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:10808&#39; git config --global https.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:10808&#39;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 优化 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
